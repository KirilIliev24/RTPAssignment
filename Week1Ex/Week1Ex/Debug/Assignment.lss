
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00003884  00003918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003884  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ad1  00800242  00800242  0000395a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000395a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000398c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000668  00000000  00000000  000039cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000858d  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020e9  00000000  00000000  0000c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004291  00000000  00000000  0000e6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001778  00000000  00000000  0001293c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000283c  00000000  00000000  000140b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000776d  00000000  00000000  000168f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000648  00000000  00000000  0001e05d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	9f c3       	rjmp	.+1854   	; 0x770 <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <__vector_25>
      68:	0c 94 78 16 	jmp	0x2cf0	; 0x2cf0 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__vector_36>
      94:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__vector_51>
      d0:	0c 94 a4 17 	jmp	0x2f48	; 0x2f48 <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__vector_54>
      dc:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5b 12       	cpse	r5, r27
      e6:	5b 12       	cpse	r5, r27
      e8:	5b 12       	cpse	r5, r27
      ea:	92 12       	cpse	r9, r18
      ec:	9a 12       	cpse	r9, r26
      ee:	af 12       	cpse	r10, r31
      f0:	5b 12       	cpse	r5, r27
      f2:	5b 12       	cpse	r5, r27
      f4:	92 12       	cpse	r9, r18
      f6:	9a 12       	cpse	r9, r26

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 89 08 	call	0x1112	; 0x1112 <prvCheckTasksWaitingTermination>
      fc:	80 91 67 0c 	lds	r24, 0x0C67	; 0x800c67 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	70 d2       	rcall	.+1248   	; 0x5e6 <vPortYield>
     106:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <prvProcessTimerOrBlockTask>
     124:	0e 94 24 12 	call	0x2448	; 0x2448 <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e4 e8       	ldi	r30, 0x84	; 132
     142:	f8 e3       	ldi	r31, 0x38	; 56
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a2 34       	cpi	r26, 0x42	; 66
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	2d e0       	ldi	r18, 0x0D	; 13
     156:	a2 e4       	ldi	r26, 0x42	; 66
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a3 31       	cpi	r26, 0x13	; 19
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 cb 14 	call	0x2996	; 0x2996 <main>
     168:	0c 94 40 1c 	jmp	0x3880	; 0x3880 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <trace_init>:
	 #if (configUseR2RTrace == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     16e:	e7 e0       	ldi	r30, 0x07	; 7
     170:	f1 e0       	ldi	r31, 0x01	; 1
     172:	80 81       	ld	r24, Z
     174:	8f 60       	ori	r24, 0x0F	; 15
     176:	80 83       	st	Z, r24
     178:	08 95       	ret

0000017a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     17a:	e8 e0       	ldi	r30, 0x08	; 8
     17c:	f1 e0       	ldi	r31, 0x01	; 1
     17e:	90 81       	ld	r25, Z
     180:	90 7f       	andi	r25, 0xF0	; 240
     182:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     184:	90 81       	ld	r25, Z
     186:	8f 70       	andi	r24, 0x0F	; 15
     188:	98 2b       	or	r25, r24
     18a:	90 83       	st	Z, r25
     18c:	08 95       	ret

0000018e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     18e:	e8 e0       	ldi	r30, 0x08	; 8
     190:	f1 e0       	ldi	r31, 0x01	; 1
     192:	80 81       	ld	r24, Z
     194:	80 7f       	andi	r24, 0xF0	; 240
     196:	80 83       	st	Z, r24
     198:	08 95       	ret

0000019a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     19a:	ee e4       	ldi	r30, 0x4E	; 78
     19c:	f2 e0       	ldi	r31, 0x02	; 2
     19e:	a2 e5       	ldi	r26, 0x52	; 82
     1a0:	b2 e0       	ldi	r27, 0x02	; 2
     1a2:	b1 83       	std	Z+1, r27	; 0x01
     1a4:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     1a6:	13 82       	std	Z+3, r1	; 0x03
     1a8:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     1aa:	e2 e1       	ldi	r30, 0x12	; 18
     1ac:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     1ae:	f0 93 4d 02 	sts	0x024D, r31	; 0x80024d <pxEnd+0x1>
     1b2:	e0 93 4c 02 	sts	0x024C, r30	; 0x80024c <pxEnd>
    pxEnd->xBlockSize = 0;
     1b6:	13 82       	std	Z+3, r1	; 0x03
     1b8:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     1ba:	11 82       	std	Z+1, r1	; 0x01
     1bc:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     1be:	80 ec       	ldi	r24, 0xC0	; 192
     1c0:	99 e0       	ldi	r25, 0x09	; 9
     1c2:	13 96       	adiw	r26, 0x03	; 3
     1c4:	9c 93       	st	X, r25
     1c6:	8e 93       	st	-X, r24
     1c8:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     1ca:	ed 93       	st	X+, r30
     1cc:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1ce:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <xMinimumEverFreeBytesRemaining+0x1>
     1d2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1d6:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <xFreeBytesRemaining+0x1>
     1da:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e8       	ldi	r25, 0x80	; 128
     1e2:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__data_end+0x1>
     1e6:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
     1ea:	08 95       	ret

000001ec <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1f2:	ae e4       	ldi	r26, 0x4E	; 78
     1f4:	b2 e0       	ldi	r27, 0x02	; 2
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <prvInsertBlockIntoFreeList+0xe>
     1f8:	df 01       	movw	r26, r30
     1fa:	ed 91       	ld	r30, X+
     1fc:	fc 91       	ld	r31, X
     1fe:	11 97       	sbiw	r26, 0x01	; 1
     200:	ec 17       	cp	r30, r28
     202:	fd 07       	cpc	r31, r29
     204:	c8 f3       	brcs	.-14     	; 0x1f8 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     206:	12 96       	adiw	r26, 0x02	; 2
     208:	8d 91       	ld	r24, X+
     20a:	9c 91       	ld	r25, X
     20c:	13 97       	sbiw	r26, 0x03	; 3
     20e:	9d 01       	movw	r18, r26
     210:	28 0f       	add	r18, r24
     212:	39 1f       	adc	r19, r25
     214:	c2 17       	cp	r28, r18
     216:	d3 07       	cpc	r29, r19
     218:	49 f4       	brne	.+18     	; 0x22c <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     21a:	2a 81       	ldd	r18, Y+2	; 0x02
     21c:	3b 81       	ldd	r19, Y+3	; 0x03
     21e:	82 0f       	add	r24, r18
     220:	93 1f       	adc	r25, r19
     222:	13 96       	adiw	r26, 0x03	; 3
     224:	9c 93       	st	X, r25
     226:	8e 93       	st	-X, r24
     228:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     22a:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	9b 81       	ldd	r25, Y+3	; 0x03
     230:	9e 01       	movw	r18, r28
     232:	28 0f       	add	r18, r24
     234:	39 1f       	adc	r19, r25
     236:	e2 17       	cp	r30, r18
     238:	f3 07       	cpc	r31, r19
     23a:	c1 f4       	brne	.+48     	; 0x26c <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     23c:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <pxEnd>
     240:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <pxEnd+0x1>
     244:	e2 17       	cp	r30, r18
     246:	f3 07       	cpc	r31, r19
     248:	71 f0       	breq	.+28     	; 0x266 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     24a:	22 81       	ldd	r18, Z+2	; 0x02
     24c:	33 81       	ldd	r19, Z+3	; 0x03
     24e:	82 0f       	add	r24, r18
     250:	93 1f       	adc	r25, r19
     252:	9b 83       	std	Y+3, r25	; 0x03
     254:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     256:	ed 91       	ld	r30, X+
     258:	fc 91       	ld	r31, X
     25a:	11 97       	sbiw	r26, 0x01	; 1
     25c:	80 81       	ld	r24, Z
     25e:	91 81       	ldd	r25, Z+1	; 0x01
     260:	99 83       	std	Y+1, r25	; 0x01
     262:	88 83       	st	Y, r24
     264:	05 c0       	rjmp	.+10     	; 0x270 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     266:	39 83       	std	Y+1, r19	; 0x01
     268:	28 83       	st	Y, r18
     26a:	02 c0       	rjmp	.+4      	; 0x270 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     26c:	f9 83       	std	Y+1, r31	; 0x01
     26e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     270:	ca 17       	cp	r28, r26
     272:	db 07       	cpc	r29, r27
     274:	11 f0       	breq	.+4      	; 0x27a <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     276:	cd 93       	st	X+, r28
     278:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     28e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     292:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <pxEnd>
     296:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <pxEnd+0x1>
     29a:	89 2b       	or	r24, r25
     29c:	09 f4       	brne	.+2      	; 0x2a0 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     29e:	7d df       	rcall	.-262    	; 0x19a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     2a0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     2a4:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <__data_end+0x1>
     2a8:	80 23       	and	r24, r16
     2aa:	91 23       	and	r25, r17
     2ac:	89 2b       	or	r24, r25
     2ae:	09 f0       	breq	.+2      	; 0x2b2 <pvPortMalloc+0x32>
     2b0:	76 c0       	rjmp	.+236    	; 0x39e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2b2:	01 15       	cp	r16, r1
     2b4:	11 05       	cpc	r17, r1
     2b6:	49 f0       	breq	.+18     	; 0x2ca <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     2b8:	c8 01       	movw	r24, r16
     2ba:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2bc:	08 17       	cp	r16, r24
     2be:	19 07       	cpc	r17, r25
     2c0:	18 f0       	brcs	.+6      	; 0x2c8 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     2c2:	00 e0       	ldi	r16, 0x00	; 0
     2c4:	10 e0       	ldi	r17, 0x00	; 0
     2c6:	01 c0       	rjmp	.+2      	; 0x2ca <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     2c8:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     2ca:	01 15       	cp	r16, r1
     2cc:	11 05       	cpc	r17, r1
     2ce:	09 f4       	brne	.+2      	; 0x2d2 <pvPortMalloc+0x52>
     2d0:	69 c0       	rjmp	.+210    	; 0x3a4 <pvPortMalloc+0x124>
     2d2:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <xFreeBytesRemaining>
     2d6:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <xFreeBytesRemaining+0x1>
     2da:	80 17       	cp	r24, r16
     2dc:	91 07       	cpc	r25, r17
     2de:	08 f4       	brcc	.+2      	; 0x2e2 <pvPortMalloc+0x62>
     2e0:	64 c0       	rjmp	.+200    	; 0x3aa <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2e2:	c0 91 4e 02 	lds	r28, 0x024E	; 0x80024e <xStart>
     2e6:	d0 91 4f 02 	lds	r29, 0x024F	; 0x80024f <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2ea:	ee e4       	ldi	r30, 0x4E	; 78
     2ec:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     2f0:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2f2:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	9b 81       	ldd	r25, Y+3	; 0x03
     2f8:	80 17       	cp	r24, r16
     2fa:	91 07       	cpc	r25, r17
     2fc:	20 f4       	brcc	.+8      	; 0x306 <pvPortMalloc+0x86>
     2fe:	88 81       	ld	r24, Y
     300:	99 81       	ldd	r25, Y+1	; 0x01
     302:	00 97       	sbiw	r24, 0x00	; 0
     304:	a9 f7       	brne	.-22     	; 0x2f0 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     306:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <pxEnd>
     30a:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <pxEnd+0x1>
     30e:	c8 17       	cp	r28, r24
     310:	d9 07       	cpc	r29, r25
     312:	09 f4       	brne	.+2      	; 0x316 <pvPortMalloc+0x96>
     314:	4d c0       	rjmp	.+154    	; 0x3b0 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     316:	e0 80       	ld	r14, Z
     318:	f1 80       	ldd	r15, Z+1	; 0x01
     31a:	84 e0       	ldi	r24, 0x04	; 4
     31c:	e8 0e       	add	r14, r24
     31e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     320:	88 81       	ld	r24, Y
     322:	99 81       	ldd	r25, Y+1	; 0x01
     324:	91 83       	std	Z+1, r25	; 0x01
     326:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     328:	2a 81       	ldd	r18, Y+2	; 0x02
     32a:	3b 81       	ldd	r19, Y+3	; 0x03
     32c:	20 1b       	sub	r18, r16
     32e:	31 0b       	sbc	r19, r17
     330:	29 30       	cpi	r18, 0x09	; 9
     332:	31 05       	cpc	r19, r1
     334:	48 f0       	brcs	.+18     	; 0x348 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     336:	ce 01       	movw	r24, r28
     338:	80 0f       	add	r24, r16
     33a:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     33c:	fc 01       	movw	r30, r24
     33e:	33 83       	std	Z+3, r19	; 0x03
     340:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     342:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     344:	0a 83       	std	Y+2, r16	; 0x02
     346:	52 df       	rcall	.-348    	; 0x1ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     348:	2a 81       	ldd	r18, Y+2	; 0x02
     34a:	3b 81       	ldd	r19, Y+3	; 0x03
     34c:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <xFreeBytesRemaining>
     350:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <xFreeBytesRemaining+0x1>
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <xFreeBytesRemaining+0x1>
     35c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     360:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <xMinimumEverFreeBytesRemaining>
     364:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <xMinimumEverFreeBytesRemaining+0x1>
     368:	84 17       	cp	r24, r20
     36a:	95 07       	cpc	r25, r21
     36c:	20 f4       	brcc	.+8      	; 0x376 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     36e:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <xMinimumEverFreeBytesRemaining+0x1>
     372:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     376:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
     37a:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <__data_end+0x1>
     37e:	28 2b       	or	r18, r24
     380:	39 2b       	or	r19, r25
     382:	3b 83       	std	Y+3, r19	; 0x03
     384:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     386:	19 82       	std	Y+1, r1	; 0x01
     388:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     38a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <xNumberOfSuccessfulAllocations>
     38e:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <xNumberOfSuccessfulAllocations+0x1>
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <xNumberOfSuccessfulAllocations+0x1>
     398:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <xNumberOfSuccessfulAllocations>
     39c:	0b c0       	rjmp	.+22     	; 0x3b4 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     39e:	e1 2c       	mov	r14, r1
     3a0:	f1 2c       	mov	r15, r1
     3a2:	08 c0       	rjmp	.+16     	; 0x3b4 <pvPortMalloc+0x134>
     3a4:	e1 2c       	mov	r14, r1
     3a6:	f1 2c       	mov	r15, r1
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <pvPortMalloc+0x134>
     3aa:	e1 2c       	mov	r14, r1
     3ac:	f1 2c       	mov	r15, r1
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <pvPortMalloc+0x134>
     3b0:	e1 2c       	mov	r14, r1
     3b2:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3b4:	0e 94 14 0b 	call	0x1628	; 0x1628 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     3b8:	e1 14       	cp	r14, r1
     3ba:	f1 04       	cpc	r15, r1
     3bc:	11 f4       	brne	.+4      	; 0x3c2 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     3be:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     3c2:	c7 01       	movw	r24, r14
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	08 95       	ret

000003d2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	89 f1       	breq	.+98     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3de:	ec 01       	movw	r28, r24
     3e0:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3e2:	4a 81       	ldd	r20, Y+2	; 0x02
     3e4:	5b 81       	ldd	r21, Y+3	; 0x03
     3e6:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <__data_end>
     3ea:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <__data_end+0x1>
     3ee:	ba 01       	movw	r22, r20
     3f0:	62 23       	and	r22, r18
     3f2:	73 23       	and	r23, r19
     3f4:	67 2b       	or	r22, r23
     3f6:	21 f1       	breq	.+72     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3f8:	68 81       	ld	r22, Y
     3fa:	79 81       	ldd	r23, Y+1	; 0x01
     3fc:	67 2b       	or	r22, r23
     3fe:	01 f5       	brne	.+64     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     400:	20 95       	com	r18
     402:	30 95       	com	r19
     404:	24 23       	and	r18, r20
     406:	35 23       	and	r19, r21
     408:	3b 83       	std	Y+3, r19	; 0x03
     40a:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     40c:	cd d7       	rcall	.+3994   	; 0x13a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     40e:	8a 81       	ldd	r24, Y+2	; 0x02
     410:	9b 81       	ldd	r25, Y+3	; 0x03
     412:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <xFreeBytesRemaining>
     416:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <xFreeBytesRemaining+0x1>
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <xFreeBytesRemaining+0x1>
     422:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     426:	ce 01       	movw	r24, r28
     428:	e1 de       	rcall	.-574    	; 0x1ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     42a:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <xNumberOfSuccessfulFrees>
     42e:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <xNumberOfSuccessfulFrees+0x1>
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <xNumberOfSuccessfulFrees+0x1>
     438:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     43c:	0e 94 14 0b 	call	0x1628	; 0x1628 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     44a:	fc 01       	movw	r30, r24
     44c:	03 96       	adiw	r24, 0x03	; 3
     44e:	92 83       	std	Z+2, r25	; 0x02
     450:	81 83       	std	Z+1, r24	; 0x01
     452:	4f ef       	ldi	r20, 0xFF	; 255
     454:	5f ef       	ldi	r21, 0xFF	; 255
     456:	ba 01       	movw	r22, r20
     458:	43 83       	std	Z+3, r20	; 0x03
     45a:	54 83       	std	Z+4, r21	; 0x04
     45c:	65 83       	std	Z+5, r22	; 0x05
     45e:	76 83       	std	Z+6, r23	; 0x06
     460:	90 87       	std	Z+8, r25	; 0x08
     462:	87 83       	std	Z+7, r24	; 0x07
     464:	92 87       	std	Z+10, r25	; 0x0a
     466:	81 87       	std	Z+9, r24	; 0x09
     468:	10 82       	st	Z, r1
     46a:	08 95       	ret

0000046c <vListInitialiseItem>:
     46c:	fc 01       	movw	r30, r24
     46e:	13 86       	std	Z+11, r1	; 0x0b
     470:	12 86       	std	Z+10, r1	; 0x0a
     472:	08 95       	ret

00000474 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     47e:	08 81       	ld	r16, Y
     480:	19 81       	ldd	r17, Y+1	; 0x01
     482:	2a 81       	ldd	r18, Y+2	; 0x02
     484:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     486:	0f 3f       	cpi	r16, 0xFF	; 255
     488:	4f ef       	ldi	r20, 0xFF	; 255
     48a:	14 07       	cpc	r17, r20
     48c:	24 07       	cpc	r18, r20
     48e:	34 07       	cpc	r19, r20
     490:	21 f4       	brne	.+8      	; 0x49a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     492:	fc 01       	movw	r30, r24
     494:	a1 85       	ldd	r26, Z+9	; 0x09
     496:	b2 85       	ldd	r27, Z+10	; 0x0a
     498:	11 c0       	rjmp	.+34     	; 0x4bc <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     49a:	dc 01       	movw	r26, r24
     49c:	13 96       	adiw	r26, 0x03	; 3
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <vListInsert+0x2e>
     4a0:	df 01       	movw	r26, r30
     4a2:	14 96       	adiw	r26, 0x04	; 4
     4a4:	ed 91       	ld	r30, X+
     4a6:	fc 91       	ld	r31, X
     4a8:	15 97       	sbiw	r26, 0x05	; 5
     4aa:	40 81       	ld	r20, Z
     4ac:	51 81       	ldd	r21, Z+1	; 0x01
     4ae:	62 81       	ldd	r22, Z+2	; 0x02
     4b0:	73 81       	ldd	r23, Z+3	; 0x03
     4b2:	04 17       	cp	r16, r20
     4b4:	15 07       	cpc	r17, r21
     4b6:	26 07       	cpc	r18, r22
     4b8:	37 07       	cpc	r19, r23
     4ba:	90 f7       	brcc	.-28     	; 0x4a0 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4bc:	14 96       	adiw	r26, 0x04	; 4
     4be:	ed 91       	ld	r30, X+
     4c0:	fc 91       	ld	r31, X
     4c2:	15 97       	sbiw	r26, 0x05	; 5
     4c4:	fd 83       	std	Y+5, r31	; 0x05
     4c6:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4c8:	d7 83       	std	Z+7, r29	; 0x07
     4ca:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     4cc:	bf 83       	std	Y+7, r27	; 0x07
     4ce:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4d0:	15 96       	adiw	r26, 0x05	; 5
     4d2:	dc 93       	st	X, r29
     4d4:	ce 93       	st	-X, r28
     4d6:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4d8:	9b 87       	std	Y+11, r25	; 0x0b
     4da:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4dc:	fc 01       	movw	r30, r24
     4de:	20 81       	ld	r18, Z
     4e0:	2f 5f       	subi	r18, 0xFF	; 255
     4e2:	20 83       	st	Z, r18
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret

000004ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4f4:	a2 85       	ldd	r26, Z+10	; 0x0a
     4f6:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4f8:	c4 81       	ldd	r28, Z+4	; 0x04
     4fa:	d5 81       	ldd	r29, Z+5	; 0x05
     4fc:	86 81       	ldd	r24, Z+6	; 0x06
     4fe:	97 81       	ldd	r25, Z+7	; 0x07
     500:	9f 83       	std	Y+7, r25	; 0x07
     502:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     504:	c6 81       	ldd	r28, Z+6	; 0x06
     506:	d7 81       	ldd	r29, Z+7	; 0x07
     508:	84 81       	ldd	r24, Z+4	; 0x04
     50a:	95 81       	ldd	r25, Z+5	; 0x05
     50c:	9d 83       	std	Y+5, r25	; 0x05
     50e:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     510:	11 96       	adiw	r26, 0x01	; 1
     512:	8d 91       	ld	r24, X+
     514:	9c 91       	ld	r25, X
     516:	12 97       	sbiw	r26, 0x02	; 2
     518:	e8 17       	cp	r30, r24
     51a:	f9 07       	cpc	r31, r25
     51c:	31 f4       	brne	.+12     	; 0x52a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     51e:	86 81       	ldd	r24, Z+6	; 0x06
     520:	97 81       	ldd	r25, Z+7	; 0x07
     522:	12 96       	adiw	r26, 0x02	; 2
     524:	9c 93       	st	X, r25
     526:	8e 93       	st	-X, r24
     528:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     52a:	13 86       	std	Z+11, r1	; 0x0b
     52c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     52e:	8c 91       	ld	r24, X
     530:	81 50       	subi	r24, 0x01	; 1
     532:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     534:	8c 91       	ld	r24, X
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     53c:	a8 95       	wdr
     53e:	90 ec       	ldi	r25, 0xC0	; 192
     540:	88 e1       	ldi	r24, 0x18	; 24
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	a8 95       	wdr
     548:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     552:	08 95       	ret

00000554 <pxPortInitialiseStack>:
     554:	fc 01       	movw	r30, r24
     556:	60 83       	st	Z, r22
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	70 83       	st	Z, r23
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	10 82       	st	Z, r1
     560:	31 97       	sbiw	r30, 0x01	; 1
     562:	10 82       	st	Z, r1
     564:	31 97       	sbiw	r30, 0x01	; 1
     566:	20 e8       	ldi	r18, 0x80	; 128
     568:	20 83       	st	Z, r18
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	10 82       	st	Z, r1
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	10 82       	st	Z, r1
     572:	31 97       	sbiw	r30, 0x01	; 1
     574:	10 82       	st	Z, r1
     576:	77 97       	sbiw	r30, 0x17	; 23
     578:	40 83       	st	Z, r20
     57a:	31 97       	sbiw	r30, 0x01	; 1
     57c:	50 83       	st	Z, r21
     57e:	86 97       	sbiw	r24, 0x26	; 38
     580:	08 95       	ret

00000582 <xPortStartScheduler>:
     582:	dc df       	rcall	.-72     	; 0x53c <prvSetupTimerInterrupt>
     584:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
     588:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
     58c:	cd 91       	ld	r28, X+
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	dd 91       	ld	r29, X+
     592:	de bf       	out	0x3e, r29	; 62
     594:	ff 91       	pop	r31
     596:	ef 91       	pop	r30
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	bf 91       	pop	r27
     59e:	af 91       	pop	r26
     5a0:	9f 91       	pop	r25
     5a2:	8f 91       	pop	r24
     5a4:	7f 91       	pop	r23
     5a6:	6f 91       	pop	r22
     5a8:	5f 91       	pop	r21
     5aa:	4f 91       	pop	r20
     5ac:	3f 91       	pop	r19
     5ae:	2f 91       	pop	r18
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	9f 90       	pop	r9
     5c2:	8f 90       	pop	r8
     5c4:	7f 90       	pop	r7
     5c6:	6f 90       	pop	r6
     5c8:	5f 90       	pop	r5
     5ca:	4f 90       	pop	r4
     5cc:	3f 90       	pop	r3
     5ce:	2f 90       	pop	r2
     5d0:	1f 90       	pop	r1
     5d2:	0f 90       	pop	r0
     5d4:	0c be       	out	0x3c, r0	; 60
     5d6:	0f 90       	pop	r0
     5d8:	0b be       	out	0x3b, r0	; 59
     5da:	0f 90       	pop	r0
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	0f 90       	pop	r0
     5e0:	08 95       	ret
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	08 95       	ret

000005e6 <vPortYield>:
     5e6:	0f 92       	push	r0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	0f 92       	push	r0
     5ee:	0b b6       	in	r0, 0x3b	; 59
     5f0:	0f 92       	push	r0
     5f2:	0c b6       	in	r0, 0x3c	; 60
     5f4:	0f 92       	push	r0
     5f6:	1f 92       	push	r1
     5f8:	11 24       	eor	r1, r1
     5fa:	2f 92       	push	r2
     5fc:	3f 92       	push	r3
     5fe:	4f 92       	push	r4
     600:	5f 92       	push	r5
     602:	6f 92       	push	r6
     604:	7f 92       	push	r7
     606:	8f 92       	push	r8
     608:	9f 92       	push	r9
     60a:	af 92       	push	r10
     60c:	bf 92       	push	r11
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	2f 93       	push	r18
     61c:	3f 93       	push	r19
     61e:	4f 93       	push	r20
     620:	5f 93       	push	r21
     622:	6f 93       	push	r22
     624:	7f 93       	push	r23
     626:	8f 93       	push	r24
     628:	9f 93       	push	r25
     62a:	af 93       	push	r26
     62c:	bf 93       	push	r27
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	ef 93       	push	r30
     634:	ff 93       	push	r31
     636:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
     63a:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
     63e:	0d b6       	in	r0, 0x3d	; 61
     640:	0d 92       	st	X+, r0
     642:	0e b6       	in	r0, 0x3e	; 62
     644:	0d 92       	st	X+, r0
     646:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vTaskSwitchContext>
     64a:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
     64e:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
     652:	cd 91       	ld	r28, X+
     654:	cd bf       	out	0x3d, r28	; 61
     656:	dd 91       	ld	r29, X+
     658:	de bf       	out	0x3e, r29	; 62
     65a:	ff 91       	pop	r31
     65c:	ef 91       	pop	r30
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	af 90       	pop	r10
     686:	9f 90       	pop	r9
     688:	8f 90       	pop	r8
     68a:	7f 90       	pop	r7
     68c:	6f 90       	pop	r6
     68e:	5f 90       	pop	r5
     690:	4f 90       	pop	r4
     692:	3f 90       	pop	r3
     694:	2f 90       	pop	r2
     696:	1f 90       	pop	r1
     698:	0f 90       	pop	r0
     69a:	0c be       	out	0x3c, r0	; 60
     69c:	0f 90       	pop	r0
     69e:	0b be       	out	0x3b, r0	; 59
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	0f 90       	pop	r0
     6a6:	08 95       	ret

000006a8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	0f 92       	push	r0
     6b0:	0b b6       	in	r0, 0x3b	; 59
     6b2:	0f 92       	push	r0
     6b4:	0c b6       	in	r0, 0x3c	; 60
     6b6:	0f 92       	push	r0
     6b8:	1f 92       	push	r1
     6ba:	11 24       	eor	r1, r1
     6bc:	2f 92       	push	r2
     6be:	3f 92       	push	r3
     6c0:	4f 92       	push	r4
     6c2:	5f 92       	push	r5
     6c4:	6f 92       	push	r6
     6c6:	7f 92       	push	r7
     6c8:	8f 92       	push	r8
     6ca:	9f 92       	push	r9
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	2f 93       	push	r18
     6de:	3f 93       	push	r19
     6e0:	4f 93       	push	r20
     6e2:	5f 93       	push	r21
     6e4:	6f 93       	push	r22
     6e6:	7f 93       	push	r23
     6e8:	8f 93       	push	r24
     6ea:	9f 93       	push	r25
     6ec:	af 93       	push	r26
     6ee:	bf 93       	push	r27
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
     6f8:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
     6fc:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
     700:	0d b6       	in	r0, 0x3d	; 61
     702:	0d 92       	st	X+, r0
     704:	0e b6       	in	r0, 0x3e	; 62
     706:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     708:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     70a:	62 d6       	rcall	.+3268   	; 0x13d0 <xTaskIncrementTick>
     70c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     70e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     712:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
     716:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
     71a:	cd 91       	ld	r28, X+
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	dd 91       	ld	r29, X+
     720:	de bf       	out	0x3e, r29	; 62
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	bf 91       	pop	r27
     72c:	af 91       	pop	r26
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	7f 91       	pop	r23
     734:	6f 91       	pop	r22
     736:	5f 91       	pop	r21
     738:	4f 91       	pop	r20
     73a:	3f 91       	pop	r19
     73c:	2f 91       	pop	r18
     73e:	1f 91       	pop	r17
     740:	0f 91       	pop	r16
     742:	ff 90       	pop	r15
     744:	ef 90       	pop	r14
     746:	df 90       	pop	r13
     748:	cf 90       	pop	r12
     74a:	bf 90       	pop	r11
     74c:	af 90       	pop	r10
     74e:	9f 90       	pop	r9
     750:	8f 90       	pop	r8
     752:	7f 90       	pop	r7
     754:	6f 90       	pop	r6
     756:	5f 90       	pop	r5
     758:	4f 90       	pop	r4
     75a:	3f 90       	pop	r3
     75c:	2f 90       	pop	r2
     75e:	1f 90       	pop	r1
     760:	0f 90       	pop	r0
     762:	0c be       	out	0x3c, r0	; 60
     764:	0f 90       	pop	r0
     766:	0b be       	out	0x3b, r0	; 59
     768:	0f 90       	pop	r0
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     76e:	08 95       	ret

00000770 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     770:	9b df       	rcall	.-202    	; 0x6a8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     772:	18 95       	reti

00000774 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     774:	dc 01       	movw	r26, r24
     776:	53 96       	adiw	r26, 0x13	; 19
     778:	2c 91       	ld	r18, X
     77a:	53 97       	sbiw	r26, 0x13	; 19
     77c:	22 23       	and	r18, r18
     77e:	41 f0       	breq	.+16     	; 0x790 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     780:	5a 96       	adiw	r26, 0x1a	; 26
     782:	ed 91       	ld	r30, X+
     784:	fc 91       	ld	r31, X
     786:	5b 97       	sbiw	r26, 0x1b	; 27
     788:	90 81       	ld	r25, Z
     78a:	8a e0       	ldi	r24, 0x0A	; 10
     78c:	89 1b       	sub	r24, r25
     78e:	08 95       	ret
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	08 95       	ret

00000794 <prvIsQueueEmpty>:
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	0f 92       	push	r0
     79a:	fc 01       	movw	r30, r24
     79c:	86 8d       	ldd	r24, Z+30	; 0x1e
     79e:	81 11       	cpse	r24, r1
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <prvIsQueueEmpty+0x12>
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <prvIsQueueEmpty+0x14>
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0f 90       	pop	r0
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	08 95       	ret

000007ae <prvIsQueueFull>:
     7ae:	0f b6       	in	r0, 0x3f	; 63
     7b0:	f8 94       	cli
     7b2:	0f 92       	push	r0
     7b4:	fc 01       	movw	r30, r24
     7b6:	26 8d       	ldd	r18, Z+30	; 0x1e
     7b8:	87 8d       	ldd	r24, Z+31	; 0x1f
     7ba:	28 13       	cpse	r18, r24
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <prvIsQueueFull+0x14>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <prvIsQueueFull+0x16>
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	08 95       	ret

000007ca <prvCopyDataToQueue>:
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	ec 01       	movw	r28, r24
     7d4:	04 2f       	mov	r16, r20
     7d6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     7d8:	48 a1       	ldd	r20, Y+32	; 0x20
     7da:	41 11       	cpse	r20, r1
     7dc:	0c c0       	rjmp	.+24     	; 0x7f6 <prvCopyDataToQueue+0x2c>
     7de:	88 81       	ld	r24, Y
     7e0:	99 81       	ldd	r25, Y+1	; 0x01
     7e2:	89 2b       	or	r24, r25
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <prvCopyDataToQueue+0x1e>
     7e6:	42 c0       	rjmp	.+132    	; 0x86c <prvCopyDataToQueue+0xa2>
     7e8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ea:	9d 81       	ldd	r25, Y+5	; 0x05
     7ec:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <xTaskPriorityDisinherit>
     7f0:	1d 82       	std	Y+5, r1	; 0x05
     7f2:	1c 82       	std	Y+4, r1	; 0x04
     7f4:	42 c0       	rjmp	.+132    	; 0x87a <prvCopyDataToQueue+0xb0>
     7f6:	01 11       	cpse	r16, r1
     7f8:	17 c0       	rjmp	.+46     	; 0x828 <prvCopyDataToQueue+0x5e>
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	8a 81       	ldd	r24, Y+2	; 0x02
     7fe:	9b 81       	ldd	r25, Y+3	; 0x03
     800:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
     804:	28 a1       	ldd	r18, Y+32	; 0x20
     806:	8a 81       	ldd	r24, Y+2	; 0x02
     808:	9b 81       	ldd	r25, Y+3	; 0x03
     80a:	82 0f       	add	r24, r18
     80c:	91 1d       	adc	r25, r1
     80e:	9b 83       	std	Y+3, r25	; 0x03
     810:	8a 83       	std	Y+2, r24	; 0x02
     812:	2c 81       	ldd	r18, Y+4	; 0x04
     814:	3d 81       	ldd	r19, Y+5	; 0x05
     816:	82 17       	cp	r24, r18
     818:	93 07       	cpc	r25, r19
     81a:	50 f1       	brcs	.+84     	; 0x870 <prvCopyDataToQueue+0xa6>
     81c:	88 81       	ld	r24, Y
     81e:	99 81       	ldd	r25, Y+1	; 0x01
     820:	9b 83       	std	Y+3, r25	; 0x03
     822:	8a 83       	std	Y+2, r24	; 0x02
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	29 c0       	rjmp	.+82     	; 0x87a <prvCopyDataToQueue+0xb0>
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	8e 81       	ldd	r24, Y+6	; 0x06
     82c:	9f 81       	ldd	r25, Y+7	; 0x07
     82e:	0e 94 b1 1b 	call	0x3762	; 0x3762 <memcpy>
     832:	88 a1       	ldd	r24, Y+32	; 0x20
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	91 95       	neg	r25
     838:	81 95       	neg	r24
     83a:	91 09       	sbc	r25, r1
     83c:	2e 81       	ldd	r18, Y+6	; 0x06
     83e:	3f 81       	ldd	r19, Y+7	; 0x07
     840:	28 0f       	add	r18, r24
     842:	39 1f       	adc	r19, r25
     844:	3f 83       	std	Y+7, r19	; 0x07
     846:	2e 83       	std	Y+6, r18	; 0x06
     848:	48 81       	ld	r20, Y
     84a:	59 81       	ldd	r21, Y+1	; 0x01
     84c:	24 17       	cp	r18, r20
     84e:	35 07       	cpc	r19, r21
     850:	30 f4       	brcc	.+12     	; 0x85e <prvCopyDataToQueue+0x94>
     852:	2c 81       	ldd	r18, Y+4	; 0x04
     854:	3d 81       	ldd	r19, Y+5	; 0x05
     856:	82 0f       	add	r24, r18
     858:	93 1f       	adc	r25, r19
     85a:	9f 83       	std	Y+7, r25	; 0x07
     85c:	8e 83       	std	Y+6, r24	; 0x06
     85e:	02 30       	cpi	r16, 0x02	; 2
     860:	49 f4       	brne	.+18     	; 0x874 <prvCopyDataToQueue+0xaa>
     862:	11 23       	and	r17, r17
     864:	49 f0       	breq	.+18     	; 0x878 <prvCopyDataToQueue+0xae>
     866:	11 50       	subi	r17, 0x01	; 1
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	07 c0       	rjmp	.+14     	; 0x87a <prvCopyDataToQueue+0xb0>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	05 c0       	rjmp	.+10     	; 0x87a <prvCopyDataToQueue+0xb0>
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	03 c0       	rjmp	.+6      	; 0x87a <prvCopyDataToQueue+0xb0>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	01 c0       	rjmp	.+2      	; 0x87a <prvCopyDataToQueue+0xb0>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	1f 5f       	subi	r17, 0xFF	; 255
     87c:	1e 8f       	std	Y+30, r17	; 0x1e
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <prvCopyDataFromQueue>:
     888:	fc 01       	movw	r30, r24
     88a:	40 a1       	ldd	r20, Z+32	; 0x20
     88c:	44 23       	and	r20, r20
     88e:	a9 f0       	breq	.+42     	; 0x8ba <prvCopyDataFromQueue+0x32>
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	26 81       	ldd	r18, Z+6	; 0x06
     894:	37 81       	ldd	r19, Z+7	; 0x07
     896:	24 0f       	add	r18, r20
     898:	35 1f       	adc	r19, r21
     89a:	37 83       	std	Z+7, r19	; 0x07
     89c:	26 83       	std	Z+6, r18	; 0x06
     89e:	84 81       	ldd	r24, Z+4	; 0x04
     8a0:	95 81       	ldd	r25, Z+5	; 0x05
     8a2:	28 17       	cp	r18, r24
     8a4:	39 07       	cpc	r19, r25
     8a6:	20 f0       	brcs	.+8      	; 0x8b0 <prvCopyDataFromQueue+0x28>
     8a8:	80 81       	ld	r24, Z
     8aa:	91 81       	ldd	r25, Z+1	; 0x01
     8ac:	97 83       	std	Z+7, r25	; 0x07
     8ae:	86 83       	std	Z+6, r24	; 0x06
     8b0:	cb 01       	movw	r24, r22
     8b2:	66 81       	ldd	r22, Z+6	; 0x06
     8b4:	77 81       	ldd	r23, Z+7	; 0x07
     8b6:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <memcpy>
     8ba:	08 95       	ret

000008bc <prvUnlockQueue>:
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	ec 01       	movw	r28, r24
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	0f 92       	push	r0
     8ca:	1a a1       	ldd	r17, Y+34	; 0x22
     8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <prvUnlockQueue+0x28>
     8ce:	8b 89       	ldd	r24, Y+19	; 0x13
     8d0:	88 23       	and	r24, r24
     8d2:	51 f0       	breq	.+20     	; 0x8e8 <prvUnlockQueue+0x2c>
     8d4:	ce 01       	movw	r24, r28
     8d6:	43 96       	adiw	r24, 0x13	; 19
     8d8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <xTaskRemoveFromEventList>
     8dc:	81 11       	cpse	r24, r1
     8de:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <vTaskMissedYield>
     8e2:	11 50       	subi	r17, 0x01	; 1
     8e4:	11 16       	cp	r1, r17
     8e6:	9c f3       	brlt	.-26     	; 0x8ce <prvUnlockQueue+0x12>
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	8a a3       	std	Y+34, r24	; 0x22
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	0f 92       	push	r0
     8f6:	19 a1       	ldd	r17, Y+33	; 0x21
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <prvUnlockQueue+0x54>
     8fa:	88 85       	ldd	r24, Y+8	; 0x08
     8fc:	88 23       	and	r24, r24
     8fe:	51 f0       	breq	.+20     	; 0x914 <prvUnlockQueue+0x58>
     900:	ce 01       	movw	r24, r28
     902:	08 96       	adiw	r24, 0x08	; 8
     904:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <xTaskRemoveFromEventList>
     908:	81 11       	cpse	r24, r1
     90a:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <vTaskMissedYield>
     90e:	11 50       	subi	r17, 0x01	; 1
     910:	11 16       	cp	r1, r17
     912:	9c f3       	brlt	.-26     	; 0x8fa <prvUnlockQueue+0x3e>
     914:	8f ef       	ldi	r24, 0xFF	; 255
     916:	89 a3       	std	Y+33, r24	; 0x21
     918:	0f 90       	pop	r0
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <xQueueGenericReset>:
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	ec 01       	movw	r28, r24
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	0f 92       	push	r0
     930:	e8 81       	ld	r30, Y
     932:	f9 81       	ldd	r31, Y+1	; 0x01
     934:	8f 8d       	ldd	r24, Y+31	; 0x1f
     936:	28 a1       	ldd	r18, Y+32	; 0x20
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	82 9f       	mul	r24, r18
     93e:	a0 01       	movw	r20, r0
     940:	83 9f       	mul	r24, r19
     942:	50 0d       	add	r21, r0
     944:	92 9f       	mul	r25, r18
     946:	50 0d       	add	r21, r0
     948:	11 24       	eor	r1, r1
     94a:	4e 0f       	add	r20, r30
     94c:	5f 1f       	adc	r21, r31
     94e:	5d 83       	std	Y+5, r21	; 0x05
     950:	4c 83       	std	Y+4, r20	; 0x04
     952:	1e 8e       	std	Y+30, r1	; 0x1e
     954:	fb 83       	std	Y+3, r31	; 0x03
     956:	ea 83       	std	Y+2, r30	; 0x02
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	28 9f       	mul	r18, r24
     95c:	a0 01       	movw	r20, r0
     95e:	29 9f       	mul	r18, r25
     960:	50 0d       	add	r21, r0
     962:	38 9f       	mul	r19, r24
     964:	50 0d       	add	r21, r0
     966:	11 24       	eor	r1, r1
     968:	cf 01       	movw	r24, r30
     96a:	84 0f       	add	r24, r20
     96c:	95 1f       	adc	r25, r21
     96e:	9f 83       	std	Y+7, r25	; 0x07
     970:	8e 83       	std	Y+6, r24	; 0x06
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	89 a3       	std	Y+33, r24	; 0x21
     976:	8a a3       	std	Y+34, r24	; 0x22
     978:	61 11       	cpse	r22, r1
     97a:	0b c0       	rjmp	.+22     	; 0x992 <xQueueGenericReset+0x6e>
     97c:	88 85       	ldd	r24, Y+8	; 0x08
     97e:	88 23       	and	r24, r24
     980:	71 f0       	breq	.+28     	; 0x99e <xQueueGenericReset+0x7a>
     982:	ce 01       	movw	r24, r28
     984:	08 96       	adiw	r24, 0x08	; 8
     986:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <xTaskRemoveFromEventList>
     98a:	88 23       	and	r24, r24
     98c:	41 f0       	breq	.+16     	; 0x99e <xQueueGenericReset+0x7a>
     98e:	2b de       	rcall	.-938    	; 0x5e6 <vPortYield>
     990:	06 c0       	rjmp	.+12     	; 0x99e <xQueueGenericReset+0x7a>
     992:	ce 01       	movw	r24, r28
     994:	08 96       	adiw	r24, 0x08	; 8
     996:	59 dd       	rcall	.-1358   	; 0x44a <vListInitialise>
     998:	ce 01       	movw	r24, r28
     99a:	43 96       	adiw	r24, 0x13	; 19
     99c:	56 dd       	rcall	.-1364   	; 0x44a <vListInitialise>
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <prvInitialiseNewQueue>:
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	f8 01       	movw	r30, r16
     9b0:	61 11       	cpse	r22, r1
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <prvInitialiseNewQueue+0x10>
     9b4:	11 83       	std	Z+1, r17	; 0x01
     9b6:	00 83       	st	Z, r16
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <prvInitialiseNewQueue+0x14>
     9ba:	51 83       	std	Z+1, r21	; 0x01
     9bc:	40 83       	st	Z, r20
     9be:	87 8f       	std	Z+31, r24	; 0x1f
     9c0:	60 a3       	std	Z+32, r22	; 0x20
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	cf 01       	movw	r24, r30
     9c6:	ae df       	rcall	.-164    	; 0x924 <xQueueGenericReset>
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	08 95       	ret

000009ce <xQueueGenericCreate>:
     9ce:	df 92       	push	r13
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	f8 2e       	mov	r15, r24
     9de:	e6 2e       	mov	r14, r22
     9e0:	d4 2e       	mov	r13, r20
     9e2:	86 9f       	mul	r24, r22
     9e4:	c0 01       	movw	r24, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	83 96       	adiw	r24, 0x23	; 35
     9ea:	4a dc       	rcall	.-1900   	; 0x280 <pvPortMalloc>
     9ec:	ec 01       	movw	r28, r24
     9ee:	00 97       	sbiw	r24, 0x00	; 0
     9f0:	41 f0       	breq	.+16     	; 0xa02 <xQueueGenericCreate+0x34>
     9f2:	8c 01       	movw	r16, r24
     9f4:	2d 2d       	mov	r18, r13
     9f6:	ac 01       	movw	r20, r24
     9f8:	4d 5d       	subi	r20, 0xDD	; 221
     9fa:	5f 4f       	sbci	r21, 0xFF	; 255
     9fc:	6e 2d       	mov	r22, r14
     9fe:	8f 2d       	mov	r24, r15
     a00:	d4 df       	rcall	.-88     	; 0x9aa <prvInitialiseNewQueue>
     a02:	ce 01       	movw	r24, r28
     a04:	df 91       	pop	r29
     a06:	cf 91       	pop	r28
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	08 95       	ret

00000a14 <xQueueGenericSend>:
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	29 97       	sbiw	r28, 0x09	; 9
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	7c 01       	movw	r14, r24
     a36:	6b 01       	movw	r12, r22
     a38:	2e 83       	std	Y+6, r18	; 0x06
     a3a:	3f 83       	std	Y+7, r19	; 0x07
     a3c:	48 87       	std	Y+8, r20	; 0x08
     a3e:	59 87       	std	Y+9, r21	; 0x09
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	0f 92       	push	r0
     a48:	f7 01       	movw	r30, r14
     a4a:	96 8d       	ldd	r25, Z+30	; 0x1e
     a4c:	87 8d       	ldd	r24, Z+31	; 0x1f
     a4e:	98 17       	cp	r25, r24
     a50:	10 f0       	brcs	.+4      	; 0xa56 <xQueueGenericSend+0x42>
     a52:	02 30       	cpi	r16, 0x02	; 2
     a54:	b1 f4       	brne	.+44     	; 0xa82 <xQueueGenericSend+0x6e>
     a56:	40 2f       	mov	r20, r16
     a58:	b6 01       	movw	r22, r12
     a5a:	c7 01       	movw	r24, r14
     a5c:	b6 de       	rcall	.-660    	; 0x7ca <prvCopyDataToQueue>
     a5e:	f7 01       	movw	r30, r14
     a60:	93 89       	ldd	r25, Z+19	; 0x13
     a62:	99 23       	and	r25, r25
     a64:	41 f0       	breq	.+16     	; 0xa76 <xQueueGenericSend+0x62>
     a66:	c7 01       	movw	r24, r14
     a68:	43 96       	adiw	r24, 0x13	; 19
     a6a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <xTaskRemoveFromEventList>
     a6e:	88 23       	and	r24, r24
     a70:	21 f0       	breq	.+8      	; 0xa7a <xQueueGenericSend+0x66>
     a72:	b9 dd       	rcall	.-1166   	; 0x5e6 <vPortYield>
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <xQueueGenericSend+0x66>
     a76:	81 11       	cpse	r24, r1
     a78:	b6 dd       	rcall	.-1172   	; 0x5e6 <vPortYield>
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	48 c0       	rjmp	.+144    	; 0xb12 <xQueueGenericSend+0xfe>
     a82:	8e 81       	ldd	r24, Y+6	; 0x06
     a84:	9f 81       	ldd	r25, Y+7	; 0x07
     a86:	a8 85       	ldd	r26, Y+8	; 0x08
     a88:	b9 85       	ldd	r27, Y+9	; 0x09
     a8a:	89 2b       	or	r24, r25
     a8c:	8a 2b       	or	r24, r26
     a8e:	8b 2b       	or	r24, r27
     a90:	21 f4       	brne	.+8      	; 0xa9a <xQueueGenericSend+0x86>
     a92:	0f 90       	pop	r0
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	3c c0       	rjmp	.+120    	; 0xb12 <xQueueGenericSend+0xfe>
     a9a:	11 11       	cpse	r17, r1
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <xQueueGenericSend+0x94>
     a9e:	ce 01       	movw	r24, r28
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <vTaskInternalSetTimeOutState>
     aa6:	11 e0       	ldi	r17, 0x01	; 1
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	7d d4       	rcall	.+2298   	; 0x13a8 <vTaskSuspendAll>
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	0f 92       	push	r0
     ab4:	f7 01       	movw	r30, r14
     ab6:	81 a1       	ldd	r24, Z+33	; 0x21
     ab8:	8f 3f       	cpi	r24, 0xFF	; 255
     aba:	09 f4       	brne	.+2      	; 0xabe <xQueueGenericSend+0xaa>
     abc:	11 a2       	std	Z+33, r1	; 0x21
     abe:	f7 01       	movw	r30, r14
     ac0:	82 a1       	ldd	r24, Z+34	; 0x22
     ac2:	8f 3f       	cpi	r24, 0xFF	; 255
     ac4:	09 f4       	brne	.+2      	; 0xac8 <xQueueGenericSend+0xb4>
     ac6:	12 a2       	std	Z+34, r1	; 0x22
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	be 01       	movw	r22, r28
     ace:	6a 5f       	subi	r22, 0xFA	; 250
     ad0:	7f 4f       	sbci	r23, 0xFF	; 255
     ad2:	ce 01       	movw	r24, r28
     ad4:	01 96       	adiw	r24, 0x01	; 1
     ad6:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <xTaskCheckForTimeOut>
     ada:	81 11       	cpse	r24, r1
     adc:	16 c0       	rjmp	.+44     	; 0xb0a <xQueueGenericSend+0xf6>
     ade:	c7 01       	movw	r24, r14
     ae0:	66 de       	rcall	.-820    	; 0x7ae <prvIsQueueFull>
     ae2:	88 23       	and	r24, r24
     ae4:	71 f0       	breq	.+28     	; 0xb02 <xQueueGenericSend+0xee>
     ae6:	4e 81       	ldd	r20, Y+6	; 0x06
     ae8:	5f 81       	ldd	r21, Y+7	; 0x07
     aea:	68 85       	ldd	r22, Y+8	; 0x08
     aec:	79 85       	ldd	r23, Y+9	; 0x09
     aee:	c7 01       	movw	r24, r14
     af0:	08 96       	adiw	r24, 0x08	; 8
     af2:	77 d7       	rcall	.+3822   	; 0x19e2 <vTaskPlaceOnEventList>
     af4:	c7 01       	movw	r24, r14
     af6:	e2 de       	rcall	.-572    	; 0x8bc <prvUnlockQueue>
     af8:	97 d5       	rcall	.+2862   	; 0x1628 <xTaskResumeAll>
     afa:	81 11       	cpse	r24, r1
     afc:	a2 cf       	rjmp	.-188    	; 0xa42 <xQueueGenericSend+0x2e>
     afe:	73 dd       	rcall	.-1306   	; 0x5e6 <vPortYield>
     b00:	a0 cf       	rjmp	.-192    	; 0xa42 <xQueueGenericSend+0x2e>
     b02:	c7 01       	movw	r24, r14
     b04:	db de       	rcall	.-586    	; 0x8bc <prvUnlockQueue>
     b06:	90 d5       	rcall	.+2848   	; 0x1628 <xTaskResumeAll>
     b08:	9c cf       	rjmp	.-200    	; 0xa42 <xQueueGenericSend+0x2e>
     b0a:	c7 01       	movw	r24, r14
     b0c:	d7 de       	rcall	.-594    	; 0x8bc <prvUnlockQueue>
     b0e:	8c d5       	rcall	.+2840   	; 0x1628 <xTaskResumeAll>
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	29 96       	adiw	r28, 0x09	; 9
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	08 95       	ret

00000b30 <prvInitialiseMutex>:
     b30:	0f 93       	push	r16
     b32:	00 97       	sbiw	r24, 0x00	; 0
     b34:	69 f0       	breq	.+26     	; 0xb50 <prvInitialiseMutex+0x20>
     b36:	fc 01       	movw	r30, r24
     b38:	15 82       	std	Z+5, r1	; 0x05
     b3a:	14 82       	std	Z+4, r1	; 0x04
     b3c:	11 82       	std	Z+1, r1	; 0x01
     b3e:	10 82       	st	Z, r1
     b40:	16 82       	std	Z+6, r1	; 0x06
     b42:	00 e0       	ldi	r16, 0x00	; 0
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	a9 01       	movw	r20, r18
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	62 df       	rcall	.-316    	; 0xa14 <xQueueGenericSend>
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <xQueueCreateMutex>:
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	48 2f       	mov	r20, r24
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	37 df       	rcall	.-402    	; 0x9ce <xQueueGenericCreate>
     b60:	ec 01       	movw	r28, r24
     b62:	e6 df       	rcall	.-52     	; 0xb30 <prvInitialiseMutex>
     b64:	ce 01       	movw	r24, r28
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <xQueueGenericSendFromISR>:
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	8a 01       	movw	r16, r20
     b7a:	fc 01       	movw	r30, r24
     b7c:	56 8d       	ldd	r21, Z+30	; 0x1e
     b7e:	37 8d       	ldd	r19, Z+31	; 0x1f
     b80:	53 17       	cp	r21, r19
     b82:	10 f0       	brcs	.+4      	; 0xb88 <xQueueGenericSendFromISR+0x1c>
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	f1 f4       	brne	.+60     	; 0xbc4 <xQueueGenericSendFromISR+0x58>
     b88:	42 2f       	mov	r20, r18
     b8a:	78 01       	movw	r14, r16
     b8c:	ec 01       	movw	r28, r24
     b8e:	1a a1       	ldd	r17, Y+34	; 0x22
     b90:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b92:	ce 01       	movw	r24, r28
     b94:	1a de       	rcall	.-972    	; 0x7ca <prvCopyDataToQueue>
     b96:	1f 3f       	cpi	r17, 0xFF	; 255
     b98:	79 f4       	brne	.+30     	; 0xbb8 <xQueueGenericSendFromISR+0x4c>
     b9a:	8b 89       	ldd	r24, Y+19	; 0x13
     b9c:	88 23       	and	r24, r24
     b9e:	a1 f0       	breq	.+40     	; 0xbc8 <xQueueGenericSendFromISR+0x5c>
     ba0:	ce 01       	movw	r24, r28
     ba2:	43 96       	adiw	r24, 0x13	; 19
     ba4:	77 d7       	rcall	.+3822   	; 0x1a94 <xTaskRemoveFromEventList>
     ba6:	88 23       	and	r24, r24
     ba8:	89 f0       	breq	.+34     	; 0xbcc <xQueueGenericSendFromISR+0x60>
     baa:	e1 14       	cp	r14, r1
     bac:	f1 04       	cpc	r15, r1
     bae:	81 f0       	breq	.+32     	; 0xbd0 <xQueueGenericSendFromISR+0x64>
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	f7 01       	movw	r30, r14
     bb4:	80 83       	st	Z, r24
     bb6:	0d c0       	rjmp	.+26     	; 0xbd2 <xQueueGenericSendFromISR+0x66>
     bb8:	ff 24       	eor	r15, r15
     bba:	f3 94       	inc	r15
     bbc:	f1 0e       	add	r15, r17
     bbe:	fa a2       	std	Y+34, r15	; 0x22
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <xQueueGenericSendFromISR+0x66>
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <xQueueGenericSendFromISR+0x66>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	03 c0       	rjmp	.+6      	; 0xbd2 <xQueueGenericSendFromISR+0x66>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <xQueueGenericSendFromISR+0x66>
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	08 95       	ret

00000be0 <xQueueReceive>:
     be0:	cf 92       	push	r12
     be2:	df 92       	push	r13
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	29 97       	sbiw	r28, 0x09	; 9
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	8c 01       	movw	r16, r24
     c02:	6b 01       	movw	r12, r22
     c04:	2e 83       	std	Y+6, r18	; 0x06
     c06:	3f 83       	std	Y+7, r19	; 0x07
     c08:	48 87       	std	Y+8, r20	; 0x08
     c0a:	59 87       	std	Y+9, r21	; 0x09
     c0c:	e1 2c       	mov	r14, r1
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	0f 92       	push	r0
     c14:	f8 01       	movw	r30, r16
     c16:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c18:	ff 20       	and	r15, r15
     c1a:	91 f0       	breq	.+36     	; 0xc40 <xQueueReceive+0x60>
     c1c:	b6 01       	movw	r22, r12
     c1e:	c8 01       	movw	r24, r16
     c20:	33 de       	rcall	.-922    	; 0x888 <prvCopyDataFromQueue>
     c22:	fa 94       	dec	r15
     c24:	f8 01       	movw	r30, r16
     c26:	f6 8e       	std	Z+30, r15	; 0x1e
     c28:	80 85       	ldd	r24, Z+8	; 0x08
     c2a:	88 23       	and	r24, r24
     c2c:	29 f0       	breq	.+10     	; 0xc38 <xQueueReceive+0x58>
     c2e:	c8 01       	movw	r24, r16
     c30:	08 96       	adiw	r24, 0x08	; 8
     c32:	30 d7       	rcall	.+3680   	; 0x1a94 <xTaskRemoveFromEventList>
     c34:	81 11       	cpse	r24, r1
     c36:	d7 dc       	rcall	.-1618   	; 0x5e6 <vPortYield>
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	4c c0       	rjmp	.+152    	; 0xcd8 <xQueueReceive+0xf8>
     c40:	8e 81       	ldd	r24, Y+6	; 0x06
     c42:	9f 81       	ldd	r25, Y+7	; 0x07
     c44:	a8 85       	ldd	r26, Y+8	; 0x08
     c46:	b9 85       	ldd	r27, Y+9	; 0x09
     c48:	89 2b       	or	r24, r25
     c4a:	8a 2b       	or	r24, r26
     c4c:	8b 2b       	or	r24, r27
     c4e:	21 f4       	brne	.+8      	; 0xc58 <xQueueReceive+0x78>
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	40 c0       	rjmp	.+128    	; 0xcd8 <xQueueReceive+0xf8>
     c58:	e1 10       	cpse	r14, r1
     c5a:	05 c0       	rjmp	.+10     	; 0xc66 <xQueueReceive+0x86>
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	c8 d7       	rcall	.+3984   	; 0x1bf2 <vTaskInternalSetTimeOutState>
     c62:	ee 24       	eor	r14, r14
     c64:	e3 94       	inc	r14
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	9e d3       	rcall	.+1852   	; 0x13a8 <vTaskSuspendAll>
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	0f 92       	push	r0
     c72:	f8 01       	movw	r30, r16
     c74:	81 a1       	ldd	r24, Z+33	; 0x21
     c76:	8f 3f       	cpi	r24, 0xFF	; 255
     c78:	09 f4       	brne	.+2      	; 0xc7c <xQueueReceive+0x9c>
     c7a:	11 a2       	std	Z+33, r1	; 0x21
     c7c:	f8 01       	movw	r30, r16
     c7e:	82 a1       	ldd	r24, Z+34	; 0x22
     c80:	8f 3f       	cpi	r24, 0xFF	; 255
     c82:	09 f4       	brne	.+2      	; 0xc86 <xQueueReceive+0xa6>
     c84:	12 a2       	std	Z+34, r1	; 0x22
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	be 01       	movw	r22, r28
     c8c:	6a 5f       	subi	r22, 0xFA	; 250
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	ce 01       	movw	r24, r28
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	bf d7       	rcall	.+3966   	; 0x1c14 <xTaskCheckForTimeOut>
     c96:	81 11       	cpse	r24, r1
     c98:	16 c0       	rjmp	.+44     	; 0xcc6 <xQueueReceive+0xe6>
     c9a:	c8 01       	movw	r24, r16
     c9c:	7b dd       	rcall	.-1290   	; 0x794 <prvIsQueueEmpty>
     c9e:	88 23       	and	r24, r24
     ca0:	71 f0       	breq	.+28     	; 0xcbe <xQueueReceive+0xde>
     ca2:	4e 81       	ldd	r20, Y+6	; 0x06
     ca4:	5f 81       	ldd	r21, Y+7	; 0x07
     ca6:	68 85       	ldd	r22, Y+8	; 0x08
     ca8:	79 85       	ldd	r23, Y+9	; 0x09
     caa:	c8 01       	movw	r24, r16
     cac:	43 96       	adiw	r24, 0x13	; 19
     cae:	99 d6       	rcall	.+3378   	; 0x19e2 <vTaskPlaceOnEventList>
     cb0:	c8 01       	movw	r24, r16
     cb2:	04 de       	rcall	.-1016   	; 0x8bc <prvUnlockQueue>
     cb4:	b9 d4       	rcall	.+2418   	; 0x1628 <xTaskResumeAll>
     cb6:	81 11       	cpse	r24, r1
     cb8:	aa cf       	rjmp	.-172    	; 0xc0e <xQueueReceive+0x2e>
     cba:	95 dc       	rcall	.-1750   	; 0x5e6 <vPortYield>
     cbc:	a8 cf       	rjmp	.-176    	; 0xc0e <xQueueReceive+0x2e>
     cbe:	c8 01       	movw	r24, r16
     cc0:	fd dd       	rcall	.-1030   	; 0x8bc <prvUnlockQueue>
     cc2:	b2 d4       	rcall	.+2404   	; 0x1628 <xTaskResumeAll>
     cc4:	a4 cf       	rjmp	.-184    	; 0xc0e <xQueueReceive+0x2e>
     cc6:	c8 01       	movw	r24, r16
     cc8:	f9 dd       	rcall	.-1038   	; 0x8bc <prvUnlockQueue>
     cca:	ae d4       	rcall	.+2396   	; 0x1628 <xTaskResumeAll>
     ccc:	c8 01       	movw	r24, r16
     cce:	62 dd       	rcall	.-1340   	; 0x794 <prvIsQueueEmpty>
     cd0:	88 23       	and	r24, r24
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <xQueueReceive+0xf6>
     cd4:	9c cf       	rjmp	.-200    	; 0xc0e <xQueueReceive+0x2e>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	29 96       	adiw	r28, 0x09	; 9
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	ff 90       	pop	r15
     cee:	ef 90       	pop	r14
     cf0:	df 90       	pop	r13
     cf2:	cf 90       	pop	r12
     cf4:	08 95       	ret

00000cf6 <xQueueSemaphoreTake>:
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	29 97       	sbiw	r28, 0x09	; 9
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
     d12:	8c 01       	movw	r16, r24
     d14:	4e 83       	std	Y+6, r20	; 0x06
     d16:	5f 83       	std	Y+7, r21	; 0x07
     d18:	68 87       	std	Y+8, r22	; 0x08
     d1a:	79 87       	std	Y+9, r23	; 0x09
     d1c:	e1 2c       	mov	r14, r1
     d1e:	f1 2c       	mov	r15, r1
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	0f 92       	push	r0
     d26:	f8 01       	movw	r30, r16
     d28:	86 8d       	ldd	r24, Z+30	; 0x1e
     d2a:	88 23       	and	r24, r24
     d2c:	c1 f0       	breq	.+48     	; 0xd5e <xQueueSemaphoreTake+0x68>
     d2e:	81 50       	subi	r24, 0x01	; 1
     d30:	86 8f       	std	Z+30, r24	; 0x1e
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	89 2b       	or	r24, r25
     d38:	29 f4       	brne	.+10     	; 0xd44 <xQueueSemaphoreTake+0x4e>
     d3a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <pvTaskIncrementMutexHeldCount>
     d3e:	f8 01       	movw	r30, r16
     d40:	95 83       	std	Z+5, r25	; 0x05
     d42:	84 83       	std	Z+4, r24	; 0x04
     d44:	f8 01       	movw	r30, r16
     d46:	80 85       	ldd	r24, Z+8	; 0x08
     d48:	88 23       	and	r24, r24
     d4a:	29 f0       	breq	.+10     	; 0xd56 <xQueueSemaphoreTake+0x60>
     d4c:	c8 01       	movw	r24, r16
     d4e:	08 96       	adiw	r24, 0x08	; 8
     d50:	a1 d6       	rcall	.+3394   	; 0x1a94 <xTaskRemoveFromEventList>
     d52:	81 11       	cpse	r24, r1
     d54:	48 dc       	rcall	.-1904   	; 0x5e6 <vPortYield>
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	6b c0       	rjmp	.+214    	; 0xe34 <xQueueSemaphoreTake+0x13e>
     d5e:	8e 81       	ldd	r24, Y+6	; 0x06
     d60:	9f 81       	ldd	r25, Y+7	; 0x07
     d62:	a8 85       	ldd	r26, Y+8	; 0x08
     d64:	b9 85       	ldd	r27, Y+9	; 0x09
     d66:	89 2b       	or	r24, r25
     d68:	8a 2b       	or	r24, r26
     d6a:	8b 2b       	or	r24, r27
     d6c:	21 f4       	brne	.+8      	; 0xd76 <xQueueSemaphoreTake+0x80>
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <xQueueSemaphoreTake+0x13e>
     d76:	f1 10       	cpse	r15, r1
     d78:	05 c0       	rjmp	.+10     	; 0xd84 <xQueueSemaphoreTake+0x8e>
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	39 d7       	rcall	.+3698   	; 0x1bf2 <vTaskInternalSetTimeOutState>
     d80:	ff 24       	eor	r15, r15
     d82:	f3 94       	inc	r15
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f d3       	rcall	.+1566   	; 0x13a8 <vTaskSuspendAll>
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	0f 92       	push	r0
     d90:	f8 01       	movw	r30, r16
     d92:	81 a1       	ldd	r24, Z+33	; 0x21
     d94:	8f 3f       	cpi	r24, 0xFF	; 255
     d96:	09 f4       	brne	.+2      	; 0xd9a <xQueueSemaphoreTake+0xa4>
     d98:	11 a2       	std	Z+33, r1	; 0x21
     d9a:	f8 01       	movw	r30, r16
     d9c:	82 a1       	ldd	r24, Z+34	; 0x22
     d9e:	8f 3f       	cpi	r24, 0xFF	; 255
     da0:	09 f4       	brne	.+2      	; 0xda4 <xQueueSemaphoreTake+0xae>
     da2:	12 a2       	std	Z+34, r1	; 0x22
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	be 01       	movw	r22, r28
     daa:	6a 5f       	subi	r22, 0xFA	; 250
     dac:	7f 4f       	sbci	r23, 0xFF	; 255
     dae:	ce 01       	movw	r24, r28
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	30 d7       	rcall	.+3680   	; 0x1c14 <xTaskCheckForTimeOut>
     db4:	81 11       	cpse	r24, r1
     db6:	24 c0       	rjmp	.+72     	; 0xe00 <xQueueSemaphoreTake+0x10a>
     db8:	c8 01       	movw	r24, r16
     dba:	ec dc       	rcall	.-1576   	; 0x794 <prvIsQueueEmpty>
     dbc:	88 23       	and	r24, r24
     dbe:	e1 f0       	breq	.+56     	; 0xdf8 <xQueueSemaphoreTake+0x102>
     dc0:	f8 01       	movw	r30, r16
     dc2:	80 81       	ld	r24, Z
     dc4:	91 81       	ldd	r25, Z+1	; 0x01
     dc6:	89 2b       	or	r24, r25
     dc8:	49 f4       	brne	.+18     	; 0xddc <xQueueSemaphoreTake+0xe6>
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	0f 92       	push	r0
     dd0:	84 81       	ldd	r24, Z+4	; 0x04
     dd2:	95 81       	ldd	r25, Z+5	; 0x05
     dd4:	97 d7       	rcall	.+3886   	; 0x1d04 <xTaskPriorityInherit>
     dd6:	e8 2e       	mov	r14, r24
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	4e 81       	ldd	r20, Y+6	; 0x06
     dde:	5f 81       	ldd	r21, Y+7	; 0x07
     de0:	68 85       	ldd	r22, Y+8	; 0x08
     de2:	79 85       	ldd	r23, Y+9	; 0x09
     de4:	c8 01       	movw	r24, r16
     de6:	43 96       	adiw	r24, 0x13	; 19
     de8:	fc d5       	rcall	.+3064   	; 0x19e2 <vTaskPlaceOnEventList>
     dea:	c8 01       	movw	r24, r16
     dec:	67 dd       	rcall	.-1330   	; 0x8bc <prvUnlockQueue>
     dee:	1c d4       	rcall	.+2104   	; 0x1628 <xTaskResumeAll>
     df0:	81 11       	cpse	r24, r1
     df2:	96 cf       	rjmp	.-212    	; 0xd20 <xQueueSemaphoreTake+0x2a>
     df4:	f8 db       	rcall	.-2064   	; 0x5e6 <vPortYield>
     df6:	94 cf       	rjmp	.-216    	; 0xd20 <xQueueSemaphoreTake+0x2a>
     df8:	c8 01       	movw	r24, r16
     dfa:	60 dd       	rcall	.-1344   	; 0x8bc <prvUnlockQueue>
     dfc:	15 d4       	rcall	.+2090   	; 0x1628 <xTaskResumeAll>
     dfe:	90 cf       	rjmp	.-224    	; 0xd20 <xQueueSemaphoreTake+0x2a>
     e00:	c8 01       	movw	r24, r16
     e02:	5c dd       	rcall	.-1352   	; 0x8bc <prvUnlockQueue>
     e04:	11 d4       	rcall	.+2082   	; 0x1628 <xTaskResumeAll>
     e06:	c8 01       	movw	r24, r16
     e08:	c5 dc       	rcall	.-1654   	; 0x794 <prvIsQueueEmpty>
     e0a:	88 23       	and	r24, r24
     e0c:	09 f4       	brne	.+2      	; 0xe10 <xQueueSemaphoreTake+0x11a>
     e0e:	88 cf       	rjmp	.-240    	; 0xd20 <xQueueSemaphoreTake+0x2a>
     e10:	ee 20       	and	r14, r14
     e12:	79 f0       	breq	.+30     	; 0xe32 <xQueueSemaphoreTake+0x13c>
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	f8 94       	cli
     e18:	0f 92       	push	r0
     e1a:	c8 01       	movw	r24, r16
     e1c:	ab dc       	rcall	.-1706   	; 0x774 <prvGetDisinheritPriorityAfterTimeout>
     e1e:	68 2f       	mov	r22, r24
     e20:	f8 01       	movw	r30, r16
     e22:	84 81       	ldd	r24, Z+4	; 0x04
     e24:	95 81       	ldd	r25, Z+5	; 0x05
     e26:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <vTaskPriorityDisinheritAfterTimeout>
     e2a:	0f 90       	pop	r0
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <xQueueSemaphoreTake+0x13e>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	29 96       	adiw	r28, 0x09	; 9
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	08 95       	ret

00000e4e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	0f 92       	push	r0
     e5a:	89 a1       	ldd	r24, Y+33	; 0x21
     e5c:	8f 3f       	cpi	r24, 0xFF	; 255
     e5e:	09 f4       	brne	.+2      	; 0xe62 <vQueueWaitForMessageRestricted+0x14>
     e60:	19 a2       	std	Y+33, r1	; 0x21
     e62:	8a a1       	ldd	r24, Y+34	; 0x22
     e64:	8f 3f       	cpi	r24, 0xFF	; 255
     e66:	09 f4       	brne	.+2      	; 0xe6a <vQueueWaitForMessageRestricted+0x1c>
     e68:	1a a2       	std	Y+34, r1	; 0x22
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     e6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e70:	81 11       	cpse	r24, r1
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     e74:	ce 01       	movw	r24, r28
     e76:	43 96       	adiw	r24, 0x13	; 19
     e78:	cb d5       	rcall	.+2966   	; 0x1a10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     e7a:	ce 01       	movw	r24, r28
     e7c:	1f dd       	rcall	.-1474   	; 0x8bc <prvUnlockQueue>
    }
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <prvResetNextTaskUnblockTime>:
     e84:	e0 91 4f 0c 	lds	r30, 0x0C4F	; 0x800c4f <pxDelayedTaskList>
     e88:	f0 91 50 0c 	lds	r31, 0x0C50	; 0x800c50 <pxDelayedTaskList+0x1>
     e8c:	80 81       	ld	r24, Z
     e8e:	81 11       	cpse	r24, r1
     e90:	0c c0       	rjmp	.+24     	; 0xeaa <prvResetNextTaskUnblockTime+0x26>
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	9f ef       	ldi	r25, 0xFF	; 255
     e96:	dc 01       	movw	r26, r24
     e98:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <xNextTaskUnblockTime>
     e9c:	90 93 1a 0c 	sts	0x0C1A, r25	; 0x800c1a <xNextTaskUnblockTime+0x1>
     ea0:	a0 93 1b 0c 	sts	0x0C1B, r26	; 0x800c1b <xNextTaskUnblockTime+0x2>
     ea4:	b0 93 1c 0c 	sts	0x0C1C, r27	; 0x800c1c <xNextTaskUnblockTime+0x3>
     ea8:	08 95       	ret
     eaa:	e0 91 4f 0c 	lds	r30, 0x0C4F	; 0x800c4f <pxDelayedTaskList>
     eae:	f0 91 50 0c 	lds	r31, 0x0C50	; 0x800c50 <pxDelayedTaskList+0x1>
     eb2:	07 80       	ldd	r0, Z+7	; 0x07
     eb4:	f0 85       	ldd	r31, Z+8	; 0x08
     eb6:	e0 2d       	mov	r30, r0
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	a2 81       	ldd	r26, Z+2	; 0x02
     ebe:	b3 81       	ldd	r27, Z+3	; 0x03
     ec0:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <xNextTaskUnblockTime>
     ec4:	90 93 1a 0c 	sts	0x0C1A, r25	; 0x800c1a <xNextTaskUnblockTime+0x1>
     ec8:	a0 93 1b 0c 	sts	0x0C1B, r26	; 0x800c1b <xNextTaskUnblockTime+0x2>
     ecc:	b0 93 1c 0c 	sts	0x0C1C, r27	; 0x800c1c <xNextTaskUnblockTime+0x3>
     ed0:	08 95       	ret

00000ed2 <prvDeleteTCB>:
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	ec 01       	movw	r28, r24
     ed8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     edc:	7a da       	rcall	.-2828   	; 0x3d2 <vPortFree>
     ede:	ce 01       	movw	r24, r28
     ee0:	78 da       	rcall	.-2832   	; 0x3d2 <vPortFree>
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <prvInitialiseNewTask>:
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	2c 01       	movw	r4, r24
     f08:	5b 01       	movw	r10, r22
     f0a:	4a 01       	movw	r8, r20
     f0c:	39 01       	movw	r6, r18
     f0e:	e6 01       	movw	r28, r12
     f10:	65 ea       	ldi	r22, 0xA5	; 165
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f18:	0e 94 ba 1b 	call	0x3774	; 0x3774 <memset>
     f1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	82 1a       	sub	r8, r18
     f24:	91 08       	sbc	r9, r1
     f26:	88 0e       	add	r8, r24
     f28:	99 1e       	adc	r9, r25
     f2a:	a1 14       	cp	r10, r1
     f2c:	b1 04       	cpc	r11, r1
     f2e:	89 f4       	brne	.+34     	; 0xf52 <prvInitialiseNewTask+0x6a>
     f30:	15 c0       	rjmp	.+42     	; 0xf5c <prvInitialiseNewTask+0x74>
     f32:	82 2f       	mov	r24, r18
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	f5 01       	movw	r30, r10
     f38:	e8 0f       	add	r30, r24
     f3a:	f9 1f       	adc	r31, r25
     f3c:	30 81       	ld	r19, Z
     f3e:	de 01       	movw	r26, r28
     f40:	a8 0f       	add	r26, r24
     f42:	b9 1f       	adc	r27, r25
     f44:	5d 96       	adiw	r26, 0x1d	; 29
     f46:	3c 93       	st	X, r19
     f48:	80 81       	ld	r24, Z
     f4a:	88 23       	and	r24, r24
     f4c:	29 f0       	breq	.+10     	; 0xf58 <prvInitialiseNewTask+0x70>
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <prvInitialiseNewTask+0x6c>
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	20 31       	cpi	r18, 0x10	; 16
     f56:	68 f3       	brcs	.-38     	; 0xf32 <prvInitialiseNewTask+0x4a>
     f58:	1c a6       	std	Y+44, r1	; 0x2c
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <prvInitialiseNewTask+0x76>
     f5c:	1d 8e       	std	Y+29, r1	; 0x1d
     f5e:	0a 30       	cpi	r16, 0x0A	; 10
     f60:	08 f0       	brcs	.+2      	; 0xf64 <prvInitialiseNewTask+0x7c>
     f62:	09 e0       	ldi	r16, 0x09	; 9
     f64:	0a 8f       	std	Y+26, r16	; 0x1a
     f66:	0d a7       	std	Y+45, r16	; 0x2d
     f68:	1e a6       	std	Y+46, r1	; 0x2e
     f6a:	ce 01       	movw	r24, r28
     f6c:	02 96       	adiw	r24, 0x02	; 2
     f6e:	7e da       	rcall	.-2820   	; 0x46c <vListInitialiseItem>
     f70:	ce 01       	movw	r24, r28
     f72:	0e 96       	adiw	r24, 0x0e	; 14
     f74:	7b da       	rcall	.-2826   	; 0x46c <vListInitialiseItem>
     f76:	db 87       	std	Y+11, r29	; 0x0b
     f78:	ca 87       	std	Y+10, r28	; 0x0a
     f7a:	8a e0       	ldi	r24, 0x0A	; 10
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a0 e0       	ldi	r26, 0x00	; 0
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	80 1b       	sub	r24, r16
     f84:	91 09       	sbc	r25, r1
     f86:	a1 09       	sbc	r26, r1
     f88:	b1 09       	sbc	r27, r1
     f8a:	8e 87       	std	Y+14, r24	; 0x0e
     f8c:	9f 87       	std	Y+15, r25	; 0x0f
     f8e:	a8 8b       	std	Y+16, r26	; 0x10
     f90:	b9 8b       	std	Y+17, r27	; 0x11
     f92:	df 8b       	std	Y+23, r29	; 0x17
     f94:	ce 8b       	std	Y+22, r28	; 0x16
     f96:	18 aa       	std	Y+48, r1	; 0x30
     f98:	1f a6       	std	Y+47, r1	; 0x2f
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	fe 01       	movw	r30, r28
     f9e:	f1 96       	adiw	r30, 0x31	; 49
     fa0:	df 01       	movw	r26, r30
     fa2:	1d 92       	st	X+, r1
     fa4:	8a 95       	dec	r24
     fa6:	e9 f7       	brne	.-6      	; 0xfa2 <prvInitialiseNewTask+0xba>
     fa8:	1d aa       	std	Y+53, r1	; 0x35
     faa:	a3 01       	movw	r20, r6
     fac:	b2 01       	movw	r22, r4
     fae:	c4 01       	movw	r24, r8
     fb0:	d1 da       	rcall	.-2654   	; 0x554 <pxPortInitialiseStack>
     fb2:	99 83       	std	Y+1, r25	; 0x01
     fb4:	88 83       	st	Y, r24
     fb6:	e1 14       	cp	r14, r1
     fb8:	f1 04       	cpc	r15, r1
     fba:	19 f0       	breq	.+6      	; 0xfc2 <prvInitialiseNewTask+0xda>
     fbc:	f7 01       	movw	r30, r14
     fbe:	d1 83       	std	Z+1, r29	; 0x01
     fc0:	c0 83       	st	Z, r28
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	af 90       	pop	r10
     fd4:	9f 90       	pop	r9
     fd6:	8f 90       	pop	r8
     fd8:	7f 90       	pop	r7
     fda:	6f 90       	pop	r6
     fdc:	5f 90       	pop	r5
     fde:	4f 90       	pop	r4
     fe0:	08 95       	ret

00000fe2 <prvInitialiseTaskLists>:
     fe2:	cf 93       	push	r28
     fe4:	c0 e0       	ldi	r28, 0x00	; 0
     fe6:	08 c0       	rjmp	.+16     	; 0xff8 <prvInitialiseTaskLists+0x16>
     fe8:	2b e0       	ldi	r18, 0x0B	; 11
     fea:	c2 9f       	mul	r28, r18
     fec:	c0 01       	movw	r24, r0
     fee:	11 24       	eor	r1, r1
     ff0:	89 59       	subi	r24, 0x99	; 153
     ff2:	93 4f       	sbci	r25, 0xF3	; 243
     ff4:	2a da       	rcall	.-2988   	; 0x44a <vListInitialise>
     ff6:	cf 5f       	subi	r28, 0xFF	; 255
     ff8:	ca 30       	cpi	r28, 0x0A	; 10
     ffa:	b0 f3       	brcs	.-20     	; 0xfe8 <prvInitialiseTaskLists+0x6>
     ffc:	8c e5       	ldi	r24, 0x5C	; 92
     ffe:	9c e0       	ldi	r25, 0x0C	; 12
    1000:	24 da       	rcall	.-3000   	; 0x44a <vListInitialise>
    1002:	81 e5       	ldi	r24, 0x51	; 81
    1004:	9c e0       	ldi	r25, 0x0C	; 12
    1006:	21 da       	rcall	.-3006   	; 0x44a <vListInitialise>
    1008:	82 e4       	ldi	r24, 0x42	; 66
    100a:	9c e0       	ldi	r25, 0x0C	; 12
    100c:	1e da       	rcall	.-3012   	; 0x44a <vListInitialise>
    100e:	87 e3       	ldi	r24, 0x37	; 55
    1010:	9c e0       	ldi	r25, 0x0C	; 12
    1012:	1b da       	rcall	.-3018   	; 0x44a <vListInitialise>
    1014:	8b e2       	ldi	r24, 0x2B	; 43
    1016:	9c e0       	ldi	r25, 0x0C	; 12
    1018:	18 da       	rcall	.-3024   	; 0x44a <vListInitialise>
    101a:	8c e5       	ldi	r24, 0x5C	; 92
    101c:	9c e0       	ldi	r25, 0x0C	; 12
    101e:	90 93 50 0c 	sts	0x0C50, r25	; 0x800c50 <pxDelayedTaskList+0x1>
    1022:	80 93 4f 0c 	sts	0x0C4F, r24	; 0x800c4f <pxDelayedTaskList>
    1026:	81 e5       	ldi	r24, 0x51	; 81
    1028:	9c e0       	ldi	r25, 0x0C	; 12
    102a:	90 93 4e 0c 	sts	0x0C4E, r25	; 0x800c4e <pxOverflowDelayedTaskList+0x1>
    102e:	80 93 4d 0c 	sts	0x0C4D, r24	; 0x800c4d <pxOverflowDelayedTaskList>
    1032:	cf 91       	pop	r28
    1034:	08 95       	ret

00001036 <prvAddNewTaskToReadyList>:
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	ec 01       	movw	r28, r24
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	0f 92       	push	r0
    1042:	80 91 2a 0c 	lds	r24, 0x0C2A	; 0x800c2a <uxCurrentNumberOfTasks>
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	80 93 2a 0c 	sts	0x0C2A, r24	; 0x800c2a <uxCurrentNumberOfTasks>
    104c:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1050:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1054:	89 2b       	or	r24, r25
    1056:	51 f4       	brne	.+20     	; 0x106c <prvAddNewTaskToReadyList+0x36>
    1058:	d0 93 d6 0c 	sts	0x0CD6, r29	; 0x800cd6 <pxCurrentTCB+0x1>
    105c:	c0 93 d5 0c 	sts	0x0CD5, r28	; 0x800cd5 <pxCurrentTCB>
    1060:	80 91 2a 0c 	lds	r24, 0x0C2A	; 0x800c2a <uxCurrentNumberOfTasks>
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	91 f4       	brne	.+36     	; 0x108c <prvAddNewTaskToReadyList+0x56>
    1068:	bc df       	rcall	.-136    	; 0xfe2 <prvInitialiseTaskLists>
    106a:	10 c0       	rjmp	.+32     	; 0x108c <prvAddNewTaskToReadyList+0x56>
    106c:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <xSchedulerRunning>
    1070:	81 11       	cpse	r24, r1
    1072:	0c c0       	rjmp	.+24     	; 0x108c <prvAddNewTaskToReadyList+0x56>
    1074:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1078:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    107c:	92 8d       	ldd	r25, Z+26	; 0x1a
    107e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1080:	89 17       	cp	r24, r25
    1082:	20 f0       	brcs	.+8      	; 0x108c <prvAddNewTaskToReadyList+0x56>
    1084:	d0 93 d6 0c 	sts	0x0CD6, r29	; 0x800cd6 <pxCurrentTCB+0x1>
    1088:	c0 93 d5 0c 	sts	0x0CD5, r28	; 0x800cd5 <pxCurrentTCB>
    108c:	80 91 1d 0c 	lds	r24, 0x0C1D	; 0x800c1d <uxTaskNumber>
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	80 93 1d 0c 	sts	0x0C1D, r24	; 0x800c1d <uxTaskNumber>
    1096:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1098:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <uxTopReadyPriority>
    109c:	8e 17       	cp	r24, r30
    109e:	10 f4       	brcc	.+4      	; 0x10a4 <prvAddNewTaskToReadyList+0x6e>
    10a0:	e0 93 25 0c 	sts	0x0C25, r30	; 0x800c25 <uxTopReadyPriority>
    10a4:	8b e0       	ldi	r24, 0x0B	; 11
    10a6:	8e 9f       	mul	r24, r30
    10a8:	f0 01       	movw	r30, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	e9 59       	subi	r30, 0x99	; 153
    10ae:	f3 4f       	sbci	r31, 0xF3	; 243
    10b0:	01 80       	ldd	r0, Z+1	; 0x01
    10b2:	f2 81       	ldd	r31, Z+2	; 0x02
    10b4:	e0 2d       	mov	r30, r0
    10b6:	ff 83       	std	Y+7, r31	; 0x07
    10b8:	ee 83       	std	Y+6, r30	; 0x06
    10ba:	26 81       	ldd	r18, Z+6	; 0x06
    10bc:	37 81       	ldd	r19, Z+7	; 0x07
    10be:	39 87       	std	Y+9, r19	; 0x09
    10c0:	28 87       	std	Y+8, r18	; 0x08
    10c2:	a6 81       	ldd	r26, Z+6	; 0x06
    10c4:	b7 81       	ldd	r27, Z+7	; 0x07
    10c6:	9e 01       	movw	r18, r28
    10c8:	2e 5f       	subi	r18, 0xFE	; 254
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	15 96       	adiw	r26, 0x05	; 5
    10ce:	3c 93       	st	X, r19
    10d0:	2e 93       	st	-X, r18
    10d2:	14 97       	sbiw	r26, 0x04	; 4
    10d4:	37 83       	std	Z+7, r19	; 0x07
    10d6:	26 83       	std	Z+6, r18	; 0x06
    10d8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    10da:	8e 9f       	mul	r24, r30
    10dc:	f0 01       	movw	r30, r0
    10de:	11 24       	eor	r1, r1
    10e0:	e9 59       	subi	r30, 0x99	; 153
    10e2:	f3 4f       	sbci	r31, 0xF3	; 243
    10e4:	fd 87       	std	Y+13, r31	; 0x0d
    10e6:	ec 87       	std	Y+12, r30	; 0x0c
    10e8:	80 81       	ld	r24, Z
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	80 83       	st	Z, r24
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <xSchedulerRunning>
    10f6:	88 23       	and	r24, r24
    10f8:	49 f0       	breq	.+18     	; 0x110c <prvAddNewTaskToReadyList+0xd6>
    10fa:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    10fe:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1102:	92 8d       	ldd	r25, Z+26	; 0x1a
    1104:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1106:	98 17       	cp	r25, r24
    1108:	08 f4       	brcc	.+2      	; 0x110c <prvAddNewTaskToReadyList+0xd6>
    110a:	6d da       	rcall	.-2854   	; 0x5e6 <vPortYield>
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <prvCheckTasksWaitingTermination>:
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	1a c0       	rjmp	.+52     	; 0x114c <prvCheckTasksWaitingTermination+0x3a>
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	0f 92       	push	r0
    111e:	e0 91 3e 0c 	lds	r30, 0x0C3E	; 0x800c3e <xTasksWaitingTermination+0x7>
    1122:	f0 91 3f 0c 	lds	r31, 0x0C3F	; 0x800c3f <xTasksWaitingTermination+0x8>
    1126:	c0 85       	ldd	r28, Z+8	; 0x08
    1128:	d1 85       	ldd	r29, Z+9	; 0x09
    112a:	ce 01       	movw	r24, r28
    112c:	02 96       	adiw	r24, 0x02	; 2
    112e:	df d9       	rcall	.-3138   	; 0x4ee <uxListRemove>
    1130:	80 91 2a 0c 	lds	r24, 0x0C2A	; 0x800c2a <uxCurrentNumberOfTasks>
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	80 93 2a 0c 	sts	0x0C2A, r24	; 0x800c2a <uxCurrentNumberOfTasks>
    113a:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <uxDeletedTasksWaitingCleanUp>
    113e:	81 50       	subi	r24, 0x01	; 1
    1140:	80 93 36 0c 	sts	0x0C36, r24	; 0x800c36 <uxDeletedTasksWaitingCleanUp>
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	ce 01       	movw	r24, r28
    114a:	c3 de       	rcall	.-634    	; 0xed2 <prvDeleteTCB>
    114c:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <uxDeletedTasksWaitingCleanUp>
    1150:	81 11       	cpse	r24, r1
    1152:	e2 cf       	rjmp	.-60     	; 0x1118 <prvCheckTasksWaitingTermination+0x6>
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <prvAddCurrentTaskToDelayedList>:
    115a:	8f 92       	push	r8
    115c:	9f 92       	push	r9
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	6b 01       	movw	r12, r22
    1170:	7c 01       	movw	r14, r24
    1172:	c4 2f       	mov	r28, r20
    1174:	80 90 26 0c 	lds	r8, 0x0C26	; 0x800c26 <xTickCount>
    1178:	90 90 27 0c 	lds	r9, 0x0C27	; 0x800c27 <xTickCount+0x1>
    117c:	a0 90 28 0c 	lds	r10, 0x0C28	; 0x800c28 <xTickCount+0x2>
    1180:	b0 90 29 0c 	lds	r11, 0x0C29	; 0x800c29 <xTickCount+0x3>
    1184:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1188:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    118c:	02 96       	adiw	r24, 0x02	; 2
    118e:	af d9       	rcall	.-3234   	; 0x4ee <uxListRemove>
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	c8 16       	cp	r12, r24
    1194:	d8 06       	cpc	r13, r24
    1196:	e8 06       	cpc	r14, r24
    1198:	f8 06       	cpc	r15, r24
    119a:	b1 f5       	brne	.+108    	; 0x1208 <prvAddCurrentTaskToDelayedList+0xae>
    119c:	cc 23       	and	r28, r28
    119e:	a1 f1       	breq	.+104    	; 0x1208 <prvAddCurrentTaskToDelayedList+0xae>
    11a0:	eb e2       	ldi	r30, 0x2B	; 43
    11a2:	fc e0       	ldi	r31, 0x0C	; 12
    11a4:	a1 81       	ldd	r26, Z+1	; 0x01
    11a6:	b2 81       	ldd	r27, Z+2	; 0x02
    11a8:	c0 91 d5 0c 	lds	r28, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    11ac:	d0 91 d6 0c 	lds	r29, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    11b0:	bf 83       	std	Y+7, r27	; 0x07
    11b2:	ae 83       	std	Y+6, r26	; 0x06
    11b4:	c0 91 d5 0c 	lds	r28, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    11b8:	d0 91 d6 0c 	lds	r29, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	8d 91       	ld	r24, X+
    11c0:	9c 91       	ld	r25, X
    11c2:	17 97       	sbiw	r26, 0x07	; 7
    11c4:	99 87       	std	Y+9, r25	; 0x09
    11c6:	88 87       	std	Y+8, r24	; 0x08
    11c8:	16 96       	adiw	r26, 0x06	; 6
    11ca:	cd 91       	ld	r28, X+
    11cc:	dc 91       	ld	r29, X
    11ce:	17 97       	sbiw	r26, 0x07	; 7
    11d0:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    11d4:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    11d8:	02 96       	adiw	r24, 0x02	; 2
    11da:	9d 83       	std	Y+5, r25	; 0x05
    11dc:	8c 83       	std	Y+4, r24	; 0x04
    11de:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    11e2:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    11e6:	02 96       	adiw	r24, 0x02	; 2
    11e8:	17 96       	adiw	r26, 0x07	; 7
    11ea:	9c 93       	st	X, r25
    11ec:	8e 93       	st	-X, r24
    11ee:	16 97       	sbiw	r26, 0x06	; 6
    11f0:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    11f4:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    11f8:	1d 96       	adiw	r26, 0x0d	; 13
    11fa:	fc 93       	st	X, r31
    11fc:	ee 93       	st	-X, r30
    11fe:	1c 97       	sbiw	r26, 0x0c	; 12
    1200:	80 81       	ld	r24, Z
    1202:	8f 5f       	subi	r24, 0xFF	; 255
    1204:	80 83       	st	Z, r24
    1206:	3d c0       	rjmp	.+122    	; 0x1282 <prvAddCurrentTaskToDelayedList+0x128>
    1208:	c8 0c       	add	r12, r8
    120a:	d9 1c       	adc	r13, r9
    120c:	ea 1c       	adc	r14, r10
    120e:	fb 1c       	adc	r15, r11
    1210:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1214:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1218:	c2 82       	std	Z+2, r12	; 0x02
    121a:	d3 82       	std	Z+3, r13	; 0x03
    121c:	e4 82       	std	Z+4, r14	; 0x04
    121e:	f5 82       	std	Z+5, r15	; 0x05
    1220:	c8 14       	cp	r12, r8
    1222:	d9 04       	cpc	r13, r9
    1224:	ea 04       	cpc	r14, r10
    1226:	fb 04       	cpc	r15, r11
    1228:	60 f4       	brcc	.+24     	; 0x1242 <prvAddCurrentTaskToDelayedList+0xe8>
    122a:	60 91 d5 0c 	lds	r22, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    122e:	70 91 d6 0c 	lds	r23, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1232:	80 91 4d 0c 	lds	r24, 0x0C4D	; 0x800c4d <pxOverflowDelayedTaskList>
    1236:	90 91 4e 0c 	lds	r25, 0x0C4E	; 0x800c4e <pxOverflowDelayedTaskList+0x1>
    123a:	6e 5f       	subi	r22, 0xFE	; 254
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	1a d9       	rcall	.-3532   	; 0x474 <vListInsert>
    1240:	20 c0       	rjmp	.+64     	; 0x1282 <prvAddCurrentTaskToDelayedList+0x128>
    1242:	60 91 d5 0c 	lds	r22, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1246:	70 91 d6 0c 	lds	r23, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    124a:	80 91 4f 0c 	lds	r24, 0x0C4F	; 0x800c4f <pxDelayedTaskList>
    124e:	90 91 50 0c 	lds	r25, 0x0C50	; 0x800c50 <pxDelayedTaskList+0x1>
    1252:	6e 5f       	subi	r22, 0xFE	; 254
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	0e d9       	rcall	.-3556   	; 0x474 <vListInsert>
    1258:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <xNextTaskUnblockTime>
    125c:	90 91 1a 0c 	lds	r25, 0x0C1A	; 0x800c1a <xNextTaskUnblockTime+0x1>
    1260:	a0 91 1b 0c 	lds	r26, 0x0C1B	; 0x800c1b <xNextTaskUnblockTime+0x2>
    1264:	b0 91 1c 0c 	lds	r27, 0x0C1C	; 0x800c1c <xNextTaskUnblockTime+0x3>
    1268:	c8 16       	cp	r12, r24
    126a:	d9 06       	cpc	r13, r25
    126c:	ea 06       	cpc	r14, r26
    126e:	fb 06       	cpc	r15, r27
    1270:	40 f4       	brcc	.+16     	; 0x1282 <prvAddCurrentTaskToDelayedList+0x128>
    1272:	c0 92 19 0c 	sts	0x0C19, r12	; 0x800c19 <xNextTaskUnblockTime>
    1276:	d0 92 1a 0c 	sts	0x0C1A, r13	; 0x800c1a <xNextTaskUnblockTime+0x1>
    127a:	e0 92 1b 0c 	sts	0x0C1B, r14	; 0x800c1b <xNextTaskUnblockTime+0x2>
    127e:	f0 92 1c 0c 	sts	0x0C1C, r15	; 0x800c1c <xNextTaskUnblockTime+0x3>
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	ff 90       	pop	r15
    1288:	ef 90       	pop	r14
    128a:	df 90       	pop	r13
    128c:	cf 90       	pop	r12
    128e:	bf 90       	pop	r11
    1290:	af 90       	pop	r10
    1292:	9f 90       	pop	r9
    1294:	8f 90       	pop	r8
    1296:	08 95       	ret

00001298 <xTaskCreate>:
    1298:	2f 92       	push	r2
    129a:	3f 92       	push	r3
    129c:	4f 92       	push	r4
    129e:	5f 92       	push	r5
    12a0:	6f 92       	push	r6
    12a2:	7f 92       	push	r7
    12a4:	8f 92       	push	r8
    12a6:	9f 92       	push	r9
    12a8:	af 92       	push	r10
    12aa:	bf 92       	push	r11
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	3c 01       	movw	r6, r24
    12bc:	1b 01       	movw	r2, r22
    12be:	4a 01       	movw	r8, r20
    12c0:	29 01       	movw	r4, r18
    12c2:	ca 01       	movw	r24, r20
    12c4:	0e 94 40 01 	call	0x280	; 0x280 <pvPortMalloc>
    12c8:	6c 01       	movw	r12, r24
    12ca:	89 2b       	or	r24, r25
    12cc:	69 f0       	breq	.+26     	; 0x12e8 <xTaskCreate+0x50>
    12ce:	86 e3       	ldi	r24, 0x36	; 54
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 40 01 	call	0x280	; 0x280 <pvPortMalloc>
    12d6:	ec 01       	movw	r28, r24
    12d8:	89 2b       	or	r24, r25
    12da:	19 f0       	breq	.+6      	; 0x12e2 <xTaskCreate+0x4a>
    12dc:	dc 8e       	std	Y+28, r13	; 0x1c
    12de:	cb 8e       	std	Y+27, r12	; 0x1b
    12e0:	05 c0       	rjmp	.+10     	; 0x12ec <xTaskCreate+0x54>
    12e2:	c6 01       	movw	r24, r12
    12e4:	76 d8       	rcall	.-3860   	; 0x3d2 <vPortFree>
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <xTaskCreate+0x54>
    12e8:	c0 e0       	ldi	r28, 0x00	; 0
    12ea:	d0 e0       	ldi	r29, 0x00	; 0
    12ec:	20 97       	sbiw	r28, 0x00	; 0
    12ee:	61 f0       	breq	.+24     	; 0x1308 <xTaskCreate+0x70>
    12f0:	a1 2c       	mov	r10, r1
    12f2:	b1 2c       	mov	r11, r1
    12f4:	6e 01       	movw	r12, r28
    12f6:	92 01       	movw	r18, r4
    12f8:	a4 01       	movw	r20, r8
    12fa:	b1 01       	movw	r22, r2
    12fc:	c3 01       	movw	r24, r6
    12fe:	f4 dd       	rcall	.-1048   	; 0xee8 <prvInitialiseNewTask>
    1300:	ce 01       	movw	r24, r28
    1302:	99 de       	rcall	.-718    	; 0x1036 <prvAddNewTaskToReadyList>
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	01 c0       	rjmp	.+2      	; 0x130a <xTaskCreate+0x72>
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	bf 90       	pop	r11
    131a:	af 90       	pop	r10
    131c:	9f 90       	pop	r9
    131e:	8f 90       	pop	r8
    1320:	7f 90       	pop	r7
    1322:	6f 90       	pop	r6
    1324:	5f 90       	pop	r5
    1326:	4f 90       	pop	r4
    1328:	3f 90       	pop	r3
    132a:	2f 90       	pop	r2
    132c:	08 95       	ret

0000132e <vTaskStartScheduler>:
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	0f 2e       	mov	r0, r31
    1336:	f7 e1       	ldi	r31, 0x17	; 23
    1338:	ef 2e       	mov	r14, r31
    133a:	fc e0       	ldi	r31, 0x0C	; 12
    133c:	ff 2e       	mov	r15, r31
    133e:	f0 2d       	mov	r31, r0
    1340:	00 e0       	ldi	r16, 0x00	; 0
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 ec       	ldi	r20, 0xC0	; 192
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	6d e1       	ldi	r22, 0x1D	; 29
    134c:	72 e0       	ldi	r23, 0x02	; 2
    134e:	8c e7       	ldi	r24, 0x7C	; 124
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a2 df       	rcall	.-188    	; 0x1298 <xTaskCreate>
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	09 f4       	brne	.+2      	; 0x135a <vTaskStartScheduler+0x2c>
    1358:	ba d6       	rcall	.+3444   	; 0x20ce <xTimerCreateTimerTask>
    135a:	81 30       	cpi	r24, 0x01	; 1
    135c:	f9 f4       	brne	.+62     	; 0x139c <vTaskStartScheduler+0x6e>
    135e:	f8 94       	cli
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	dc 01       	movw	r26, r24
    1366:	80 93 19 0c 	sts	0x0C19, r24	; 0x800c19 <xNextTaskUnblockTime>
    136a:	90 93 1a 0c 	sts	0x0C1A, r25	; 0x800c1a <xNextTaskUnblockTime+0x1>
    136e:	a0 93 1b 0c 	sts	0x0C1B, r26	; 0x800c1b <xNextTaskUnblockTime+0x2>
    1372:	b0 93 1c 0c 	sts	0x0C1C, r27	; 0x800c1c <xNextTaskUnblockTime+0x3>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <xSchedulerRunning>
    137c:	10 92 26 0c 	sts	0x0C26, r1	; 0x800c26 <xTickCount>
    1380:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <xTickCount+0x1>
    1384:	10 92 28 0c 	sts	0x0C28, r1	; 0x800c28 <xTickCount+0x2>
    1388:	10 92 29 0c 	sts	0x0C29, r1	; 0x800c29 <xTickCount+0x3>
    138c:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1390:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1394:	87 a5       	ldd	r24, Z+47	; 0x2f
    1396:	0e 94 bd 00 	call	0x17a	; 0x17a <task_switch_in>
    139a:	f3 d8       	rcall	.-3610   	; 0x582 <xPortStartScheduler>
    139c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    13a0:	0f 91       	pop	r16
    13a2:	ff 90       	pop	r15
    13a4:	ef 90       	pop	r14
    13a6:	08 95       	ret

000013a8 <vTaskSuspendAll>:
    13a8:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <uxSchedulerSuspended>
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	80 93 16 0c 	sts	0x0C16, r24	; 0x800c16 <uxSchedulerSuspended>
    13b2:	08 95       	ret

000013b4 <xTaskGetTickCount>:
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	0f 92       	push	r0
    13ba:	60 91 26 0c 	lds	r22, 0x0C26	; 0x800c26 <xTickCount>
    13be:	70 91 27 0c 	lds	r23, 0x0C27	; 0x800c27 <xTickCount+0x1>
    13c2:	80 91 28 0c 	lds	r24, 0x0C28	; 0x800c28 <xTickCount+0x2>
    13c6:	90 91 29 0c 	lds	r25, 0x0C29	; 0x800c29 <xTickCount+0x3>
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	08 95       	ret

000013d0 <xTaskIncrementTick>:
    13d0:	cf 92       	push	r12
    13d2:	df 92       	push	r13
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <uxSchedulerSuspended>
    13e0:	81 11       	cpse	r24, r1
    13e2:	05 c1       	rjmp	.+522    	; 0x15ee <xTaskIncrementTick+0x21e>
    13e4:	c0 90 26 0c 	lds	r12, 0x0C26	; 0x800c26 <xTickCount>
    13e8:	d0 90 27 0c 	lds	r13, 0x0C27	; 0x800c27 <xTickCount+0x1>
    13ec:	e0 90 28 0c 	lds	r14, 0x0C28	; 0x800c28 <xTickCount+0x2>
    13f0:	f0 90 29 0c 	lds	r15, 0x0C29	; 0x800c29 <xTickCount+0x3>
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	c8 1a       	sub	r12, r24
    13f8:	d8 0a       	sbc	r13, r24
    13fa:	e8 0a       	sbc	r14, r24
    13fc:	f8 0a       	sbc	r15, r24
    13fe:	c0 92 26 0c 	sts	0x0C26, r12	; 0x800c26 <xTickCount>
    1402:	d0 92 27 0c 	sts	0x0C27, r13	; 0x800c27 <xTickCount+0x1>
    1406:	e0 92 28 0c 	sts	0x0C28, r14	; 0x800c28 <xTickCount+0x2>
    140a:	f0 92 29 0c 	sts	0x0C29, r15	; 0x800c29 <xTickCount+0x3>
    140e:	c1 14       	cp	r12, r1
    1410:	d1 04       	cpc	r13, r1
    1412:	e1 04       	cpc	r14, r1
    1414:	f1 04       	cpc	r15, r1
    1416:	b1 f4       	brne	.+44     	; 0x1444 <xTaskIncrementTick+0x74>
    1418:	80 91 4f 0c 	lds	r24, 0x0C4F	; 0x800c4f <pxDelayedTaskList>
    141c:	90 91 50 0c 	lds	r25, 0x0C50	; 0x800c50 <pxDelayedTaskList+0x1>
    1420:	20 91 4d 0c 	lds	r18, 0x0C4D	; 0x800c4d <pxOverflowDelayedTaskList>
    1424:	30 91 4e 0c 	lds	r19, 0x0C4E	; 0x800c4e <pxOverflowDelayedTaskList+0x1>
    1428:	30 93 50 0c 	sts	0x0C50, r19	; 0x800c50 <pxDelayedTaskList+0x1>
    142c:	20 93 4f 0c 	sts	0x0C4F, r18	; 0x800c4f <pxDelayedTaskList>
    1430:	90 93 4e 0c 	sts	0x0C4E, r25	; 0x800c4e <pxOverflowDelayedTaskList+0x1>
    1434:	80 93 4d 0c 	sts	0x0C4D, r24	; 0x800c4d <pxOverflowDelayedTaskList>
    1438:	80 91 1e 0c 	lds	r24, 0x0C1E	; 0x800c1e <xNumOfOverflows>
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	80 93 1e 0c 	sts	0x0C1E, r24	; 0x800c1e <xNumOfOverflows>
    1442:	20 dd       	rcall	.-1472   	; 0xe84 <prvResetNextTaskUnblockTime>
    1444:	80 91 19 0c 	lds	r24, 0x0C19	; 0x800c19 <xNextTaskUnblockTime>
    1448:	90 91 1a 0c 	lds	r25, 0x0C1A	; 0x800c1a <xNextTaskUnblockTime+0x1>
    144c:	a0 91 1b 0c 	lds	r26, 0x0C1B	; 0x800c1b <xNextTaskUnblockTime+0x2>
    1450:	b0 91 1c 0c 	lds	r27, 0x0C1C	; 0x800c1c <xNextTaskUnblockTime+0x3>
    1454:	c8 16       	cp	r12, r24
    1456:	d9 06       	cpc	r13, r25
    1458:	ea 06       	cpc	r14, r26
    145a:	fb 06       	cpc	r15, r27
    145c:	20 f4       	brcc	.+8      	; 0x1466 <xTaskIncrementTick+0x96>
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	b2 c0       	rjmp	.+356    	; 0x15c6 <xTaskIncrementTick+0x1f6>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <xTaskIncrementTick+0x98>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	e0 91 4f 0c 	lds	r30, 0x0C4F	; 0x800c4f <pxDelayedTaskList>
    146c:	f0 91 50 0c 	lds	r31, 0x0C50	; 0x800c50 <pxDelayedTaskList+0x1>
    1470:	90 81       	ld	r25, Z
    1472:	91 11       	cpse	r25, r1
    1474:	0c c0       	rjmp	.+24     	; 0x148e <xTaskIncrementTick+0xbe>
    1476:	4f ef       	ldi	r20, 0xFF	; 255
    1478:	5f ef       	ldi	r21, 0xFF	; 255
    147a:	ba 01       	movw	r22, r20
    147c:	40 93 19 0c 	sts	0x0C19, r20	; 0x800c19 <xNextTaskUnblockTime>
    1480:	50 93 1a 0c 	sts	0x0C1A, r21	; 0x800c1a <xNextTaskUnblockTime+0x1>
    1484:	60 93 1b 0c 	sts	0x0C1B, r22	; 0x800c1b <xNextTaskUnblockTime+0x2>
    1488:	70 93 1c 0c 	sts	0x0C1C, r23	; 0x800c1c <xNextTaskUnblockTime+0x3>
    148c:	9c c0       	rjmp	.+312    	; 0x15c6 <xTaskIncrementTick+0x1f6>
    148e:	e0 91 4f 0c 	lds	r30, 0x0C4F	; 0x800c4f <pxDelayedTaskList>
    1492:	f0 91 50 0c 	lds	r31, 0x0C50	; 0x800c50 <pxDelayedTaskList+0x1>
    1496:	07 80       	ldd	r0, Z+7	; 0x07
    1498:	f0 85       	ldd	r31, Z+8	; 0x08
    149a:	e0 2d       	mov	r30, r0
    149c:	00 84       	ldd	r0, Z+8	; 0x08
    149e:	f1 85       	ldd	r31, Z+9	; 0x09
    14a0:	e0 2d       	mov	r30, r0
    14a2:	42 81       	ldd	r20, Z+2	; 0x02
    14a4:	53 81       	ldd	r21, Z+3	; 0x03
    14a6:	64 81       	ldd	r22, Z+4	; 0x04
    14a8:	75 81       	ldd	r23, Z+5	; 0x05
    14aa:	c4 16       	cp	r12, r20
    14ac:	d5 06       	cpc	r13, r21
    14ae:	e6 06       	cpc	r14, r22
    14b0:	f7 06       	cpc	r15, r23
    14b2:	48 f4       	brcc	.+18     	; 0x14c6 <xTaskIncrementTick+0xf6>
    14b4:	40 93 19 0c 	sts	0x0C19, r20	; 0x800c19 <xNextTaskUnblockTime>
    14b8:	50 93 1a 0c 	sts	0x0C1A, r21	; 0x800c1a <xNextTaskUnblockTime+0x1>
    14bc:	60 93 1b 0c 	sts	0x0C1B, r22	; 0x800c1b <xNextTaskUnblockTime+0x2>
    14c0:	70 93 1c 0c 	sts	0x0C1C, r23	; 0x800c1c <xNextTaskUnblockTime+0x3>
    14c4:	80 c0       	rjmp	.+256    	; 0x15c6 <xTaskIncrementTick+0x1f6>
    14c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    14c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    14ca:	c6 81       	ldd	r28, Z+6	; 0x06
    14cc:	d7 81       	ldd	r29, Z+7	; 0x07
    14ce:	20 85       	ldd	r18, Z+8	; 0x08
    14d0:	31 85       	ldd	r19, Z+9	; 0x09
    14d2:	3f 83       	std	Y+7, r19	; 0x07
    14d4:	2e 83       	std	Y+6, r18	; 0x06
    14d6:	c0 85       	ldd	r28, Z+8	; 0x08
    14d8:	d1 85       	ldd	r29, Z+9	; 0x09
    14da:	26 81       	ldd	r18, Z+6	; 0x06
    14dc:	37 81       	ldd	r19, Z+7	; 0x07
    14de:	3d 83       	std	Y+5, r19	; 0x05
    14e0:	2c 83       	std	Y+4, r18	; 0x04
    14e2:	11 96       	adiw	r26, 0x01	; 1
    14e4:	4d 91       	ld	r20, X+
    14e6:	5c 91       	ld	r21, X
    14e8:	12 97       	sbiw	r26, 0x02	; 2
    14ea:	9f 01       	movw	r18, r30
    14ec:	2e 5f       	subi	r18, 0xFE	; 254
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255
    14f0:	42 17       	cp	r20, r18
    14f2:	53 07       	cpc	r21, r19
    14f4:	31 f4       	brne	.+12     	; 0x1502 <xTaskIncrementTick+0x132>
    14f6:	40 85       	ldd	r20, Z+8	; 0x08
    14f8:	51 85       	ldd	r21, Z+9	; 0x09
    14fa:	12 96       	adiw	r26, 0x02	; 2
    14fc:	5c 93       	st	X, r21
    14fe:	4e 93       	st	-X, r20
    1500:	11 97       	sbiw	r26, 0x01	; 1
    1502:	15 86       	std	Z+13, r1	; 0x0d
    1504:	14 86       	std	Z+12, r1	; 0x0c
    1506:	9c 91       	ld	r25, X
    1508:	91 50       	subi	r25, 0x01	; 1
    150a:	9c 93       	st	X, r25
    150c:	a0 8d       	ldd	r26, Z+24	; 0x18
    150e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1510:	10 97       	sbiw	r26, 0x00	; 0
    1512:	09 f1       	breq	.+66     	; 0x1556 <xTaskIncrementTick+0x186>
    1514:	c2 89       	ldd	r28, Z+18	; 0x12
    1516:	d3 89       	ldd	r29, Z+19	; 0x13
    1518:	44 89       	ldd	r20, Z+20	; 0x14
    151a:	55 89       	ldd	r21, Z+21	; 0x15
    151c:	5f 83       	std	Y+7, r21	; 0x07
    151e:	4e 83       	std	Y+6, r20	; 0x06
    1520:	c4 89       	ldd	r28, Z+20	; 0x14
    1522:	d5 89       	ldd	r29, Z+21	; 0x15
    1524:	42 89       	ldd	r20, Z+18	; 0x12
    1526:	53 89       	ldd	r21, Z+19	; 0x13
    1528:	5d 83       	std	Y+5, r21	; 0x05
    152a:	4c 83       	std	Y+4, r20	; 0x04
    152c:	11 96       	adiw	r26, 0x01	; 1
    152e:	6d 91       	ld	r22, X+
    1530:	7c 91       	ld	r23, X
    1532:	12 97       	sbiw	r26, 0x02	; 2
    1534:	af 01       	movw	r20, r30
    1536:	42 5f       	subi	r20, 0xF2	; 242
    1538:	5f 4f       	sbci	r21, 0xFF	; 255
    153a:	64 17       	cp	r22, r20
    153c:	75 07       	cpc	r23, r21
    153e:	31 f4       	brne	.+12     	; 0x154c <xTaskIncrementTick+0x17c>
    1540:	44 89       	ldd	r20, Z+20	; 0x14
    1542:	55 89       	ldd	r21, Z+21	; 0x15
    1544:	12 96       	adiw	r26, 0x02	; 2
    1546:	5c 93       	st	X, r21
    1548:	4e 93       	st	-X, r20
    154a:	11 97       	sbiw	r26, 0x01	; 1
    154c:	11 8e       	std	Z+25, r1	; 0x19
    154e:	10 8e       	std	Z+24, r1	; 0x18
    1550:	9c 91       	ld	r25, X
    1552:	91 50       	subi	r25, 0x01	; 1
    1554:	9c 93       	st	X, r25
    1556:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1558:	90 91 25 0c 	lds	r25, 0x0C25	; 0x800c25 <uxTopReadyPriority>
    155c:	9a 17       	cp	r25, r26
    155e:	10 f4       	brcc	.+4      	; 0x1564 <xTaskIncrementTick+0x194>
    1560:	a0 93 25 0c 	sts	0x0C25, r26	; 0x800c25 <uxTopReadyPriority>
    1564:	9b e0       	ldi	r25, 0x0B	; 11
    1566:	9a 9f       	mul	r25, r26
    1568:	d0 01       	movw	r26, r0
    156a:	11 24       	eor	r1, r1
    156c:	a9 59       	subi	r26, 0x99	; 153
    156e:	b3 4f       	sbci	r27, 0xF3	; 243
    1570:	11 96       	adiw	r26, 0x01	; 1
    1572:	0d 90       	ld	r0, X+
    1574:	bc 91       	ld	r27, X
    1576:	a0 2d       	mov	r26, r0
    1578:	b7 83       	std	Z+7, r27	; 0x07
    157a:	a6 83       	std	Z+6, r26	; 0x06
    157c:	16 96       	adiw	r26, 0x06	; 6
    157e:	4d 91       	ld	r20, X+
    1580:	5c 91       	ld	r21, X
    1582:	17 97       	sbiw	r26, 0x07	; 7
    1584:	51 87       	std	Z+9, r21	; 0x09
    1586:	40 87       	std	Z+8, r20	; 0x08
    1588:	16 96       	adiw	r26, 0x06	; 6
    158a:	cd 91       	ld	r28, X+
    158c:	dc 91       	ld	r29, X
    158e:	17 97       	sbiw	r26, 0x07	; 7
    1590:	3d 83       	std	Y+5, r19	; 0x05
    1592:	2c 83       	std	Y+4, r18	; 0x04
    1594:	17 96       	adiw	r26, 0x07	; 7
    1596:	3c 93       	st	X, r19
    1598:	2e 93       	st	-X, r18
    159a:	16 97       	sbiw	r26, 0x06	; 6
    159c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    159e:	9a 9f       	mul	r25, r26
    15a0:	d0 01       	movw	r26, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	a9 59       	subi	r26, 0x99	; 153
    15a6:	b3 4f       	sbci	r27, 0xF3	; 243
    15a8:	b5 87       	std	Z+13, r27	; 0x0d
    15aa:	a4 87       	std	Z+12, r26	; 0x0c
    15ac:	9c 91       	ld	r25, X
    15ae:	9f 5f       	subi	r25, 0xFF	; 255
    15b0:	9c 93       	st	X, r25
    15b2:	22 8d       	ldd	r18, Z+26	; 0x1a
    15b4:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    15b8:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    15bc:	92 8d       	ldd	r25, Z+26	; 0x1a
    15be:	29 17       	cp	r18, r25
    15c0:	08 f0       	brcs	.+2      	; 0x15c4 <xTaskIncrementTick+0x1f4>
    15c2:	4f cf       	rjmp	.-354    	; 0x1462 <xTaskIncrementTick+0x92>
    15c4:	51 cf       	rjmp	.-350    	; 0x1468 <xTaskIncrementTick+0x98>
    15c6:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    15ca:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    15ce:	e2 8d       	ldd	r30, Z+26	; 0x1a
    15d0:	9b e0       	ldi	r25, 0x0B	; 11
    15d2:	e9 9f       	mul	r30, r25
    15d4:	f0 01       	movw	r30, r0
    15d6:	11 24       	eor	r1, r1
    15d8:	e9 59       	subi	r30, 0x99	; 153
    15da:	f3 4f       	sbci	r31, 0xF3	; 243
    15dc:	90 81       	ld	r25, Z
    15de:	92 30       	cpi	r25, 0x02	; 2
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <xTaskIncrementTick+0x214>
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 91 1f 0c 	lds	r25, 0x0C1F	; 0x800c1f <xYieldPending>
    15e8:	91 11       	cpse	r25, r1
    15ea:	16 c0       	rjmp	.+44     	; 0x1618 <xTaskIncrementTick+0x248>
    15ec:	16 c0       	rjmp	.+44     	; 0x161a <xTaskIncrementTick+0x24a>
    15ee:	80 91 20 0c 	lds	r24, 0x0C20	; 0x800c20 <xPendedTicks>
    15f2:	90 91 21 0c 	lds	r25, 0x0C21	; 0x800c21 <xPendedTicks+0x1>
    15f6:	a0 91 22 0c 	lds	r26, 0x0C22	; 0x800c22 <xPendedTicks+0x2>
    15fa:	b0 91 23 0c 	lds	r27, 0x0C23	; 0x800c23 <xPendedTicks+0x3>
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	a1 1d       	adc	r26, r1
    1602:	b1 1d       	adc	r27, r1
    1604:	80 93 20 0c 	sts	0x0C20, r24	; 0x800c20 <xPendedTicks>
    1608:	90 93 21 0c 	sts	0x0C21, r25	; 0x800c21 <xPendedTicks+0x1>
    160c:	a0 93 22 0c 	sts	0x0C22, r26	; 0x800c22 <xPendedTicks+0x2>
    1610:	b0 93 23 0c 	sts	0x0C23, r27	; 0x800c23 <xPendedTicks+0x3>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	01 c0       	rjmp	.+2      	; 0x161a <xTaskIncrementTick+0x24a>
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	cf 90       	pop	r12
    1626:	08 95       	ret

00001628 <xTaskResumeAll>:
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	0f 92       	push	r0
    163a:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <uxSchedulerSuspended>
    163e:	81 50       	subi	r24, 0x01	; 1
    1640:	80 93 16 0c 	sts	0x0C16, r24	; 0x800c16 <uxSchedulerSuspended>
    1644:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <uxSchedulerSuspended>
    1648:	81 11       	cpse	r24, r1
    164a:	be c0       	rjmp	.+380    	; 0x17c8 <xTaskResumeAll+0x1a0>
    164c:	80 91 2a 0c 	lds	r24, 0x0C2A	; 0x800c2a <uxCurrentNumberOfTasks>
    1650:	81 11       	cpse	r24, r1
    1652:	88 c0       	rjmp	.+272    	; 0x1764 <xTaskResumeAll+0x13c>
    1654:	bc c0       	rjmp	.+376    	; 0x17ce <xTaskResumeAll+0x1a6>
    1656:	e0 91 49 0c 	lds	r30, 0x0C49	; 0x800c49 <xPendingReadyList+0x7>
    165a:	f0 91 4a 0c 	lds	r31, 0x0C4A	; 0x800c4a <xPendingReadyList+0x8>
    165e:	00 84       	ldd	r0, Z+8	; 0x08
    1660:	f1 85       	ldd	r31, Z+9	; 0x09
    1662:	e0 2d       	mov	r30, r0
    1664:	a0 8d       	ldd	r26, Z+24	; 0x18
    1666:	b1 8d       	ldd	r27, Z+25	; 0x19
    1668:	c2 89       	ldd	r28, Z+18	; 0x12
    166a:	d3 89       	ldd	r29, Z+19	; 0x13
    166c:	84 89       	ldd	r24, Z+20	; 0x14
    166e:	95 89       	ldd	r25, Z+21	; 0x15
    1670:	9f 83       	std	Y+7, r25	; 0x07
    1672:	8e 83       	std	Y+6, r24	; 0x06
    1674:	c4 89       	ldd	r28, Z+20	; 0x14
    1676:	d5 89       	ldd	r29, Z+21	; 0x15
    1678:	82 89       	ldd	r24, Z+18	; 0x12
    167a:	93 89       	ldd	r25, Z+19	; 0x13
    167c:	9d 83       	std	Y+5, r25	; 0x05
    167e:	8c 83       	std	Y+4, r24	; 0x04
    1680:	11 96       	adiw	r26, 0x01	; 1
    1682:	2d 91       	ld	r18, X+
    1684:	3c 91       	ld	r19, X
    1686:	12 97       	sbiw	r26, 0x02	; 2
    1688:	cf 01       	movw	r24, r30
    168a:	0e 96       	adiw	r24, 0x0e	; 14
    168c:	28 17       	cp	r18, r24
    168e:	39 07       	cpc	r19, r25
    1690:	31 f4       	brne	.+12     	; 0x169e <xTaskResumeAll+0x76>
    1692:	84 89       	ldd	r24, Z+20	; 0x14
    1694:	95 89       	ldd	r25, Z+21	; 0x15
    1696:	12 96       	adiw	r26, 0x02	; 2
    1698:	9c 93       	st	X, r25
    169a:	8e 93       	st	-X, r24
    169c:	11 97       	sbiw	r26, 0x01	; 1
    169e:	11 8e       	std	Z+25, r1	; 0x19
    16a0:	10 8e       	std	Z+24, r1	; 0x18
    16a2:	8c 91       	ld	r24, X
    16a4:	81 50       	subi	r24, 0x01	; 1
    16a6:	8c 93       	st	X, r24
    16a8:	a4 85       	ldd	r26, Z+12	; 0x0c
    16aa:	b5 85       	ldd	r27, Z+13	; 0x0d
    16ac:	c6 81       	ldd	r28, Z+6	; 0x06
    16ae:	d7 81       	ldd	r29, Z+7	; 0x07
    16b0:	80 85       	ldd	r24, Z+8	; 0x08
    16b2:	91 85       	ldd	r25, Z+9	; 0x09
    16b4:	9f 83       	std	Y+7, r25	; 0x07
    16b6:	8e 83       	std	Y+6, r24	; 0x06
    16b8:	c0 85       	ldd	r28, Z+8	; 0x08
    16ba:	d1 85       	ldd	r29, Z+9	; 0x09
    16bc:	86 81       	ldd	r24, Z+6	; 0x06
    16be:	97 81       	ldd	r25, Z+7	; 0x07
    16c0:	9d 83       	std	Y+5, r25	; 0x05
    16c2:	8c 83       	std	Y+4, r24	; 0x04
    16c4:	11 96       	adiw	r26, 0x01	; 1
    16c6:	8d 91       	ld	r24, X+
    16c8:	9c 91       	ld	r25, X
    16ca:	12 97       	sbiw	r26, 0x02	; 2
    16cc:	9f 01       	movw	r18, r30
    16ce:	2e 5f       	subi	r18, 0xFE	; 254
    16d0:	3f 4f       	sbci	r19, 0xFF	; 255
    16d2:	82 17       	cp	r24, r18
    16d4:	93 07       	cpc	r25, r19
    16d6:	31 f4       	brne	.+12     	; 0x16e4 <xTaskResumeAll+0xbc>
    16d8:	80 85       	ldd	r24, Z+8	; 0x08
    16da:	91 85       	ldd	r25, Z+9	; 0x09
    16dc:	12 96       	adiw	r26, 0x02	; 2
    16de:	9c 93       	st	X, r25
    16e0:	8e 93       	st	-X, r24
    16e2:	11 97       	sbiw	r26, 0x01	; 1
    16e4:	15 86       	std	Z+13, r1	; 0x0d
    16e6:	14 86       	std	Z+12, r1	; 0x0c
    16e8:	8c 91       	ld	r24, X
    16ea:	81 50       	subi	r24, 0x01	; 1
    16ec:	8c 93       	st	X, r24
    16ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    16f0:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <uxTopReadyPriority>
    16f4:	8a 17       	cp	r24, r26
    16f6:	10 f4       	brcc	.+4      	; 0x16fc <xTaskResumeAll+0xd4>
    16f8:	a0 93 25 0c 	sts	0x0C25, r26	; 0x800c25 <uxTopReadyPriority>
    16fc:	8b e0       	ldi	r24, 0x0B	; 11
    16fe:	8a 9f       	mul	r24, r26
    1700:	d0 01       	movw	r26, r0
    1702:	11 24       	eor	r1, r1
    1704:	a9 59       	subi	r26, 0x99	; 153
    1706:	b3 4f       	sbci	r27, 0xF3	; 243
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	0d 90       	ld	r0, X+
    170c:	bc 91       	ld	r27, X
    170e:	a0 2d       	mov	r26, r0
    1710:	b7 83       	std	Z+7, r27	; 0x07
    1712:	a6 83       	std	Z+6, r26	; 0x06
    1714:	16 96       	adiw	r26, 0x06	; 6
    1716:	4d 91       	ld	r20, X+
    1718:	5c 91       	ld	r21, X
    171a:	17 97       	sbiw	r26, 0x07	; 7
    171c:	51 87       	std	Z+9, r21	; 0x09
    171e:	40 87       	std	Z+8, r20	; 0x08
    1720:	16 96       	adiw	r26, 0x06	; 6
    1722:	cd 91       	ld	r28, X+
    1724:	dc 91       	ld	r29, X
    1726:	17 97       	sbiw	r26, 0x07	; 7
    1728:	3d 83       	std	Y+5, r19	; 0x05
    172a:	2c 83       	std	Y+4, r18	; 0x04
    172c:	17 96       	adiw	r26, 0x07	; 7
    172e:	3c 93       	st	X, r19
    1730:	2e 93       	st	-X, r18
    1732:	16 97       	sbiw	r26, 0x06	; 6
    1734:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1736:	8a 9f       	mul	r24, r26
    1738:	d0 01       	movw	r26, r0
    173a:	11 24       	eor	r1, r1
    173c:	a9 59       	subi	r26, 0x99	; 153
    173e:	b3 4f       	sbci	r27, 0xF3	; 243
    1740:	b5 87       	std	Z+13, r27	; 0x0d
    1742:	a4 87       	std	Z+12, r26	; 0x0c
    1744:	8c 91       	ld	r24, X
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	8c 93       	st	X, r24
    174a:	92 8d       	ldd	r25, Z+26	; 0x1a
    174c:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1750:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1754:	5a 96       	adiw	r26, 0x1a	; 26
    1756:	8c 91       	ld	r24, X
    1758:	98 17       	cp	r25, r24
    175a:	30 f0       	brcs	.+12     	; 0x1768 <xTaskResumeAll+0x140>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <xYieldPending>
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <xTaskResumeAll+0x140>
    1764:	e0 e0       	ldi	r30, 0x00	; 0
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 91 42 0c 	lds	r24, 0x0C42	; 0x800c42 <xPendingReadyList>
    176c:	81 11       	cpse	r24, r1
    176e:	73 cf       	rjmp	.-282    	; 0x1656 <xTaskResumeAll+0x2e>
    1770:	ef 2b       	or	r30, r31
    1772:	09 f0       	breq	.+2      	; 0x1776 <xTaskResumeAll+0x14e>
    1774:	87 db       	rcall	.-2290   	; 0xe84 <prvResetNextTaskUnblockTime>
    1776:	c0 90 20 0c 	lds	r12, 0x0C20	; 0x800c20 <xPendedTicks>
    177a:	d0 90 21 0c 	lds	r13, 0x0C21	; 0x800c21 <xPendedTicks+0x1>
    177e:	e0 90 22 0c 	lds	r14, 0x0C22	; 0x800c22 <xPendedTicks+0x2>
    1782:	f0 90 23 0c 	lds	r15, 0x0C23	; 0x800c23 <xPendedTicks+0x3>
    1786:	c1 14       	cp	r12, r1
    1788:	d1 04       	cpc	r13, r1
    178a:	e1 04       	cpc	r14, r1
    178c:	f1 04       	cpc	r15, r1
    178e:	a1 f0       	breq	.+40     	; 0x17b8 <xTaskResumeAll+0x190>
    1790:	1f de       	rcall	.-962    	; 0x13d0 <xTaskIncrementTick>
    1792:	88 23       	and	r24, r24
    1794:	19 f0       	breq	.+6      	; 0x179c <xTaskResumeAll+0x174>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <xYieldPending>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	c8 1a       	sub	r12, r24
    17a0:	d1 08       	sbc	r13, r1
    17a2:	e1 08       	sbc	r14, r1
    17a4:	f1 08       	sbc	r15, r1
    17a6:	a1 f7       	brne	.-24     	; 0x1790 <xTaskResumeAll+0x168>
    17a8:	10 92 20 0c 	sts	0x0C20, r1	; 0x800c20 <xPendedTicks>
    17ac:	10 92 21 0c 	sts	0x0C21, r1	; 0x800c21 <xPendedTicks+0x1>
    17b0:	10 92 22 0c 	sts	0x0C22, r1	; 0x800c22 <xPendedTicks+0x2>
    17b4:	10 92 23 0c 	sts	0x0C23, r1	; 0x800c23 <xPendedTicks+0x3>
    17b8:	80 91 1f 0c 	lds	r24, 0x0C1F	; 0x800c1f <xYieldPending>
    17bc:	88 23       	and	r24, r24
    17be:	31 f0       	breq	.+12     	; 0x17cc <xTaskResumeAll+0x1a4>
    17c0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <vPortYield>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <xTaskResumeAll+0x1a6>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <xTaskResumeAll+0x1a6>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	08 95       	ret

000017e0 <xTaskDelayUntil>:
    17e0:	8f 92       	push	r8
    17e2:	9f 92       	push	r9
    17e4:	af 92       	push	r10
    17e6:	bf 92       	push	r11
    17e8:	cf 92       	push	r12
    17ea:	df 92       	push	r13
    17ec:	ef 92       	push	r14
    17ee:	ff 92       	push	r15
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	ec 01       	movw	r28, r24
    17f8:	6a 01       	movw	r12, r20
    17fa:	7b 01       	movw	r14, r22
    17fc:	d5 dd       	rcall	.-1110   	; 0x13a8 <vTaskSuspendAll>
    17fe:	80 90 26 0c 	lds	r8, 0x0C26	; 0x800c26 <xTickCount>
    1802:	90 90 27 0c 	lds	r9, 0x0C27	; 0x800c27 <xTickCount+0x1>
    1806:	a0 90 28 0c 	lds	r10, 0x0C28	; 0x800c28 <xTickCount+0x2>
    180a:	b0 90 29 0c 	lds	r11, 0x0C29	; 0x800c29 <xTickCount+0x3>
    180e:	88 81       	ld	r24, Y
    1810:	99 81       	ldd	r25, Y+1	; 0x01
    1812:	aa 81       	ldd	r26, Y+2	; 0x02
    1814:	bb 81       	ldd	r27, Y+3	; 0x03
    1816:	ac 01       	movw	r20, r24
    1818:	bd 01       	movw	r22, r26
    181a:	4c 0d       	add	r20, r12
    181c:	5d 1d       	adc	r21, r13
    181e:	6e 1d       	adc	r22, r14
    1820:	7f 1d       	adc	r23, r15
    1822:	88 16       	cp	r8, r24
    1824:	99 06       	cpc	r9, r25
    1826:	aa 06       	cpc	r10, r26
    1828:	bb 06       	cpc	r11, r27
    182a:	60 f4       	brcc	.+24     	; 0x1844 <xTaskDelayUntil+0x64>
    182c:	48 17       	cp	r20, r24
    182e:	59 07       	cpc	r21, r25
    1830:	6a 07       	cpc	r22, r26
    1832:	7b 07       	cpc	r23, r27
    1834:	98 f4       	brcc	.+38     	; 0x185c <xTaskDelayUntil+0x7c>
    1836:	84 16       	cp	r8, r20
    1838:	95 06       	cpc	r9, r21
    183a:	a6 06       	cpc	r10, r22
    183c:	b7 06       	cpc	r11, r23
    183e:	80 f0       	brcs	.+32     	; 0x1860 <xTaskDelayUntil+0x80>
    1840:	10 e0       	ldi	r17, 0x00	; 0
    1842:	13 c0       	rjmp	.+38     	; 0x186a <xTaskDelayUntil+0x8a>
    1844:	48 17       	cp	r20, r24
    1846:	59 07       	cpc	r21, r25
    1848:	6a 07       	cpc	r22, r26
    184a:	7b 07       	cpc	r23, r27
    184c:	58 f0       	brcs	.+22     	; 0x1864 <xTaskDelayUntil+0x84>
    184e:	84 16       	cp	r8, r20
    1850:	95 06       	cpc	r9, r21
    1852:	a6 06       	cpc	r10, r22
    1854:	b7 06       	cpc	r11, r23
    1856:	40 f0       	brcs	.+16     	; 0x1868 <xTaskDelayUntil+0x88>
    1858:	10 e0       	ldi	r17, 0x00	; 0
    185a:	07 c0       	rjmp	.+14     	; 0x186a <xTaskDelayUntil+0x8a>
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	05 c0       	rjmp	.+10     	; 0x186a <xTaskDelayUntil+0x8a>
    1860:	11 e0       	ldi	r17, 0x01	; 1
    1862:	03 c0       	rjmp	.+6      	; 0x186a <xTaskDelayUntil+0x8a>
    1864:	11 e0       	ldi	r17, 0x01	; 1
    1866:	01 c0       	rjmp	.+2      	; 0x186a <xTaskDelayUntil+0x8a>
    1868:	11 e0       	ldi	r17, 0x01	; 1
    186a:	48 83       	st	Y, r20
    186c:	59 83       	std	Y+1, r21	; 0x01
    186e:	6a 83       	std	Y+2, r22	; 0x02
    1870:	7b 83       	std	Y+3, r23	; 0x03
    1872:	11 23       	and	r17, r17
    1874:	41 f0       	breq	.+16     	; 0x1886 <xTaskDelayUntil+0xa6>
    1876:	cb 01       	movw	r24, r22
    1878:	ba 01       	movw	r22, r20
    187a:	68 19       	sub	r22, r8
    187c:	79 09       	sbc	r23, r9
    187e:	8a 09       	sbc	r24, r10
    1880:	9b 09       	sbc	r25, r11
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	6a dc       	rcall	.-1836   	; 0x115a <prvAddCurrentTaskToDelayedList>
    1886:	d0 de       	rcall	.-608    	; 0x1628 <xTaskResumeAll>
    1888:	81 11       	cpse	r24, r1
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <xTaskDelayUntil+0xb0>
    188c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <vPortYield>
    1890:	81 2f       	mov	r24, r17
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	bf 90       	pop	r11
    18a2:	af 90       	pop	r10
    18a4:	9f 90       	pop	r9
    18a6:	8f 90       	pop	r8
    18a8:	08 95       	ret

000018aa <vTaskDelay>:
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	6b 01       	movw	r12, r22
    18b4:	7c 01       	movw	r14, r24
    18b6:	67 2b       	or	r22, r23
    18b8:	68 2b       	or	r22, r24
    18ba:	69 2b       	or	r22, r25
    18bc:	39 f0       	breq	.+14     	; 0x18cc <vTaskDelay+0x22>
    18be:	74 dd       	rcall	.-1304   	; 0x13a8 <vTaskSuspendAll>
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	c7 01       	movw	r24, r14
    18c4:	b6 01       	movw	r22, r12
    18c6:	49 dc       	rcall	.-1902   	; 0x115a <prvAddCurrentTaskToDelayedList>
    18c8:	af de       	rcall	.-674    	; 0x1628 <xTaskResumeAll>
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <vTaskDelay+0x24>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	81 11       	cpse	r24, r1
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <vTaskDelay+0x2c>
    18d2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <vPortYield>
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	df 90       	pop	r13
    18dc:	cf 90       	pop	r12
    18de:	08 95       	ret

000018e0 <vTaskSetApplicationTaskTag>:
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	21 f4       	brne	.+8      	; 0x18ec <vTaskSetApplicationTaskTag+0xc>
    18e4:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    18e8:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	0f 92       	push	r0
    18f2:	fc 01       	movw	r30, r24
    18f4:	70 ab       	std	Z+48, r23	; 0x30
    18f6:	67 a7       	std	Z+47, r22	; 0x2f
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	08 95       	ret

000018fe <vTaskSwitchContext>:
    18fe:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <uxSchedulerSuspended>
    1902:	88 23       	and	r24, r24
    1904:	21 f0       	breq	.+8      	; 0x190e <vTaskSwitchContext+0x10>
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <xYieldPending>
    190c:	08 95       	ret
    190e:	10 92 1f 0c 	sts	0x0C1F, r1	; 0x800c1f <xYieldPending>
    1912:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1916:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    191a:	87 a5       	ldd	r24, Z+47	; 0x2f
    191c:	0e 94 c7 00 	call	0x18e	; 0x18e <task_switch_out>
    1920:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1924:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1928:	20 81       	ld	r18, Z
    192a:	31 81       	ldd	r19, Z+1	; 0x01
    192c:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1930:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1934:	83 8d       	ldd	r24, Z+27	; 0x1b
    1936:	94 8d       	ldd	r25, Z+28	; 0x1c
    1938:	82 17       	cp	r24, r18
    193a:	93 07       	cpc	r25, r19
    193c:	58 f0       	brcs	.+22     	; 0x1954 <vTaskSwitchContext+0x56>
    193e:	60 91 d5 0c 	lds	r22, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1942:	70 91 d6 0c 	lds	r23, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1946:	63 5e       	subi	r22, 0xE3	; 227
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    194e:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1952:	46 d6       	rcall	.+3212   	; 0x25e0 <vApplicationStackOverflowHook>
    1954:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <uxTopReadyPriority>
    1958:	01 c0       	rjmp	.+2      	; 0x195c <vTaskSwitchContext+0x5e>
    195a:	81 50       	subi	r24, 0x01	; 1
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	9b e0       	ldi	r25, 0x0B	; 11
    1962:	92 9f       	mul	r25, r18
    1964:	f0 01       	movw	r30, r0
    1966:	93 9f       	mul	r25, r19
    1968:	f0 0d       	add	r31, r0
    196a:	11 24       	eor	r1, r1
    196c:	e9 59       	subi	r30, 0x99	; 153
    196e:	f3 4f       	sbci	r31, 0xF3	; 243
    1970:	90 81       	ld	r25, Z
    1972:	99 23       	and	r25, r25
    1974:	91 f3       	breq	.-28     	; 0x195a <vTaskSwitchContext+0x5c>
    1976:	9b e0       	ldi	r25, 0x0B	; 11
    1978:	92 9f       	mul	r25, r18
    197a:	a0 01       	movw	r20, r0
    197c:	93 9f       	mul	r25, r19
    197e:	50 0d       	add	r21, r0
    1980:	11 24       	eor	r1, r1
    1982:	df 01       	movw	r26, r30
    1984:	01 80       	ldd	r0, Z+1	; 0x01
    1986:	f2 81       	ldd	r31, Z+2	; 0x02
    1988:	e0 2d       	mov	r30, r0
    198a:	04 80       	ldd	r0, Z+4	; 0x04
    198c:	f5 81       	ldd	r31, Z+5	; 0x05
    198e:	e0 2d       	mov	r30, r0
    1990:	12 96       	adiw	r26, 0x02	; 2
    1992:	fc 93       	st	X, r31
    1994:	ee 93       	st	-X, r30
    1996:	11 97       	sbiw	r26, 0x01	; 1
    1998:	46 59       	subi	r20, 0x96	; 150
    199a:	53 4f       	sbci	r21, 0xF3	; 243
    199c:	e4 17       	cp	r30, r20
    199e:	f5 07       	cpc	r31, r21
    19a0:	29 f4       	brne	.+10     	; 0x19ac <vTaskSwitchContext+0xae>
    19a2:	44 81       	ldd	r20, Z+4	; 0x04
    19a4:	55 81       	ldd	r21, Z+5	; 0x05
    19a6:	fd 01       	movw	r30, r26
    19a8:	52 83       	std	Z+2, r21	; 0x02
    19aa:	41 83       	std	Z+1, r20	; 0x01
    19ac:	9b e0       	ldi	r25, 0x0B	; 11
    19ae:	92 9f       	mul	r25, r18
    19b0:	f0 01       	movw	r30, r0
    19b2:	93 9f       	mul	r25, r19
    19b4:	f0 0d       	add	r31, r0
    19b6:	11 24       	eor	r1, r1
    19b8:	e9 59       	subi	r30, 0x99	; 153
    19ba:	f3 4f       	sbci	r31, 0xF3	; 243
    19bc:	01 80       	ldd	r0, Z+1	; 0x01
    19be:	f2 81       	ldd	r31, Z+2	; 0x02
    19c0:	e0 2d       	mov	r30, r0
    19c2:	20 85       	ldd	r18, Z+8	; 0x08
    19c4:	31 85       	ldd	r19, Z+9	; 0x09
    19c6:	30 93 d6 0c 	sts	0x0CD6, r19	; 0x800cd6 <pxCurrentTCB+0x1>
    19ca:	20 93 d5 0c 	sts	0x0CD5, r18	; 0x800cd5 <pxCurrentTCB>
    19ce:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <uxTopReadyPriority>
    19d2:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    19d6:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    19da:	87 a5       	ldd	r24, Z+47	; 0x2f
    19dc:	0c 94 bd 00 	jmp	0x17a	; 0x17a <task_switch_in>
    19e0:	08 95       	ret

000019e2 <vTaskPlaceOnEventList>:
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	6a 01       	movw	r12, r20
    19ec:	7b 01       	movw	r14, r22
    19ee:	60 91 d5 0c 	lds	r22, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    19f2:	70 91 d6 0c 	lds	r23, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    19f6:	62 5f       	subi	r22, 0xF2	; 242
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	0e 94 3a 02 	call	0x474	; 0x474 <vListInsert>
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	c7 01       	movw	r24, r14
    1a02:	b6 01       	movw	r22, r12
    1a04:	aa db       	rcall	.-2220   	; 0x115a <prvAddCurrentTaskToDelayedList>
    1a06:	ff 90       	pop	r15
    1a08:	ef 90       	pop	r14
    1a0a:	df 90       	pop	r13
    1a0c:	cf 90       	pop	r12
    1a0e:	08 95       	ret

00001a10 <vTaskPlaceOnEventListRestricted>:
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	fc 01       	movw	r30, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	ba 01       	movw	r22, r20
    1a1a:	a1 81       	ldd	r26, Z+1	; 0x01
    1a1c:	b2 81       	ldd	r27, Z+2	; 0x02
    1a1e:	c0 91 d5 0c 	lds	r28, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1a22:	d0 91 d6 0c 	lds	r29, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1a26:	bb 8b       	std	Y+19, r27	; 0x13
    1a28:	aa 8b       	std	Y+18, r26	; 0x12
    1a2a:	c0 91 d5 0c 	lds	r28, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1a2e:	d0 91 d6 0c 	lds	r29, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1a32:	16 96       	adiw	r26, 0x06	; 6
    1a34:	4d 91       	ld	r20, X+
    1a36:	5c 91       	ld	r21, X
    1a38:	17 97       	sbiw	r26, 0x07	; 7
    1a3a:	5d 8b       	std	Y+21, r21	; 0x15
    1a3c:	4c 8b       	std	Y+20, r20	; 0x14
    1a3e:	16 96       	adiw	r26, 0x06	; 6
    1a40:	cd 91       	ld	r28, X+
    1a42:	dc 91       	ld	r29, X
    1a44:	17 97       	sbiw	r26, 0x07	; 7
    1a46:	40 91 d5 0c 	lds	r20, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1a4a:	50 91 d6 0c 	lds	r21, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1a4e:	42 5f       	subi	r20, 0xF2	; 242
    1a50:	5f 4f       	sbci	r21, 0xFF	; 255
    1a52:	5d 83       	std	Y+5, r21	; 0x05
    1a54:	4c 83       	std	Y+4, r20	; 0x04
    1a56:	40 91 d5 0c 	lds	r20, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1a5a:	50 91 d6 0c 	lds	r21, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1a5e:	42 5f       	subi	r20, 0xF2	; 242
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255
    1a62:	17 96       	adiw	r26, 0x07	; 7
    1a64:	5c 93       	st	X, r21
    1a66:	4e 93       	st	-X, r20
    1a68:	16 97       	sbiw	r26, 0x06	; 6
    1a6a:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1a6e:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1a72:	59 96       	adiw	r26, 0x19	; 25
    1a74:	fc 93       	st	X, r31
    1a76:	ee 93       	st	-X, r30
    1a78:	58 97       	sbiw	r26, 0x18	; 24
    1a7a:	30 81       	ld	r19, Z
    1a7c:	3f 5f       	subi	r19, 0xFF	; 255
    1a7e:	30 83       	st	Z, r19
    1a80:	22 23       	and	r18, r18
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <vTaskPlaceOnEventListRestricted+0x7a>
    1a84:	6f ef       	ldi	r22, 0xFF	; 255
    1a86:	7f ef       	ldi	r23, 0xFF	; 255
    1a88:	cb 01       	movw	r24, r22
    1a8a:	42 2f       	mov	r20, r18
    1a8c:	66 db       	rcall	.-2356   	; 0x115a <prvAddCurrentTaskToDelayedList>
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	08 95       	ret

00001a94 <xTaskRemoveFromEventList>:
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	dc 01       	movw	r26, r24
    1a9a:	17 96       	adiw	r26, 0x07	; 7
    1a9c:	ed 91       	ld	r30, X+
    1a9e:	fc 91       	ld	r31, X
    1aa0:	18 97       	sbiw	r26, 0x08	; 8
    1aa2:	00 84       	ldd	r0, Z+8	; 0x08
    1aa4:	f1 85       	ldd	r31, Z+9	; 0x09
    1aa6:	e0 2d       	mov	r30, r0
    1aa8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1aaa:	b1 8d       	ldd	r27, Z+25	; 0x19
    1aac:	c2 89       	ldd	r28, Z+18	; 0x12
    1aae:	d3 89       	ldd	r29, Z+19	; 0x13
    1ab0:	84 89       	ldd	r24, Z+20	; 0x14
    1ab2:	95 89       	ldd	r25, Z+21	; 0x15
    1ab4:	9f 83       	std	Y+7, r25	; 0x07
    1ab6:	8e 83       	std	Y+6, r24	; 0x06
    1ab8:	c4 89       	ldd	r28, Z+20	; 0x14
    1aba:	d5 89       	ldd	r29, Z+21	; 0x15
    1abc:	82 89       	ldd	r24, Z+18	; 0x12
    1abe:	93 89       	ldd	r25, Z+19	; 0x13
    1ac0:	9d 83       	std	Y+5, r25	; 0x05
    1ac2:	8c 83       	std	Y+4, r24	; 0x04
    1ac4:	11 96       	adiw	r26, 0x01	; 1
    1ac6:	8d 91       	ld	r24, X+
    1ac8:	9c 91       	ld	r25, X
    1aca:	12 97       	sbiw	r26, 0x02	; 2
    1acc:	9f 01       	movw	r18, r30
    1ace:	22 5f       	subi	r18, 0xF2	; 242
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	82 17       	cp	r24, r18
    1ad4:	93 07       	cpc	r25, r19
    1ad6:	31 f4       	brne	.+12     	; 0x1ae4 <xTaskRemoveFromEventList+0x50>
    1ad8:	84 89       	ldd	r24, Z+20	; 0x14
    1ada:	95 89       	ldd	r25, Z+21	; 0x15
    1adc:	12 96       	adiw	r26, 0x02	; 2
    1ade:	9c 93       	st	X, r25
    1ae0:	8e 93       	st	-X, r24
    1ae2:	11 97       	sbiw	r26, 0x01	; 1
    1ae4:	11 8e       	std	Z+25, r1	; 0x19
    1ae6:	10 8e       	std	Z+24, r1	; 0x18
    1ae8:	8c 91       	ld	r24, X
    1aea:	81 50       	subi	r24, 0x01	; 1
    1aec:	8c 93       	st	X, r24
    1aee:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <uxSchedulerSuspended>
    1af2:	81 11       	cpse	r24, r1
    1af4:	52 c0       	rjmp	.+164    	; 0x1b9a <xTaskRemoveFromEventList+0x106>
    1af6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1af8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1afa:	c6 81       	ldd	r28, Z+6	; 0x06
    1afc:	d7 81       	ldd	r29, Z+7	; 0x07
    1afe:	80 85       	ldd	r24, Z+8	; 0x08
    1b00:	91 85       	ldd	r25, Z+9	; 0x09
    1b02:	9f 83       	std	Y+7, r25	; 0x07
    1b04:	8e 83       	std	Y+6, r24	; 0x06
    1b06:	c0 85       	ldd	r28, Z+8	; 0x08
    1b08:	d1 85       	ldd	r29, Z+9	; 0x09
    1b0a:	86 81       	ldd	r24, Z+6	; 0x06
    1b0c:	97 81       	ldd	r25, Z+7	; 0x07
    1b0e:	9d 83       	std	Y+5, r25	; 0x05
    1b10:	8c 83       	std	Y+4, r24	; 0x04
    1b12:	11 96       	adiw	r26, 0x01	; 1
    1b14:	8d 91       	ld	r24, X+
    1b16:	9c 91       	ld	r25, X
    1b18:	12 97       	sbiw	r26, 0x02	; 2
    1b1a:	9f 01       	movw	r18, r30
    1b1c:	2e 5f       	subi	r18, 0xFE	; 254
    1b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b20:	82 17       	cp	r24, r18
    1b22:	93 07       	cpc	r25, r19
    1b24:	31 f4       	brne	.+12     	; 0x1b32 <xTaskRemoveFromEventList+0x9e>
    1b26:	80 85       	ldd	r24, Z+8	; 0x08
    1b28:	91 85       	ldd	r25, Z+9	; 0x09
    1b2a:	12 96       	adiw	r26, 0x02	; 2
    1b2c:	9c 93       	st	X, r25
    1b2e:	8e 93       	st	-X, r24
    1b30:	11 97       	sbiw	r26, 0x01	; 1
    1b32:	15 86       	std	Z+13, r1	; 0x0d
    1b34:	14 86       	std	Z+12, r1	; 0x0c
    1b36:	8c 91       	ld	r24, X
    1b38:	81 50       	subi	r24, 0x01	; 1
    1b3a:	8c 93       	st	X, r24
    1b3c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b3e:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <uxTopReadyPriority>
    1b42:	8a 17       	cp	r24, r26
    1b44:	10 f4       	brcc	.+4      	; 0x1b4a <xTaskRemoveFromEventList+0xb6>
    1b46:	a0 93 25 0c 	sts	0x0C25, r26	; 0x800c25 <uxTopReadyPriority>
    1b4a:	8b e0       	ldi	r24, 0x0B	; 11
    1b4c:	8a 9f       	mul	r24, r26
    1b4e:	d0 01       	movw	r26, r0
    1b50:	11 24       	eor	r1, r1
    1b52:	a9 59       	subi	r26, 0x99	; 153
    1b54:	b3 4f       	sbci	r27, 0xF3	; 243
    1b56:	11 96       	adiw	r26, 0x01	; 1
    1b58:	0d 90       	ld	r0, X+
    1b5a:	bc 91       	ld	r27, X
    1b5c:	a0 2d       	mov	r26, r0
    1b5e:	b7 83       	std	Z+7, r27	; 0x07
    1b60:	a6 83       	std	Z+6, r26	; 0x06
    1b62:	16 96       	adiw	r26, 0x06	; 6
    1b64:	4d 91       	ld	r20, X+
    1b66:	5c 91       	ld	r21, X
    1b68:	17 97       	sbiw	r26, 0x07	; 7
    1b6a:	51 87       	std	Z+9, r21	; 0x09
    1b6c:	40 87       	std	Z+8, r20	; 0x08
    1b6e:	16 96       	adiw	r26, 0x06	; 6
    1b70:	cd 91       	ld	r28, X+
    1b72:	dc 91       	ld	r29, X
    1b74:	17 97       	sbiw	r26, 0x07	; 7
    1b76:	3d 83       	std	Y+5, r19	; 0x05
    1b78:	2c 83       	std	Y+4, r18	; 0x04
    1b7a:	17 96       	adiw	r26, 0x07	; 7
    1b7c:	3c 93       	st	X, r19
    1b7e:	2e 93       	st	-X, r18
    1b80:	16 97       	sbiw	r26, 0x06	; 6
    1b82:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b84:	8a 9f       	mul	r24, r26
    1b86:	d0 01       	movw	r26, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	a9 59       	subi	r26, 0x99	; 153
    1b8c:	b3 4f       	sbci	r27, 0xF3	; 243
    1b8e:	b5 87       	std	Z+13, r27	; 0x0d
    1b90:	a4 87       	std	Z+12, r26	; 0x0c
    1b92:	8c 91       	ld	r24, X
    1b94:	8f 5f       	subi	r24, 0xFF	; 255
    1b96:	8c 93       	st	X, r24
    1b98:	1c c0       	rjmp	.+56     	; 0x1bd2 <xTaskRemoveFromEventList+0x13e>
    1b9a:	42 e4       	ldi	r20, 0x42	; 66
    1b9c:	5c e0       	ldi	r21, 0x0C	; 12
    1b9e:	da 01       	movw	r26, r20
    1ba0:	11 96       	adiw	r26, 0x01	; 1
    1ba2:	cd 91       	ld	r28, X+
    1ba4:	dc 91       	ld	r29, X
    1ba6:	12 97       	sbiw	r26, 0x02	; 2
    1ba8:	d3 8b       	std	Z+19, r29	; 0x13
    1baa:	c2 8b       	std	Z+18, r28	; 0x12
    1bac:	8e 81       	ldd	r24, Y+6	; 0x06
    1bae:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb0:	95 8b       	std	Z+21, r25	; 0x15
    1bb2:	84 8b       	std	Z+20, r24	; 0x14
    1bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb8:	dc 01       	movw	r26, r24
    1bba:	15 96       	adiw	r26, 0x05	; 5
    1bbc:	3c 93       	st	X, r19
    1bbe:	2e 93       	st	-X, r18
    1bc0:	14 97       	sbiw	r26, 0x04	; 4
    1bc2:	3f 83       	std	Y+7, r19	; 0x07
    1bc4:	2e 83       	std	Y+6, r18	; 0x06
    1bc6:	51 8f       	std	Z+25, r21	; 0x19
    1bc8:	40 8f       	std	Z+24, r20	; 0x18
    1bca:	da 01       	movw	r26, r20
    1bcc:	8c 91       	ld	r24, X
    1bce:	8f 5f       	subi	r24, 0xFF	; 255
    1bd0:	8c 93       	st	X, r24
    1bd2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bd4:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1bd8:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1bdc:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bde:	89 17       	cp	r24, r25
    1be0:	20 f4       	brcc	.+8      	; 0x1bea <xTaskRemoveFromEventList+0x156>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <xYieldPending>
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <xTaskRemoveFromEventList+0x158>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	df 91       	pop	r29
    1bee:	cf 91       	pop	r28
    1bf0:	08 95       	ret

00001bf2 <vTaskInternalSetTimeOutState>:
    1bf2:	20 91 1e 0c 	lds	r18, 0x0C1E	; 0x800c1e <xNumOfOverflows>
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	20 83       	st	Z, r18
    1bfa:	40 91 26 0c 	lds	r20, 0x0C26	; 0x800c26 <xTickCount>
    1bfe:	50 91 27 0c 	lds	r21, 0x0C27	; 0x800c27 <xTickCount+0x1>
    1c02:	60 91 28 0c 	lds	r22, 0x0C28	; 0x800c28 <xTickCount+0x2>
    1c06:	70 91 29 0c 	lds	r23, 0x0C29	; 0x800c29 <xTickCount+0x3>
    1c0a:	41 83       	std	Z+1, r20	; 0x01
    1c0c:	52 83       	std	Z+2, r21	; 0x02
    1c0e:	63 83       	std	Z+3, r22	; 0x03
    1c10:	74 83       	std	Z+4, r23	; 0x04
    1c12:	08 95       	ret

00001c14 <xTaskCheckForTimeOut>:
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	fb 01       	movw	r30, r22
    1c2e:	0f b6       	in	r0, 0x3f	; 63
    1c30:	f8 94       	cli
    1c32:	0f 92       	push	r0
    1c34:	c0 90 26 0c 	lds	r12, 0x0C26	; 0x800c26 <xTickCount>
    1c38:	d0 90 27 0c 	lds	r13, 0x0C27	; 0x800c27 <xTickCount+0x1>
    1c3c:	e0 90 28 0c 	lds	r14, 0x0C28	; 0x800c28 <xTickCount+0x2>
    1c40:	f0 90 29 0c 	lds	r15, 0x0C29	; 0x800c29 <xTickCount+0x3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	0d 91       	ld	r16, X+
    1c4a:	1d 91       	ld	r17, X+
    1c4c:	2d 91       	ld	r18, X+
    1c4e:	3c 91       	ld	r19, X
    1c50:	14 97       	sbiw	r26, 0x04	; 4
    1c52:	46 01       	movw	r8, r12
    1c54:	57 01       	movw	r10, r14
    1c56:	80 1a       	sub	r8, r16
    1c58:	91 0a       	sbc	r9, r17
    1c5a:	a2 0a       	sbc	r10, r18
    1c5c:	b3 0a       	sbc	r11, r19
    1c5e:	40 81       	ld	r20, Z
    1c60:	51 81       	ldd	r21, Z+1	; 0x01
    1c62:	62 81       	ldd	r22, Z+2	; 0x02
    1c64:	73 81       	ldd	r23, Z+3	; 0x03
    1c66:	4f 3f       	cpi	r20, 0xFF	; 255
    1c68:	bf ef       	ldi	r27, 0xFF	; 255
    1c6a:	5b 07       	cpc	r21, r27
    1c6c:	6b 07       	cpc	r22, r27
    1c6e:	7b 07       	cpc	r23, r27
    1c70:	39 f1       	breq	.+78     	; 0x1cc0 <xTaskCheckForTimeOut+0xac>
    1c72:	ec 01       	movw	r28, r24
    1c74:	b8 81       	ld	r27, Y
    1c76:	a0 91 1e 0c 	lds	r26, 0x0C1E	; 0x800c1e <xNumOfOverflows>
    1c7a:	ba 17       	cp	r27, r26
    1c7c:	59 f0       	breq	.+22     	; 0x1c94 <xTaskCheckForTimeOut+0x80>
    1c7e:	c0 16       	cp	r12, r16
    1c80:	d1 06       	cpc	r13, r17
    1c82:	e2 06       	cpc	r14, r18
    1c84:	f3 06       	cpc	r15, r19
    1c86:	30 f0       	brcs	.+12     	; 0x1c94 <xTaskCheckForTimeOut+0x80>
    1c88:	10 82       	st	Z, r1
    1c8a:	11 82       	std	Z+1, r1	; 0x01
    1c8c:	12 82       	std	Z+2, r1	; 0x02
    1c8e:	13 82       	std	Z+3, r1	; 0x03
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	17 c0       	rjmp	.+46     	; 0x1cc2 <xTaskCheckForTimeOut+0xae>
    1c94:	84 16       	cp	r8, r20
    1c96:	95 06       	cpc	r9, r21
    1c98:	a6 06       	cpc	r10, r22
    1c9a:	b7 06       	cpc	r11, r23
    1c9c:	58 f4       	brcc	.+22     	; 0x1cb4 <xTaskCheckForTimeOut+0xa0>
    1c9e:	48 19       	sub	r20, r8
    1ca0:	59 09       	sbc	r21, r9
    1ca2:	6a 09       	sbc	r22, r10
    1ca4:	7b 09       	sbc	r23, r11
    1ca6:	40 83       	st	Z, r20
    1ca8:	51 83       	std	Z+1, r21	; 0x01
    1caa:	62 83       	std	Z+2, r22	; 0x02
    1cac:	73 83       	std	Z+3, r23	; 0x03
    1cae:	a1 df       	rcall	.-190    	; 0x1bf2 <vTaskInternalSetTimeOutState>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	07 c0       	rjmp	.+14     	; 0x1cc2 <xTaskCheckForTimeOut+0xae>
    1cb4:	10 82       	st	Z, r1
    1cb6:	11 82       	std	Z+1, r1	; 0x01
    1cb8:	12 82       	std	Z+2, r1	; 0x02
    1cba:	13 82       	std	Z+3, r1	; 0x03
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <xTaskCheckForTimeOut+0xae>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	bf 90       	pop	r11
    1cd8:	af 90       	pop	r10
    1cda:	9f 90       	pop	r9
    1cdc:	8f 90       	pop	r8
    1cde:	08 95       	ret

00001ce0 <vTaskMissedYield>:
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <xYieldPending>
    1ce6:	08 95       	ret

00001ce8 <xTaskGetSchedulerState>:
    1ce8:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <xSchedulerRunning>
    1cec:	88 23       	and	r24, r24
    1cee:	31 f0       	breq	.+12     	; 0x1cfc <xTaskGetSchedulerState+0x14>
    1cf0:	80 91 16 0c 	lds	r24, 0x0C16	; 0x800c16 <uxSchedulerSuspended>
    1cf4:	81 11       	cpse	r24, r1
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <xTaskGetSchedulerState+0x18>
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	08 95       	ret
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	08 95       	ret
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	08 95       	ret

00001d04 <xTaskPriorityInherit>:
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	89 2b       	or	r24, r25
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <xTaskPriorityInherit+0x10>
    1d12:	77 c0       	rjmp	.+238    	; 0x1e02 <xTaskPriorityInherit+0xfe>
    1d14:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d16:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1d1a:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1d1e:	5a 96       	adiw	r26, 0x1a	; 26
    1d20:	9c 91       	ld	r25, X
    1d22:	89 17       	cp	r24, r25
    1d24:	08 f0       	brcs	.+2      	; 0x1d28 <xTaskPriorityInherit+0x24>
    1d26:	63 c0       	rjmp	.+198    	; 0x1dee <xTaskPriorityInherit+0xea>
    1d28:	46 85       	ldd	r20, Z+14	; 0x0e
    1d2a:	57 85       	ldd	r21, Z+15	; 0x0f
    1d2c:	60 89       	ldd	r22, Z+16	; 0x10
    1d2e:	71 89       	ldd	r23, Z+17	; 0x11
    1d30:	77 23       	and	r23, r23
    1d32:	94 f0       	brlt	.+36     	; 0x1d58 <xTaskPriorityInherit+0x54>
    1d34:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1d38:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1d3c:	5a 96       	adiw	r26, 0x1a	; 26
    1d3e:	9c 91       	ld	r25, X
    1d40:	4a e0       	ldi	r20, 0x0A	; 10
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	70 e0       	ldi	r23, 0x00	; 0
    1d48:	49 1b       	sub	r20, r25
    1d4a:	51 09       	sbc	r21, r1
    1d4c:	61 09       	sbc	r22, r1
    1d4e:	71 09       	sbc	r23, r1
    1d50:	46 87       	std	Z+14, r20	; 0x0e
    1d52:	57 87       	std	Z+15, r21	; 0x0f
    1d54:	60 8b       	std	Z+16, r22	; 0x10
    1d56:	71 8b       	std	Z+17, r23	; 0x11
    1d58:	24 85       	ldd	r18, Z+12	; 0x0c
    1d5a:	35 85       	ldd	r19, Z+13	; 0x0d
    1d5c:	4b e0       	ldi	r20, 0x0B	; 11
    1d5e:	84 9f       	mul	r24, r20
    1d60:	c0 01       	movw	r24, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	89 59       	subi	r24, 0x99	; 153
    1d66:	93 4f       	sbci	r25, 0xF3	; 243
    1d68:	28 17       	cp	r18, r24
    1d6a:	39 07       	cpc	r19, r25
    1d6c:	b9 f5       	brne	.+110    	; 0x1ddc <xTaskPriorityInherit+0xd8>
    1d6e:	ef 01       	movw	r28, r30
    1d70:	8f 01       	movw	r16, r30
    1d72:	0e 5f       	subi	r16, 0xFE	; 254
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	c8 01       	movw	r24, r16
    1d78:	0e 94 77 02 	call	0x4ee	; 0x4ee <uxListRemove>
    1d7c:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1d80:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1d84:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d86:	ea 8f       	std	Y+26, r30	; 0x1a
    1d88:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <uxTopReadyPriority>
    1d8c:	8e 17       	cp	r24, r30
    1d8e:	10 f4       	brcc	.+4      	; 0x1d94 <xTaskPriorityInherit+0x90>
    1d90:	e0 93 25 0c 	sts	0x0C25, r30	; 0x800c25 <uxTopReadyPriority>
    1d94:	8b e0       	ldi	r24, 0x0B	; 11
    1d96:	8e 9f       	mul	r24, r30
    1d98:	f0 01       	movw	r30, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	e9 59       	subi	r30, 0x99	; 153
    1d9e:	f3 4f       	sbci	r31, 0xF3	; 243
    1da0:	01 80       	ldd	r0, Z+1	; 0x01
    1da2:	f2 81       	ldd	r31, Z+2	; 0x02
    1da4:	e0 2d       	mov	r30, r0
    1da6:	ff 83       	std	Y+7, r31	; 0x07
    1da8:	ee 83       	std	Y+6, r30	; 0x06
    1daa:	26 81       	ldd	r18, Z+6	; 0x06
    1dac:	37 81       	ldd	r19, Z+7	; 0x07
    1dae:	39 87       	std	Y+9, r19	; 0x09
    1db0:	28 87       	std	Y+8, r18	; 0x08
    1db2:	a6 81       	ldd	r26, Z+6	; 0x06
    1db4:	b7 81       	ldd	r27, Z+7	; 0x07
    1db6:	15 96       	adiw	r26, 0x05	; 5
    1db8:	1c 93       	st	X, r17
    1dba:	0e 93       	st	-X, r16
    1dbc:	14 97       	sbiw	r26, 0x04	; 4
    1dbe:	17 83       	std	Z+7, r17	; 0x07
    1dc0:	06 83       	std	Z+6, r16	; 0x06
    1dc2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1dc4:	8e 9f       	mul	r24, r30
    1dc6:	f0 01       	movw	r30, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	e9 59       	subi	r30, 0x99	; 153
    1dcc:	f3 4f       	sbci	r31, 0xF3	; 243
    1dce:	fd 87       	std	Y+13, r31	; 0x0d
    1dd0:	ec 87       	std	Y+12, r30	; 0x0c
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	80 83       	st	Z, r24
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	16 c0       	rjmp	.+44     	; 0x1e08 <xTaskPriorityInherit+0x104>
    1ddc:	a0 91 d5 0c 	lds	r26, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1de0:	b0 91 d6 0c 	lds	r27, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1de4:	5a 96       	adiw	r26, 0x1a	; 26
    1de6:	8c 91       	ld	r24, X
    1de8:	82 8f       	std	Z+26, r24	; 0x1a
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	0d c0       	rjmp	.+26     	; 0x1e08 <xTaskPriorityInherit+0x104>
    1dee:	95 a5       	ldd	r25, Z+45	; 0x2d
    1df0:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1df4:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1df8:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dfa:	98 17       	cp	r25, r24
    1dfc:	20 f0       	brcs	.+8      	; 0x1e06 <xTaskPriorityInherit+0x102>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	03 c0       	rjmp	.+6      	; 0x1e08 <xTaskPriorityInherit+0x104>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <xTaskPriorityInherit+0x104>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	08 95       	ret

00001e12 <xTaskPriorityDisinherit>:
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	89 2b       	or	r24, r25
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <xTaskPriorityDisinherit+0x10>
    1e20:	49 c0       	rjmp	.+146    	; 0x1eb4 <xTaskPriorityDisinherit+0xa2>
    1e22:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e24:	81 50       	subi	r24, 0x01	; 1
    1e26:	86 a7       	std	Z+46, r24	; 0x2e
    1e28:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e2a:	95 a5       	ldd	r25, Z+45	; 0x2d
    1e2c:	29 17       	cp	r18, r25
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <xTaskPriorityDisinherit+0x20>
    1e30:	43 c0       	rjmp	.+134    	; 0x1eb8 <xTaskPriorityDisinherit+0xa6>
    1e32:	81 11       	cpse	r24, r1
    1e34:	43 c0       	rjmp	.+134    	; 0x1ebc <xTaskPriorityDisinherit+0xaa>
    1e36:	ef 01       	movw	r28, r30
    1e38:	8f 01       	movw	r16, r30
    1e3a:	0e 5f       	subi	r16, 0xFE	; 254
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	c8 01       	movw	r24, r16
    1e40:	0e 94 77 02 	call	0x4ee	; 0x4ee <uxListRemove>
    1e44:	ed a5       	ldd	r30, Y+45	; 0x2d
    1e46:	ea 8f       	std	Y+26, r30	; 0x1a
    1e48:	8a e0       	ldi	r24, 0x0A	; 10
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 e0       	ldi	r26, 0x00	; 0
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	8e 1b       	sub	r24, r30
    1e52:	91 09       	sbc	r25, r1
    1e54:	a1 09       	sbc	r26, r1
    1e56:	b1 09       	sbc	r27, r1
    1e58:	8e 87       	std	Y+14, r24	; 0x0e
    1e5a:	9f 87       	std	Y+15, r25	; 0x0f
    1e5c:	a8 8b       	std	Y+16, r26	; 0x10
    1e5e:	b9 8b       	std	Y+17, r27	; 0x11
    1e60:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <uxTopReadyPriority>
    1e64:	8e 17       	cp	r24, r30
    1e66:	10 f4       	brcc	.+4      	; 0x1e6c <xTaskPriorityDisinherit+0x5a>
    1e68:	e0 93 25 0c 	sts	0x0C25, r30	; 0x800c25 <uxTopReadyPriority>
    1e6c:	8b e0       	ldi	r24, 0x0B	; 11
    1e6e:	8e 9f       	mul	r24, r30
    1e70:	f0 01       	movw	r30, r0
    1e72:	11 24       	eor	r1, r1
    1e74:	e9 59       	subi	r30, 0x99	; 153
    1e76:	f3 4f       	sbci	r31, 0xF3	; 243
    1e78:	01 80       	ldd	r0, Z+1	; 0x01
    1e7a:	f2 81       	ldd	r31, Z+2	; 0x02
    1e7c:	e0 2d       	mov	r30, r0
    1e7e:	ff 83       	std	Y+7, r31	; 0x07
    1e80:	ee 83       	std	Y+6, r30	; 0x06
    1e82:	26 81       	ldd	r18, Z+6	; 0x06
    1e84:	37 81       	ldd	r19, Z+7	; 0x07
    1e86:	39 87       	std	Y+9, r19	; 0x09
    1e88:	28 87       	std	Y+8, r18	; 0x08
    1e8a:	a6 81       	ldd	r26, Z+6	; 0x06
    1e8c:	b7 81       	ldd	r27, Z+7	; 0x07
    1e8e:	15 96       	adiw	r26, 0x05	; 5
    1e90:	1c 93       	st	X, r17
    1e92:	0e 93       	st	-X, r16
    1e94:	14 97       	sbiw	r26, 0x04	; 4
    1e96:	17 83       	std	Z+7, r17	; 0x07
    1e98:	06 83       	std	Z+6, r16	; 0x06
    1e9a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e9c:	8e 9f       	mul	r24, r30
    1e9e:	f0 01       	movw	r30, r0
    1ea0:	11 24       	eor	r1, r1
    1ea2:	e9 59       	subi	r30, 0x99	; 153
    1ea4:	f3 4f       	sbci	r31, 0xF3	; 243
    1ea6:	fd 87       	std	Y+13, r31	; 0x0d
    1ea8:	ec 87       	std	Y+12, r30	; 0x0c
    1eaa:	80 81       	ld	r24, Z
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	80 83       	st	Z, r24
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	05 c0       	rjmp	.+10     	; 0x1ebe <xTaskPriorityDisinherit+0xac>
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	03 c0       	rjmp	.+6      	; 0x1ebe <xTaskPriorityDisinherit+0xac>
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <xTaskPriorityDisinherit+0xac>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	1f 91       	pop	r17
    1ec4:	0f 91       	pop	r16
    1ec6:	08 95       	ret

00001ec8 <vTaskPriorityDisinheritAfterTimeout>:
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	89 2b       	or	r24, r25
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1ed6:	5a c0       	rjmp	.+180    	; 0x1f8c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1ed8:	85 a5       	ldd	r24, Z+45	; 0x2d
    1eda:	86 17       	cp	r24, r22
    1edc:	08 f4       	brcc	.+2      	; 0x1ee0 <vTaskPriorityDisinheritAfterTimeout+0x18>
    1ede:	86 2f       	mov	r24, r22
    1ee0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ee2:	89 17       	cp	r24, r25
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <vTaskPriorityDisinheritAfterTimeout+0x20>
    1ee6:	52 c0       	rjmp	.+164    	; 0x1f8c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1ee8:	26 a5       	ldd	r18, Z+46	; 0x2e
    1eea:	21 30       	cpi	r18, 0x01	; 1
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <vTaskPriorityDisinheritAfterTimeout+0x28>
    1eee:	4e c0       	rjmp	.+156    	; 0x1f8c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1ef0:	82 8f       	std	Z+26, r24	; 0x1a
    1ef2:	46 85       	ldd	r20, Z+14	; 0x0e
    1ef4:	57 85       	ldd	r21, Z+15	; 0x0f
    1ef6:	60 89       	ldd	r22, Z+16	; 0x10
    1ef8:	71 89       	ldd	r23, Z+17	; 0x11
    1efa:	77 23       	and	r23, r23
    1efc:	64 f0       	brlt	.+24     	; 0x1f16 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    1efe:	4a e0       	ldi	r20, 0x0A	; 10
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	60 e0       	ldi	r22, 0x00	; 0
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	48 1b       	sub	r20, r24
    1f08:	51 09       	sbc	r21, r1
    1f0a:	61 09       	sbc	r22, r1
    1f0c:	71 09       	sbc	r23, r1
    1f0e:	46 87       	std	Z+14, r20	; 0x0e
    1f10:	57 87       	std	Z+15, r21	; 0x0f
    1f12:	60 8b       	std	Z+16, r22	; 0x10
    1f14:	71 8b       	std	Z+17, r23	; 0x11
    1f16:	24 85       	ldd	r18, Z+12	; 0x0c
    1f18:	35 85       	ldd	r19, Z+13	; 0x0d
    1f1a:	4b e0       	ldi	r20, 0x0B	; 11
    1f1c:	94 9f       	mul	r25, r20
    1f1e:	c0 01       	movw	r24, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	89 59       	subi	r24, 0x99	; 153
    1f24:	93 4f       	sbci	r25, 0xF3	; 243
    1f26:	28 17       	cp	r18, r24
    1f28:	39 07       	cpc	r19, r25
    1f2a:	81 f5       	brne	.+96     	; 0x1f8c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1f2c:	ef 01       	movw	r28, r30
    1f2e:	8f 01       	movw	r16, r30
    1f30:	0e 5f       	subi	r16, 0xFE	; 254
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	c8 01       	movw	r24, r16
    1f36:	0e 94 77 02 	call	0x4ee	; 0x4ee <uxListRemove>
    1f3a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f3c:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <uxTopReadyPriority>
    1f40:	8e 17       	cp	r24, r30
    1f42:	10 f4       	brcc	.+4      	; 0x1f48 <vTaskPriorityDisinheritAfterTimeout+0x80>
    1f44:	e0 93 25 0c 	sts	0x0C25, r30	; 0x800c25 <uxTopReadyPriority>
    1f48:	8b e0       	ldi	r24, 0x0B	; 11
    1f4a:	8e 9f       	mul	r24, r30
    1f4c:	f0 01       	movw	r30, r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	e9 59       	subi	r30, 0x99	; 153
    1f52:	f3 4f       	sbci	r31, 0xF3	; 243
    1f54:	01 80       	ldd	r0, Z+1	; 0x01
    1f56:	f2 81       	ldd	r31, Z+2	; 0x02
    1f58:	e0 2d       	mov	r30, r0
    1f5a:	ff 83       	std	Y+7, r31	; 0x07
    1f5c:	ee 83       	std	Y+6, r30	; 0x06
    1f5e:	26 81       	ldd	r18, Z+6	; 0x06
    1f60:	37 81       	ldd	r19, Z+7	; 0x07
    1f62:	39 87       	std	Y+9, r19	; 0x09
    1f64:	28 87       	std	Y+8, r18	; 0x08
    1f66:	a6 81       	ldd	r26, Z+6	; 0x06
    1f68:	b7 81       	ldd	r27, Z+7	; 0x07
    1f6a:	15 96       	adiw	r26, 0x05	; 5
    1f6c:	1c 93       	st	X, r17
    1f6e:	0e 93       	st	-X, r16
    1f70:	14 97       	sbiw	r26, 0x04	; 4
    1f72:	17 83       	std	Z+7, r17	; 0x07
    1f74:	06 83       	std	Z+6, r16	; 0x06
    1f76:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f78:	8e 9f       	mul	r24, r30
    1f7a:	f0 01       	movw	r30, r0
    1f7c:	11 24       	eor	r1, r1
    1f7e:	e9 59       	subi	r30, 0x99	; 153
    1f80:	f3 4f       	sbci	r31, 0xF3	; 243
    1f82:	fd 87       	std	Y+13, r31	; 0x0d
    1f84:	ec 87       	std	Y+12, r30	; 0x0c
    1f86:	80 81       	ld	r24, Z
    1f88:	8f 5f       	subi	r24, 0xFF	; 255
    1f8a:	80 83       	st	Z, r24
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	08 95       	ret

00001f96 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1f96:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1f9a:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1f9e:	89 2b       	or	r24, r25
    1fa0:	39 f0       	breq	.+14     	; 0x1fb0 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1fa2:	e0 91 d5 0c 	lds	r30, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1fa6:	f0 91 d6 0c 	lds	r31, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    1faa:	86 a5       	ldd	r24, Z+46	; 0x2e
    1fac:	8f 5f       	subi	r24, 0xFF	; 255
    1fae:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    1fb0:	80 91 d5 0c 	lds	r24, 0x0CD5	; 0x800cd5 <pxCurrentTCB>
    1fb4:	90 91 d6 0c 	lds	r25, 0x0CD6	; 0x800cd6 <pxCurrentTCB+0x1>
    }
    1fb8:	08 95       	ret

00001fba <prvGetNextExpireTime>:
    1fba:	dc 01       	movw	r26, r24
    1fbc:	e0 91 e1 0c 	lds	r30, 0x0CE1	; 0x800ce1 <pxCurrentTimerList>
    1fc0:	f0 91 e2 0c 	lds	r31, 0x0CE2	; 0x800ce2 <pxCurrentTimerList+0x1>
    1fc4:	80 81       	ld	r24, Z
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	81 11       	cpse	r24, r1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9c 93       	st	X, r25
    1fce:	91 11       	cpse	r25, r1
    1fd0:	08 c0       	rjmp	.+16     	; 0x1fe2 <prvGetNextExpireTime+0x28>
    1fd2:	07 80       	ldd	r0, Z+7	; 0x07
    1fd4:	f0 85       	ldd	r31, Z+8	; 0x08
    1fd6:	e0 2d       	mov	r30, r0
    1fd8:	60 81       	ld	r22, Z
    1fda:	71 81       	ldd	r23, Z+1	; 0x01
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	08 95       	ret
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	70 e0       	ldi	r23, 0x00	; 0
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	08 95       	ret

00001fea <prvInsertTimerInActiveList>:
    1fea:	cf 92       	push	r12
    1fec:	df 92       	push	r13
    1fee:	ef 92       	push	r14
    1ff0:	ff 92       	push	r15
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	42 83       	std	Z+2, r20	; 0x02
    1ffa:	53 83       	std	Z+3, r21	; 0x03
    1ffc:	64 83       	std	Z+4, r22	; 0x04
    1ffe:	75 83       	std	Z+5, r23	; 0x05
    2000:	93 87       	std	Z+11, r25	; 0x0b
    2002:	82 87       	std	Z+10, r24	; 0x0a
    2004:	04 17       	cp	r16, r20
    2006:	15 07       	cpc	r17, r21
    2008:	26 07       	cpc	r18, r22
    200a:	37 07       	cpc	r19, r23
    200c:	c0 f0       	brcs	.+48     	; 0x203e <__DATA_REGION_LENGTH__+0x3e>
    200e:	0c 19       	sub	r16, r12
    2010:	1d 09       	sbc	r17, r13
    2012:	2e 09       	sbc	r18, r14
    2014:	3f 09       	sbc	r19, r15
    2016:	86 85       	ldd	r24, Z+14	; 0x0e
    2018:	97 85       	ldd	r25, Z+15	; 0x0f
    201a:	a0 89       	ldd	r26, Z+16	; 0x10
    201c:	b1 89       	ldd	r27, Z+17	; 0x11
    201e:	08 17       	cp	r16, r24
    2020:	19 07       	cpc	r17, r25
    2022:	2a 07       	cpc	r18, r26
    2024:	3b 07       	cpc	r19, r27
    2026:	00 f5       	brcc	.+64     	; 0x2068 <__DATA_REGION_LENGTH__+0x68>
    2028:	bf 01       	movw	r22, r30
    202a:	6e 5f       	subi	r22, 0xFE	; 254
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	80 91 df 0c 	lds	r24, 0x0CDF	; 0x800cdf <pxOverflowTimerList>
    2032:	90 91 e0 0c 	lds	r25, 0x0CE0	; 0x800ce0 <pxOverflowTimerList+0x1>
    2036:	0e 94 3a 02 	call	0x474	; 0x474 <vListInsert>
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	18 c0       	rjmp	.+48     	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    203e:	0c 15       	cp	r16, r12
    2040:	1d 05       	cpc	r17, r13
    2042:	2e 05       	cpc	r18, r14
    2044:	3f 05       	cpc	r19, r15
    2046:	28 f4       	brcc	.+10     	; 0x2052 <__DATA_REGION_LENGTH__+0x52>
    2048:	4c 15       	cp	r20, r12
    204a:	5d 05       	cpc	r21, r13
    204c:	6e 05       	cpc	r22, r14
    204e:	7f 05       	cpc	r23, r15
    2050:	68 f4       	brcc	.+26     	; 0x206c <__DATA_REGION_LENGTH__+0x6c>
    2052:	bf 01       	movw	r22, r30
    2054:	6e 5f       	subi	r22, 0xFE	; 254
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	80 91 e1 0c 	lds	r24, 0x0CE1	; 0x800ce1 <pxCurrentTimerList>
    205c:	90 91 e2 0c 	lds	r25, 0x0CE2	; 0x800ce2 <pxCurrentTimerList+0x1>
    2060:	0e 94 3a 02 	call	0x474	; 0x474 <vListInsert>
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	03 c0       	rjmp	.+6      	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	01 c0       	rjmp	.+2      	; 0x206e <__DATA_REGION_LENGTH__+0x6e>
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	df 90       	pop	r13
    2078:	cf 90       	pop	r12
    207a:	08 95       	ret

0000207c <prvCheckForValidListAndQueue>:
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	0f 92       	push	r0
    2082:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <xTimerQueue>
    2086:	90 91 de 0c 	lds	r25, 0x0CDE	; 0x800cde <xTimerQueue+0x1>
    208a:	89 2b       	or	r24, r25
    208c:	e9 f4       	brne	.+58     	; 0x20c8 <prvCheckForValidListAndQueue+0x4c>
    208e:	8e ee       	ldi	r24, 0xEE	; 238
    2090:	9c e0       	ldi	r25, 0x0C	; 12
    2092:	0e 94 25 02 	call	0x44a	; 0x44a <vListInitialise>
    2096:	83 ee       	ldi	r24, 0xE3	; 227
    2098:	9c e0       	ldi	r25, 0x0C	; 12
    209a:	0e 94 25 02 	call	0x44a	; 0x44a <vListInitialise>
    209e:	8e ee       	ldi	r24, 0xEE	; 238
    20a0:	9c e0       	ldi	r25, 0x0C	; 12
    20a2:	90 93 e2 0c 	sts	0x0CE2, r25	; 0x800ce2 <pxCurrentTimerList+0x1>
    20a6:	80 93 e1 0c 	sts	0x0CE1, r24	; 0x800ce1 <pxCurrentTimerList>
    20aa:	83 ee       	ldi	r24, 0xE3	; 227
    20ac:	9c e0       	ldi	r25, 0x0C	; 12
    20ae:	90 93 e0 0c 	sts	0x0CE0, r25	; 0x800ce0 <pxOverflowTimerList+0x1>
    20b2:	80 93 df 0c 	sts	0x0CDF, r24	; 0x800cdf <pxOverflowTimerList>
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	67 e0       	ldi	r22, 0x07	; 7
    20ba:	8a e0       	ldi	r24, 0x0A	; 10
    20bc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <xQueueGenericCreate>
    20c0:	90 93 de 0c 	sts	0x0CDE, r25	; 0x800cde <xTimerQueue+0x1>
    20c4:	80 93 dd 0c 	sts	0x0CDD, r24	; 0x800cdd <xTimerQueue>
    20c8:	0f 90       	pop	r0
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	08 95       	ret

000020ce <xTimerCreateTimerTask>:
    20ce:	ef 92       	push	r14
    20d0:	ff 92       	push	r15
    20d2:	0f 93       	push	r16
    20d4:	d3 df       	rcall	.-90     	; 0x207c <prvCheckForValidListAndQueue>
    20d6:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <xTimerQueue>
    20da:	90 91 de 0c 	lds	r25, 0x0CDE	; 0x800cde <xTimerQueue+0x1>
    20de:	89 2b       	or	r24, r25
    20e0:	89 f0       	breq	.+34     	; 0x2104 <xTimerCreateTimerTask+0x36>
    20e2:	0f 2e       	mov	r0, r31
    20e4:	fb ed       	ldi	r31, 0xDB	; 219
    20e6:	ef 2e       	mov	r14, r31
    20e8:	fc e0       	ldi	r31, 0x0C	; 12
    20ea:	ff 2e       	mov	r15, r31
    20ec:	f0 2d       	mov	r31, r0
    20ee:	03 e0       	ldi	r16, 0x03	; 3
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	40 ec       	ldi	r20, 0xC0	; 192
    20f6:	50 e0       	ldi	r21, 0x00	; 0
    20f8:	62 e2       	ldi	r22, 0x22	; 34
    20fa:	72 e0       	ldi	r23, 0x02	; 2
    20fc:	86 e8       	ldi	r24, 0x86	; 134
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	cb d8       	rcall	.-3690   	; 0x1298 <xTaskCreate>
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <xTimerCreateTimerTask+0x38>
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	08 95       	ret

0000210e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    210e:	8f 92       	push	r8
    2110:	9f 92       	push	r9
    2112:	af 92       	push	r10
    2114:	bf 92       	push	r11
    2116:	cf 92       	push	r12
    2118:	df 92       	push	r13
    211a:	ef 92       	push	r14
    211c:	ff 92       	push	r15
    211e:	0f 93       	push	r16
    2120:	1f 93       	push	r17
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	cd b7       	in	r28, 0x3d	; 61
    2128:	de b7       	in	r29, 0x3e	; 62
    212a:	27 97       	sbiw	r28, 0x07	; 7
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2136:	e0 91 dd 0c 	lds	r30, 0x0CDD	; 0x800cdd <xTimerQueue>
    213a:	f0 91 de 0c 	lds	r31, 0x0CDE	; 0x800cde <xTimerQueue+0x1>
    213e:	30 97       	sbiw	r30, 0x00	; 0
    2140:	81 f1       	breq	.+96     	; 0x21a2 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2142:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2144:	2a 83       	std	Y+2, r18	; 0x02
    2146:	3b 83       	std	Y+3, r19	; 0x03
    2148:	4c 83       	std	Y+4, r20	; 0x04
    214a:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    214c:	9f 83       	std	Y+7, r25	; 0x07
    214e:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2150:	66 30       	cpi	r22, 0x06	; 6
    2152:	f4 f4       	brge	.+60     	; 0x2190 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2154:	c9 dd       	rcall	.-1134   	; 0x1ce8 <xTaskGetSchedulerState>
    2156:	82 30       	cpi	r24, 0x02	; 2
    2158:	69 f4       	brne	.+26     	; 0x2174 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    215a:	00 e0       	ldi	r16, 0x00	; 0
    215c:	a7 01       	movw	r20, r14
    215e:	96 01       	movw	r18, r12
    2160:	be 01       	movw	r22, r28
    2162:	6f 5f       	subi	r22, 0xFF	; 255
    2164:	7f 4f       	sbci	r23, 0xFF	; 255
    2166:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <xTimerQueue>
    216a:	90 91 de 0c 	lds	r25, 0x0CDE	; 0x800cde <xTimerQueue+0x1>
    216e:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
    2172:	18 c0       	rjmp	.+48     	; 0x21a4 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2174:	00 e0       	ldi	r16, 0x00	; 0
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	a9 01       	movw	r20, r18
    217c:	be 01       	movw	r22, r28
    217e:	6f 5f       	subi	r22, 0xFF	; 255
    2180:	7f 4f       	sbci	r23, 0xFF	; 255
    2182:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <xTimerQueue>
    2186:	90 91 de 0c 	lds	r25, 0x0CDE	; 0x800cde <xTimerQueue+0x1>
    218a:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
    218e:	0a c0       	rjmp	.+20     	; 0x21a4 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	a8 01       	movw	r20, r16
    2194:	be 01       	movw	r22, r28
    2196:	6f 5f       	subi	r22, 0xFF	; 255
    2198:	7f 4f       	sbci	r23, 0xFF	; 255
    219a:	cf 01       	movw	r24, r30
    219c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <xQueueGenericSendFromISR>
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    21a2:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    21a4:	27 96       	adiw	r28, 0x07	; 7
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	df 90       	pop	r13
    21be:	cf 90       	pop	r12
    21c0:	bf 90       	pop	r11
    21c2:	af 90       	pop	r10
    21c4:	9f 90       	pop	r9
    21c6:	8f 90       	pop	r8
    21c8:	08 95       	ret

000021ca <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    21ca:	8f 92       	push	r8
    21cc:	9f 92       	push	r9
    21ce:	af 92       	push	r10
    21d0:	bf 92       	push	r11
    21d2:	cf 92       	push	r12
    21d4:	df 92       	push	r13
    21d6:	ef 92       	push	r14
    21d8:	ff 92       	push	r15
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    21e2:	3b c0       	rjmp	.+118    	; 0x225a <__stack+0x5b>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    21e4:	07 80       	ldd	r0, Z+7	; 0x07
    21e6:	f0 85       	ldd	r31, Z+8	; 0x08
    21e8:	e0 2d       	mov	r30, r0
    21ea:	80 80       	ld	r8, Z
    21ec:	91 80       	ldd	r9, Z+1	; 0x01
    21ee:	a2 80       	ldd	r10, Z+2	; 0x02
    21f0:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    21f2:	c0 85       	ldd	r28, Z+8	; 0x08
    21f4:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    21f6:	8e 01       	movw	r16, r28
    21f8:	0e 5f       	subi	r16, 0xFE	; 254
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	c8 01       	movw	r24, r16
    21fe:	0e 94 77 02 	call	0x4ee	; 0x4ee <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2202:	ec 89       	ldd	r30, Y+20	; 0x14
    2204:	fd 89       	ldd	r31, Y+21	; 0x15
    2206:	ce 01       	movw	r24, r28
    2208:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    220a:	8e 89       	ldd	r24, Y+22	; 0x16
    220c:	82 ff       	sbrs	r24, 2
    220e:	25 c0       	rjmp	.+74     	; 0x225a <__stack+0x5b>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2210:	8e 85       	ldd	r24, Y+14	; 0x0e
    2212:	9f 85       	ldd	r25, Y+15	; 0x0f
    2214:	a8 89       	ldd	r26, Y+16	; 0x10
    2216:	b9 89       	ldd	r27, Y+17	; 0x11
    2218:	88 0d       	add	r24, r8
    221a:	99 1d       	adc	r25, r9
    221c:	aa 1d       	adc	r26, r10
    221e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2220:	88 16       	cp	r8, r24
    2222:	99 06       	cpc	r9, r25
    2224:	aa 06       	cpc	r10, r26
    2226:	bb 06       	cpc	r11, r27
    2228:	70 f4       	brcc	.+28     	; 0x2246 <__stack+0x47>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    222a:	8a 83       	std	Y+2, r24	; 0x02
    222c:	9b 83       	std	Y+3, r25	; 0x03
    222e:	ac 83       	std	Y+4, r26	; 0x04
    2230:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2232:	db 87       	std	Y+11, r29	; 0x0b
    2234:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2236:	b8 01       	movw	r22, r16
    2238:	80 91 e1 0c 	lds	r24, 0x0CE1	; 0x800ce1 <pxCurrentTimerList>
    223c:	90 91 e2 0c 	lds	r25, 0x0CE2	; 0x800ce2 <pxCurrentTimerList+0x1>
    2240:	0e 94 3a 02 	call	0x474	; 0x474 <vListInsert>
    2244:	0a c0       	rjmp	.+20     	; 0x225a <__stack+0x5b>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2246:	c1 2c       	mov	r12, r1
    2248:	d1 2c       	mov	r13, r1
    224a:	76 01       	movw	r14, r12
    224c:	00 e0       	ldi	r16, 0x00	; 0
    224e:	10 e0       	ldi	r17, 0x00	; 0
    2250:	a5 01       	movw	r20, r10
    2252:	94 01       	movw	r18, r8
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	ce 01       	movw	r24, r28
    2258:	5a df       	rcall	.-332    	; 0x210e <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    225a:	e0 91 e1 0c 	lds	r30, 0x0CE1	; 0x800ce1 <pxCurrentTimerList>
    225e:	f0 91 e2 0c 	lds	r31, 0x0CE2	; 0x800ce2 <pxCurrentTimerList+0x1>
    2262:	80 81       	ld	r24, Z
    2264:	81 11       	cpse	r24, r1
    2266:	be cf       	rjmp	.-132    	; 0x21e4 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2268:	80 91 df 0c 	lds	r24, 0x0CDF	; 0x800cdf <pxOverflowTimerList>
    226c:	90 91 e0 0c 	lds	r25, 0x0CE0	; 0x800ce0 <pxOverflowTimerList+0x1>
    2270:	90 93 e2 0c 	sts	0x0CE2, r25	; 0x800ce2 <pxCurrentTimerList+0x1>
    2274:	80 93 e1 0c 	sts	0x0CE1, r24	; 0x800ce1 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2278:	f0 93 e0 0c 	sts	0x0CE0, r31	; 0x800ce0 <pxOverflowTimerList+0x1>
    227c:	e0 93 df 0c 	sts	0x0CDF, r30	; 0x800cdf <pxOverflowTimerList>
    }
    2280:	df 91       	pop	r29
    2282:	cf 91       	pop	r28
    2284:	1f 91       	pop	r17
    2286:	0f 91       	pop	r16
    2288:	ff 90       	pop	r15
    228a:	ef 90       	pop	r14
    228c:	df 90       	pop	r13
    228e:	cf 90       	pop	r12
    2290:	bf 90       	pop	r11
    2292:	af 90       	pop	r10
    2294:	9f 90       	pop	r9
    2296:	8f 90       	pop	r8
    2298:	08 95       	ret

0000229a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    22a8:	85 d8       	rcall	.-3830   	; 0x13b4 <xTaskGetTickCount>
    22aa:	6b 01       	movw	r12, r22
    22ac:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    22ae:	80 91 d7 0c 	lds	r24, 0x0CD7	; 0x800cd7 <xLastTime.2448>
    22b2:	90 91 d8 0c 	lds	r25, 0x0CD8	; 0x800cd8 <xLastTime.2448+0x1>
    22b6:	a0 91 d9 0c 	lds	r26, 0x0CD9	; 0x800cd9 <xLastTime.2448+0x2>
    22ba:	b0 91 da 0c 	lds	r27, 0x0CDA	; 0x800cda <xLastTime.2448+0x3>
    22be:	c8 16       	cp	r12, r24
    22c0:	d9 06       	cpc	r13, r25
    22c2:	ea 06       	cpc	r14, r26
    22c4:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    22c6:	20 f4       	brcc	.+8      	; 0x22d0 <prvSampleTimeNow+0x36>
    22c8:	80 df       	rcall	.-256    	; 0x21ca <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	88 83       	st	Y, r24
    22ce:	01 c0       	rjmp	.+2      	; 0x22d2 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    22d0:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    22d2:	c0 92 d7 0c 	sts	0x0CD7, r12	; 0x800cd7 <xLastTime.2448>
    22d6:	d0 92 d8 0c 	sts	0x0CD8, r13	; 0x800cd8 <xLastTime.2448+0x1>
    22da:	e0 92 d9 0c 	sts	0x0CD9, r14	; 0x800cd9 <xLastTime.2448+0x2>
    22de:	f0 92 da 0c 	sts	0x0CDA, r15	; 0x800cda <xLastTime.2448+0x3>

        return xTimeNow;
    }
    22e2:	c7 01       	movw	r24, r14
    22e4:	b6 01       	movw	r22, r12
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	ff 90       	pop	r15
    22ec:	ef 90       	pop	r14
    22ee:	df 90       	pop	r13
    22f0:	cf 90       	pop	r12
    22f2:	08 95       	ret

000022f4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    22f4:	4f 92       	push	r4
    22f6:	5f 92       	push	r5
    22f8:	6f 92       	push	r6
    22fa:	7f 92       	push	r7
    22fc:	8f 92       	push	r8
    22fe:	9f 92       	push	r9
    2300:	af 92       	push	r10
    2302:	bf 92       	push	r11
    2304:	cf 92       	push	r12
    2306:	df 92       	push	r13
    2308:	ef 92       	push	r14
    230a:	ff 92       	push	r15
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	4b 01       	movw	r8, r22
    2316:	5c 01       	movw	r10, r24
    2318:	29 01       	movw	r4, r18
    231a:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    231c:	e0 91 e1 0c 	lds	r30, 0x0CE1	; 0x800ce1 <pxCurrentTimerList>
    2320:	f0 91 e2 0c 	lds	r31, 0x0CE2	; 0x800ce2 <pxCurrentTimerList+0x1>
    2324:	07 80       	ldd	r0, Z+7	; 0x07
    2326:	f0 85       	ldd	r31, Z+8	; 0x08
    2328:	e0 2d       	mov	r30, r0
    232a:	c0 85       	ldd	r28, Z+8	; 0x08
    232c:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    232e:	ce 01       	movw	r24, r28
    2330:	02 96       	adiw	r24, 0x02	; 2
    2332:	0e 94 77 02 	call	0x4ee	; 0x4ee <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2336:	8e 89       	ldd	r24, Y+22	; 0x16
    2338:	82 ff       	sbrs	r24, 2
    233a:	1b c0       	rjmp	.+54     	; 0x2372 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    233c:	4e 85       	ldd	r20, Y+14	; 0x0e
    233e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2340:	68 89       	ldd	r22, Y+16	; 0x10
    2342:	79 89       	ldd	r23, Y+17	; 0x11
    2344:	48 0d       	add	r20, r8
    2346:	59 1d       	adc	r21, r9
    2348:	6a 1d       	adc	r22, r10
    234a:	7b 1d       	adc	r23, r11
    234c:	75 01       	movw	r14, r10
    234e:	64 01       	movw	r12, r8
    2350:	93 01       	movw	r18, r6
    2352:	82 01       	movw	r16, r4
    2354:	ce 01       	movw	r24, r28
    2356:	49 de       	rcall	.-878    	; 0x1fea <prvInsertTimerInActiveList>
    2358:	88 23       	and	r24, r24
    235a:	69 f0       	breq	.+26     	; 0x2376 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    235c:	c1 2c       	mov	r12, r1
    235e:	d1 2c       	mov	r13, r1
    2360:	76 01       	movw	r14, r12
    2362:	00 e0       	ldi	r16, 0x00	; 0
    2364:	10 e0       	ldi	r17, 0x00	; 0
    2366:	a5 01       	movw	r20, r10
    2368:	94 01       	movw	r18, r8
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	ce 01       	movw	r24, r28
    236e:	cf de       	rcall	.-610    	; 0x210e <xTimerGenericCommand>
    2370:	02 c0       	rjmp	.+4      	; 0x2376 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2372:	8e 7f       	andi	r24, 0xFE	; 254
    2374:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2376:	ec 89       	ldd	r30, Y+20	; 0x14
    2378:	fd 89       	ldd	r31, Y+21	; 0x15
    237a:	ce 01       	movw	r24, r28
    237c:	19 95       	eicall
    }
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	1f 91       	pop	r17
    2384:	0f 91       	pop	r16
    2386:	ff 90       	pop	r15
    2388:	ef 90       	pop	r14
    238a:	df 90       	pop	r13
    238c:	cf 90       	pop	r12
    238e:	bf 90       	pop	r11
    2390:	af 90       	pop	r10
    2392:	9f 90       	pop	r9
    2394:	8f 90       	pop	r8
    2396:	7f 90       	pop	r7
    2398:	6f 90       	pop	r6
    239a:	5f 90       	pop	r5
    239c:	4f 90       	pop	r4
    239e:	08 95       	ret

000023a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    23a0:	8f 92       	push	r8
    23a2:	9f 92       	push	r9
    23a4:	af 92       	push	r10
    23a6:	bf 92       	push	r11
    23a8:	cf 92       	push	r12
    23aa:	df 92       	push	r13
    23ac:	ef 92       	push	r14
    23ae:	ff 92       	push	r15
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	1f 92       	push	r1
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	6b 01       	movw	r12, r22
    23be:	7c 01       	movw	r14, r24
    23c0:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    23c2:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	67 df       	rcall	.-306    	; 0x229a <prvSampleTimeNow>
    23cc:	4b 01       	movw	r8, r22
    23ce:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	81 11       	cpse	r24, r1
    23d4:	2b c0       	rjmp	.+86     	; 0x242c <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    23d6:	11 11       	cpse	r17, r1
    23d8:	0c c0       	rjmp	.+24     	; 0x23f2 <prvProcessTimerOrBlockTask+0x52>
    23da:	8c 14       	cp	r8, r12
    23dc:	9d 04       	cpc	r9, r13
    23de:	ae 04       	cpc	r10, r14
    23e0:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    23e2:	38 f0       	brcs	.+14     	; 0x23f2 <prvProcessTimerOrBlockTask+0x52>
    23e4:	21 d9       	rcall	.-3518   	; 0x1628 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    23e6:	a5 01       	movw	r20, r10
    23e8:	94 01       	movw	r18, r8
    23ea:	c7 01       	movw	r24, r14
    23ec:	b6 01       	movw	r22, r12
    23ee:	82 df       	rcall	.-252    	; 0x22f4 <prvProcessExpiredTimer>
    23f0:	1e c0       	rjmp	.+60     	; 0x242e <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    23f2:	11 23       	and	r17, r17
    23f4:	41 f0       	breq	.+16     	; 0x2406 <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    23f6:	e0 91 df 0c 	lds	r30, 0x0CDF	; 0x800cdf <pxOverflowTimerList>
    23fa:	f0 91 e0 0c 	lds	r31, 0x0CE0	; 0x800ce0 <pxOverflowTimerList+0x1>
    23fe:	80 81       	ld	r24, Z
    2400:	11 e0       	ldi	r17, 0x01	; 1
    2402:	81 11       	cpse	r24, r1
    2404:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2406:	b7 01       	movw	r22, r14
    2408:	a6 01       	movw	r20, r12
    240a:	48 19       	sub	r20, r8
    240c:	59 09       	sbc	r21, r9
    240e:	6a 09       	sbc	r22, r10
    2410:	7b 09       	sbc	r23, r11
    2412:	21 2f       	mov	r18, r17
    2414:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <xTimerQueue>
    2418:	90 91 de 0c 	lds	r25, 0x0CDE	; 0x800cde <xTimerQueue+0x1>
    241c:	0e 94 27 07 	call	0xe4e	; 0xe4e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2420:	03 d9       	rcall	.-3578   	; 0x1628 <xTaskResumeAll>
    2422:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2424:	04 c0       	rjmp	.+8      	; 0x242e <prvProcessTimerOrBlockTask+0x8e>
    2426:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    242a:	01 c0       	rjmp	.+2      	; 0x242e <prvProcessTimerOrBlockTask+0x8e>
    242c:	fd d8       	rcall	.-3590   	; 0x1628 <xTaskResumeAll>
            }
        }
    }
    242e:	0f 90       	pop	r0
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	df 90       	pop	r13
    243c:	cf 90       	pop	r12
    243e:	bf 90       	pop	r11
    2440:	af 90       	pop	r10
    2442:	9f 90       	pop	r9
    2444:	8f 90       	pop	r8
    2446:	08 95       	ret

00002448 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2448:	af 92       	push	r10
    244a:	bf 92       	push	r11
    244c:	cf 92       	push	r12
    244e:	df 92       	push	r13
    2450:	ef 92       	push	r14
    2452:	ff 92       	push	r15
    2454:	0f 93       	push	r16
    2456:	1f 93       	push	r17
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	28 97       	sbiw	r28, 0x08	; 8
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    246c:	82 c0       	rjmp	.+260    	; 0x2572 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	88 23       	and	r24, r24
    2472:	0c f4       	brge	.+2      	; 0x2476 <prvProcessReceivedCommands+0x2e>
    2474:	7e c0       	rjmp	.+252    	; 0x2572 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2476:	ae 80       	ldd	r10, Y+6	; 0x06
    2478:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    247a:	d5 01       	movw	r26, r10
    247c:	1c 96       	adiw	r26, 0x0c	; 12
    247e:	8d 91       	ld	r24, X+
    2480:	9c 91       	ld	r25, X
    2482:	1d 97       	sbiw	r26, 0x0d	; 13
    2484:	89 2b       	or	r24, r25
    2486:	21 f0       	breq	.+8      	; 0x2490 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2488:	c5 01       	movw	r24, r10
    248a:	02 96       	adiw	r24, 0x02	; 2
    248c:	0e 94 77 02 	call	0x4ee	; 0x4ee <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2490:	ce 01       	movw	r24, r28
    2492:	08 96       	adiw	r24, 0x08	; 8
    2494:	02 df       	rcall	.-508    	; 0x229a <prvSampleTimeNow>
    2496:	8b 01       	movw	r16, r22
    2498:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    249a:	e9 81       	ldd	r30, Y+1	; 0x01
    249c:	0e 2e       	mov	r0, r30
    249e:	00 0c       	add	r0, r0
    24a0:	ff 0b       	sbc	r31, r31
    24a2:	ea 30       	cpi	r30, 0x0A	; 10
    24a4:	f1 05       	cpc	r31, r1
    24a6:	08 f0       	brcs	.+2      	; 0x24aa <prvProcessReceivedCommands+0x62>
    24a8:	64 c0       	rjmp	.+200    	; 0x2572 <prvProcessReceivedCommands+0x12a>
    24aa:	88 27       	eor	r24, r24
    24ac:	ee 58       	subi	r30, 0x8E	; 142
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	8f 4f       	sbci	r24, 0xFF	; 255
    24b2:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    24b6:	f5 01       	movw	r30, r10
    24b8:	86 89       	ldd	r24, Z+22	; 0x16
    24ba:	81 60       	ori	r24, 0x01	; 1
    24bc:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    24be:	ca 80       	ldd	r12, Y+2	; 0x02
    24c0:	db 80       	ldd	r13, Y+3	; 0x03
    24c2:	ec 80       	ldd	r14, Y+4	; 0x04
    24c4:	fd 80       	ldd	r15, Y+5	; 0x05
    24c6:	46 85       	ldd	r20, Z+14	; 0x0e
    24c8:	57 85       	ldd	r21, Z+15	; 0x0f
    24ca:	60 89       	ldd	r22, Z+16	; 0x10
    24cc:	71 89       	ldd	r23, Z+17	; 0x11
    24ce:	4c 0d       	add	r20, r12
    24d0:	5d 1d       	adc	r21, r13
    24d2:	6e 1d       	adc	r22, r14
    24d4:	7f 1d       	adc	r23, r15
    24d6:	c5 01       	movw	r24, r10
    24d8:	88 dd       	rcall	.-1264   	; 0x1fea <prvInsertTimerInActiveList>
    24da:	88 23       	and	r24, r24
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <prvProcessReceivedCommands+0x98>
    24de:	49 c0       	rjmp	.+146    	; 0x2572 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24e0:	d5 01       	movw	r26, r10
    24e2:	54 96       	adiw	r26, 0x14	; 20
    24e4:	ed 91       	ld	r30, X+
    24e6:	fc 91       	ld	r31, X
    24e8:	55 97       	sbiw	r26, 0x15	; 21
    24ea:	c5 01       	movw	r24, r10
    24ec:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    24ee:	f5 01       	movw	r30, r10
    24f0:	86 89       	ldd	r24, Z+22	; 0x16
    24f2:	82 ff       	sbrs	r24, 2
    24f4:	3e c0       	rjmp	.+124    	; 0x2572 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    24f6:	4a 81       	ldd	r20, Y+2	; 0x02
    24f8:	5b 81       	ldd	r21, Y+3	; 0x03
    24fa:	6c 81       	ldd	r22, Y+4	; 0x04
    24fc:	7d 81       	ldd	r23, Y+5	; 0x05
    24fe:	86 85       	ldd	r24, Z+14	; 0x0e
    2500:	97 85       	ldd	r25, Z+15	; 0x0f
    2502:	a0 89       	ldd	r26, Z+16	; 0x10
    2504:	b1 89       	ldd	r27, Z+17	; 0x11
    2506:	9a 01       	movw	r18, r20
    2508:	ab 01       	movw	r20, r22
    250a:	28 0f       	add	r18, r24
    250c:	39 1f       	adc	r19, r25
    250e:	4a 1f       	adc	r20, r26
    2510:	5b 1f       	adc	r21, r27
    2512:	c1 2c       	mov	r12, r1
    2514:	d1 2c       	mov	r13, r1
    2516:	76 01       	movw	r14, r12
    2518:	00 e0       	ldi	r16, 0x00	; 0
    251a:	10 e0       	ldi	r17, 0x00	; 0
    251c:	60 e0       	ldi	r22, 0x00	; 0
    251e:	c5 01       	movw	r24, r10
    2520:	f6 dd       	rcall	.-1044   	; 0x210e <xTimerGenericCommand>
    2522:	27 c0       	rjmp	.+78     	; 0x2572 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2524:	d5 01       	movw	r26, r10
    2526:	56 96       	adiw	r26, 0x16	; 22
    2528:	8c 91       	ld	r24, X
    252a:	56 97       	sbiw	r26, 0x16	; 22
    252c:	8e 7f       	andi	r24, 0xFE	; 254
    252e:	56 96       	adiw	r26, 0x16	; 22
    2530:	8c 93       	st	X, r24
                        break;
    2532:	1f c0       	rjmp	.+62     	; 0x2572 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2534:	f5 01       	movw	r30, r10
    2536:	86 89       	ldd	r24, Z+22	; 0x16
    2538:	81 60       	ori	r24, 0x01	; 1
    253a:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    253c:	4a 81       	ldd	r20, Y+2	; 0x02
    253e:	5b 81       	ldd	r21, Y+3	; 0x03
    2540:	6c 81       	ldd	r22, Y+4	; 0x04
    2542:	7d 81       	ldd	r23, Y+5	; 0x05
    2544:	46 87       	std	Z+14, r20	; 0x0e
    2546:	57 87       	std	Z+15, r21	; 0x0f
    2548:	60 8b       	std	Z+16, r22	; 0x10
    254a:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    254c:	40 0f       	add	r20, r16
    254e:	51 1f       	adc	r21, r17
    2550:	62 1f       	adc	r22, r18
    2552:	73 1f       	adc	r23, r19
    2554:	68 01       	movw	r12, r16
    2556:	79 01       	movw	r14, r18
    2558:	c5 01       	movw	r24, r10
    255a:	47 dd       	rcall	.-1394   	; 0x1fea <prvInsertTimerInActiveList>
                        break;
    255c:	0a c0       	rjmp	.+20     	; 0x2572 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    255e:	f5 01       	movw	r30, r10
    2560:	86 89       	ldd	r24, Z+22	; 0x16
    2562:	81 fd       	sbrc	r24, 1
    2564:	04 c0       	rjmp	.+8      	; 0x256e <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2566:	c5 01       	movw	r24, r10
    2568:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <vPortFree>
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    256e:	8e 7f       	andi	r24, 0xFE	; 254
    2570:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	a9 01       	movw	r20, r18
    2578:	be 01       	movw	r22, r28
    257a:	6f 5f       	subi	r22, 0xFF	; 255
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <xTimerQueue>
    2582:	90 91 de 0c 	lds	r25, 0x0CDE	; 0x800cde <xTimerQueue+0x1>
    2586:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <xQueueReceive>
    258a:	81 11       	cpse	r24, r1
    258c:	70 cf       	rjmp	.-288    	; 0x246e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    258e:	28 96       	adiw	r28, 0x08	; 8
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	df 91       	pop	r29
    259c:	cf 91       	pop	r28
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	ff 90       	pop	r15
    25a4:	ef 90       	pop	r14
    25a6:	df 90       	pop	r13
    25a8:	cf 90       	pop	r12
    25aa:	bf 90       	pop	r11
    25ac:	af 90       	pop	r10
    25ae:	08 95       	ret

000025b0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    25b0:	08 95       	ret

000025b2 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    25b2:	84 b1       	in	r24, 0x04	; 4
    25b4:	80 68       	ori	r24, 0x80	; 128
    25b6:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    25b8:	85 b1       	in	r24, 0x05	; 5
    25ba:	80 68       	ori	r24, 0x80	; 128
    25bc:	85 b9       	out	0x05, r24	; 5
    25be:	08 95       	ret

000025c0 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    25c0:	83 b1       	in	r24, 0x03	; 3
    25c2:	80 68       	ori	r24, 0x80	; 128
    25c4:	83 b9       	out	0x03, r24	; 3
    25c6:	08 95       	ret

000025c8 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    25c8:	f4 df       	rcall	.-24     	; 0x25b2 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25ca:	2f ef       	ldi	r18, 0xFF	; 255
    25cc:	80 e7       	ldi	r24, 0x70	; 112
    25ce:	92 e0       	ldi	r25, 0x02	; 2
    25d0:	21 50       	subi	r18, 0x01	; 1
    25d2:	80 40       	sbci	r24, 0x00	; 0
    25d4:	90 40       	sbci	r25, 0x00	; 0
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <vApplicationMallocFailedHook+0x8>
    25d8:	00 c0       	rjmp	.+0      	; 0x25da <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    25da:	00 00       	nop
    25dc:	f1 df       	rcall	.-30     	; 0x25c0 <prvBlinkMainLed>
    25de:	f5 cf       	rjmp	.-22     	; 0x25ca <vApplicationMallocFailedHook+0x2>

000025e0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    25e0:	e8 df       	rcall	.-48     	; 0x25b2 <prvSetMainLedOn>
    25e2:	2f ef       	ldi	r18, 0xFF	; 255
    25e4:	87 ea       	ldi	r24, 0xA7	; 167
    25e6:	91 e6       	ldi	r25, 0x61	; 97
    25e8:	21 50       	subi	r18, 0x01	; 1
    25ea:	80 40       	sbci	r24, 0x00	; 0
    25ec:	90 40       	sbci	r25, 0x00	; 0
    25ee:	e1 f7       	brne	.-8      	; 0x25e8 <vApplicationStackOverflowHook+0x8>
    25f0:	00 c0       	rjmp	.+0      	; 0x25f2 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    25f2:	00 00       	nop
    25f4:	e5 df       	rcall	.-54     	; 0x25c0 <prvBlinkMainLed>
    25f6:	f5 cf       	rjmp	.-22     	; 0x25e2 <vApplicationStackOverflowHook+0x2>

000025f8 <sendTask>:
}

char isSet(char value, int pos){
	char mask = 0x01 << pos;
	return value & mask;
}
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	1f 92       	push	r1
    25fe:	1f 92       	push	r1
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	64 e0       	ldi	r22, 0x04	; 4
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	69 d9       	rcall	.-3374   	; 0x18e0 <vTaskSetApplicationTaskTag>
    260e:	2f ef       	ldi	r18, 0xFF	; 255
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	a9 01       	movw	r20, r18
    2614:	be 01       	movw	r22, r28
    2616:	6f 5f       	subi	r22, 0xFF	; 255
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <sendQueue>
    261e:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <sendQueue+0x1>
    2622:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <xQueueReceive>
    2626:	88 23       	and	r24, r24
    2628:	91 f3       	breq	.-28     	; 0x260e <sendTask+0x16>
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	88 b9       	out	0x08, r24	; 8
    262e:	66 e0       	ldi	r22, 0x06	; 6
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	39 d9       	rcall	.-3470   	; 0x18aa <vTaskDelay>
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	88 b9       	out	0x08, r24	; 8
    263c:	66 e0       	ldi	r22, 0x06	; 6
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	32 d9       	rcall	.-3484   	; 0x18aa <vTaskDelay>
    2646:	18 b8       	out	0x08, r1	; 8
    2648:	66 e0       	ldi	r22, 0x06	; 6
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	2c d9       	rcall	.-3496   	; 0x18aa <vTaskDelay>
    2652:	dd cf       	rjmp	.-70     	; 0x260e <sendTask+0x16>

00002654 <printTask>:
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	1f 92       	push	r1
    265a:	1f 92       	push	r1
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	68 e0       	ldi	r22, 0x08	; 8
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	3b d9       	rcall	.-3466   	; 0x18e0 <vTaskSetApplicationTaskTag>
    266a:	2f ef       	ldi	r18, 0xFF	; 255
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	a9 01       	movw	r20, r18
    2670:	be 01       	movw	r22, r28
    2672:	6f 5f       	subi	r22, 0xFF	; 255
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <receiveQueue>
    267a:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <receiveQueue+0x1>
    267e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <xQueueReceive>
    2682:	88 23       	and	r24, r24
    2684:	91 f3       	breq	.-28     	; 0x266a <printTask+0x16>
    2686:	4f ef       	ldi	r20, 0xFF	; 255
    2688:	5f ef       	ldi	r21, 0xFF	; 255
    268a:	ba 01       	movw	r22, r20
    268c:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <printSemaphore>
    2690:	90 91 08 0d 	lds	r25, 0x0D08	; 0x800d08 <printSemaphore+0x1>
    2694:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <xQueueSemaphoreTake>
    2698:	88 23       	and	r24, r24
    269a:	39 f3       	breq	.-50     	; 0x266a <printTask+0x16>
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <putchar>
    26a4:	00 e0       	ldi	r16, 0x00	; 0
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	a9 01       	movw	r20, r18
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <printSemaphore>
    26b4:	90 91 08 0d 	lds	r25, 0x0D08	; 0x800d08 <printSemaphore+0x1>
    26b8:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
    26bc:	d6 cf       	rjmp	.-84     	; 0x266a <printTask+0x16>

000026be <bitAtPos>:

// returns a new char with the first bit set to the value of the bit in position pos of the data parameter
char bitAtPos(char data, int pos){
	char mask = 0x01;
	return (data >> (pos)) & mask;
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <bitAtPos+0x8>
    26c2:	95 95       	asr	r25
    26c4:	87 95       	ror	r24
    26c6:	6a 95       	dec	r22
    26c8:	e2 f7       	brpl	.-8      	; 0x26c2 <bitAtPos+0x4>
}
    26ca:	81 70       	andi	r24, 0x01	; 1
    26cc:	08 95       	ret

000026ce <getHammingBits>:

// returns a char with the least 4 bits as the hamming bits of the data
char getHammingBits(char data){
    26ce:	bf 92       	push	r11
    26d0:	cf 92       	push	r12
    26d2:	df 92       	push	r13
    26d4:	ef 92       	push	r14
    26d6:	ff 92       	push	r15
    26d8:	0f 93       	push	r16
    26da:	1f 93       	push	r17
    26dc:	cf 93       	push	r28
    26de:	df 93       	push	r29
    26e0:	c8 2e       	mov	r12, r24
	char bit1 = bitAtPos(data, 0) ^ bitAtPos(data, 1) ^ bitAtPos(data, 3) ^ bitAtPos(data, 4) ^ bitAtPos(data, 6);
    26e2:	60 e0       	ldi	r22, 0x00	; 0
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	eb df       	rcall	.-42     	; 0x26be <bitAtPos>
    26e8:	c8 2f       	mov	r28, r24
    26ea:	61 e0       	ldi	r22, 0x01	; 1
    26ec:	70 e0       	ldi	r23, 0x00	; 0
    26ee:	8c 2d       	mov	r24, r12
    26f0:	e6 df       	rcall	.-52     	; 0x26be <bitAtPos>
    26f2:	b8 2e       	mov	r11, r24
    26f4:	1c 2f       	mov	r17, r28
    26f6:	18 27       	eor	r17, r24
    26f8:	63 e0       	ldi	r22, 0x03	; 3
    26fa:	70 e0       	ldi	r23, 0x00	; 0
    26fc:	8c 2d       	mov	r24, r12
    26fe:	df df       	rcall	.-66     	; 0x26be <bitAtPos>
    2700:	d8 2f       	mov	r29, r24
    2702:	18 27       	eor	r17, r24
    2704:	64 e0       	ldi	r22, 0x04	; 4
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	8c 2d       	mov	r24, r12
    270a:	d9 df       	rcall	.-78     	; 0x26be <bitAtPos>
    270c:	d8 2e       	mov	r13, r24
    270e:	18 27       	eor	r17, r24
    2710:	66 e0       	ldi	r22, 0x06	; 6
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	8c 2d       	mov	r24, r12
    2716:	d3 df       	rcall	.-90     	; 0x26be <bitAtPos>
    2718:	08 2f       	mov	r16, r24
    271a:	18 27       	eor	r17, r24
	char bit2 = (bitAtPos(data, 0) ^ bitAtPos(data, 2) ^ bitAtPos(data, 3) ^ bitAtPos(data, 5) ^ bitAtPos(data, 6)) << 1;
    271c:	62 e0       	ldi	r22, 0x02	; 2
    271e:	70 e0       	ldi	r23, 0x00	; 0
    2720:	8c 2d       	mov	r24, r12
    2722:	cd df       	rcall	.-102    	; 0x26be <bitAtPos>
    2724:	e8 2e       	mov	r14, r24
    2726:	c8 27       	eor	r28, r24
    2728:	cd 27       	eor	r28, r29
    272a:	65 e0       	ldi	r22, 0x05	; 5
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	8c 2d       	mov	r24, r12
    2730:	c6 df       	rcall	.-116    	; 0x26be <bitAtPos>
    2732:	f8 2e       	mov	r15, r24
    2734:	c8 27       	eor	r28, r24
    2736:	c0 27       	eor	r28, r16
    2738:	cc 0f       	add	r28, r28
	char bit3 = (bitAtPos(data, 1) ^ bitAtPos(data, 2) ^ bitAtPos(data, 3) ^ bitAtPos(data, 7)) << 2;
    273a:	eb 24       	eor	r14, r11
    273c:	de 25       	eor	r29, r14
    273e:	67 e0       	ldi	r22, 0x07	; 7
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	8c 2d       	mov	r24, r12
    2744:	bc df       	rcall	.-136    	; 0x26be <bitAtPos>
    2746:	d8 27       	eor	r29, r24
    2748:	dd 0f       	add	r29, r29
    274a:	dd 0f       	add	r29, r29
    274c:	fd 24       	eor	r15, r13
	char bit4 = (bitAtPos(data, 4) ^ bitAtPos(data, 5) ^ bitAtPos(data, 6) ^ bitAtPos(data, 7)) << 3;
    274e:	0f 25       	eor	r16, r15
    2750:	80 27       	eor	r24, r16
    2752:	88 0f       	add	r24, r24
    2754:	88 0f       	add	r24, r24
    2756:	88 0f       	add	r24, r24
    2758:	d8 2b       	or	r29, r24
	return bit4 | bit3 | bit2 | bit1;
    275a:	8d 2f       	mov	r24, r29
    275c:	8c 2b       	or	r24, r28
    275e:	81 2b       	or	r24, r17
}
    2760:	df 91       	pop	r29
    2762:	cf 91       	pop	r28
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	ff 90       	pop	r15
    276a:	ef 90       	pop	r14
    276c:	df 90       	pop	r13
    276e:	cf 90       	pop	r12
    2770:	bf 90       	pop	r11
    2772:	08 95       	ret

00002774 <receiveTask>:
    2774:	cf 93       	push	r28
	initialiseSystem();
	vTaskStartScheduler();
}

void receiveTask (void * pvParameters)
{
    2776:	df 93       	push	r29
    2778:	1f 92       	push	r1
    277a:	1f 92       	push	r1
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
	//picoscope
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	vTaskSetApplicationTaskTag(NULL, (void *) 2);
    2780:	62 e0       	ldi	r22, 0x02	; 2
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	ab d8       	rcall	.-3754   	; 0x18e0 <vTaskSetApplicationTaskTag>
	
	struct Message message;
	
	for(;;)
	{
		vTaskDelay(pdMS_TO_TICKS(17));
    278a:	61 e0       	ldi	r22, 0x01	; 1
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	8b d8       	rcall	.-3818   	; 0x18aa <vTaskDelay>
		
		if ('\0' != PINA){
    2794:	80 b1       	in	r24, 0x00	; 0
    2796:	88 23       	and	r24, r24
    2798:	c1 f3       	breq	.-16     	; 0x278a <receiveTask+0x16>
			message.data = PINA;
    279a:	80 b1       	in	r24, 0x00	; 0
    279c:	89 83       	std	Y+1, r24	; 0x01
			vTaskDelay(pdMS_TO_TICKS(123));
    279e:	67 e0       	ldi	r22, 0x07	; 7
    27a0:	70 e0       	ldi	r23, 0x00	; 0
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	81 d8       	rcall	.-3838   	; 0x18aa <vTaskDelay>
			message.hammingCode = PINA;
    27a8:	10 b1       	in	r17, 0x00	; 0
    27aa:	1a 83       	std	Y+2, r17	; 0x02
		
			if (message.hammingCode == getHammingBits(message.data))
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	8f df       	rcall	.-226    	; 0x26ce <getHammingBits>
    27b0:	18 13       	cpse	r17, r24
    27b2:	0e c0       	rjmp	.+28     	; 0x27d0 <receiveTask+0x5c>
			{
				xQueueSend(receiveQueue,(void*)&message, portMAX_DELAY);
    27b4:	00 e0       	ldi	r16, 0x00	; 0
    27b6:	2f ef       	ldi	r18, 0xFF	; 255
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	a9 01       	movw	r20, r18
    27bc:	be 01       	movw	r22, r28
    27be:	6f 5f       	subi	r22, 0xFF	; 255
    27c0:	7f 4f       	sbci	r23, 0xFF	; 255
    27c2:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <receiveQueue>
    27c6:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <receiveQueue+0x1>
    27ca:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
    27ce:	45 c0       	rjmp	.+138    	; 0x285a <receiveTask+0xe6>
			}
			else{
				message.data = '<';
    27d0:	8c e3       	ldi	r24, 0x3C	; 60
    27d2:	89 83       	std	Y+1, r24	; 0x01
				xQueueSend(receiveQueue,(void*)&message, portMAX_DELAY);
    27d4:	00 e0       	ldi	r16, 0x00	; 0
    27d6:	2f ef       	ldi	r18, 0xFF	; 255
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	a9 01       	movw	r20, r18
    27dc:	be 01       	movw	r22, r28
    27de:	6f 5f       	subi	r22, 0xFF	; 255
    27e0:	7f 4f       	sbci	r23, 0xFF	; 255
    27e2:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <receiveQueue>
    27e6:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <receiveQueue+0x1>
    27ea:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
				
				message.data = 'E';
    27ee:	85 e4       	ldi	r24, 0x45	; 69
    27f0:	89 83       	std	Y+1, r24	; 0x01
				xQueueSend(receiveQueue,(void*)&message, portMAX_DELAY);
    27f2:	2f ef       	ldi	r18, 0xFF	; 255
    27f4:	3f ef       	ldi	r19, 0xFF	; 255
    27f6:	a9 01       	movw	r20, r18
    27f8:	be 01       	movw	r22, r28
    27fa:	6f 5f       	subi	r22, 0xFF	; 255
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <receiveQueue>
    2802:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <receiveQueue+0x1>
    2806:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
				
				message.data = 'R';
    280a:	82 e5       	ldi	r24, 0x52	; 82
    280c:	89 83       	std	Y+1, r24	; 0x01
				xQueueSend(receiveQueue,(void*)&message, portMAX_DELAY);
    280e:	2f ef       	ldi	r18, 0xFF	; 255
    2810:	3f ef       	ldi	r19, 0xFF	; 255
    2812:	a9 01       	movw	r20, r18
    2814:	be 01       	movw	r22, r28
    2816:	6f 5f       	subi	r22, 0xFF	; 255
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <receiveQueue>
    281e:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <receiveQueue+0x1>
    2822:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
				xQueueSend(receiveQueue,(void*)&message, portMAX_DELAY);
    2826:	2f ef       	ldi	r18, 0xFF	; 255
    2828:	3f ef       	ldi	r19, 0xFF	; 255
    282a:	a9 01       	movw	r20, r18
    282c:	be 01       	movw	r22, r28
    282e:	6f 5f       	subi	r22, 0xFF	; 255
    2830:	7f 4f       	sbci	r23, 0xFF	; 255
    2832:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <receiveQueue>
    2836:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <receiveQueue+0x1>
    283a:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
				message.data = '>';
    283e:	8e e3       	ldi	r24, 0x3E	; 62
    2840:	89 83       	std	Y+1, r24	; 0x01
				xQueueSend(receiveQueue,(void*)&message, portMAX_DELAY);
    2842:	2f ef       	ldi	r18, 0xFF	; 255
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	a9 01       	movw	r20, r18
    2848:	be 01       	movw	r22, r28
    284a:	6f 5f       	subi	r22, 0xFF	; 255
    284c:	7f 4f       	sbci	r23, 0xFF	; 255
    284e:	80 91 05 0d 	lds	r24, 0x0D05	; 0x800d05 <receiveQueue>
    2852:	90 91 06 0d 	lds	r25, 0x0D06	; 0x800d06 <receiveQueue+0x1>
    2856:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
			}
		
			vTaskDelay(pdMS_TO_TICKS(123));
    285a:	67 e0       	ldi	r22, 0x07	; 7
    285c:	70 e0       	ldi	r23, 0x00	; 0
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	23 d8       	rcall	.-4026   	; 0x18aa <vTaskDelay>
    2864:	92 cf       	rjmp	.-220    	; 0x278a <receiveTask+0x16>

00002866 <userInputTask>:
		 }
	}
}

void userInputTask(void * pvParameters)
{
    2866:	cf 93       	push	r28
    2868:	df 93       	push	r29
    286a:	00 d0       	rcall	.+0      	; 0x286c <userInputTask+0x6>
    286c:	00 d0       	rcall	.+0      	; 0x286e <userInputTask+0x8>
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
	//picoscope
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	vTaskSetApplicationTaskTag(NULL, (void *) 6);
    2872:	66 e0       	ldi	r22, 0x06	; 6
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	32 d8       	rcall	.-3996   	; 0x18e0 <vTaskSetApplicationTaskTag>
	#endif
	
	TickType_t last_wake_time = xTaskGetTickCount();
    287c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <xTaskGetTickCount>
    2880:	69 83       	std	Y+1, r22	; 0x01
    2882:	7a 83       	std	Y+2, r23	; 0x02
    2884:	8b 83       	std	Y+3, r24	; 0x03
    2886:	9c 83       	std	Y+4, r25	; 0x04
	char i;
	struct Message message;
	 
	for(;;)
	{
		xTaskDelayUntil(&last_wake_time, xFrequency);
    2888:	4d e1       	ldi	r20, 0x1D	; 29
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	70 e0       	ldi	r23, 0x00	; 0
    2890:	ce 01       	movw	r24, r28
    2892:	01 96       	adiw	r24, 0x01	; 1
    2894:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <xTaskDelayUntil>
		
		while (stdio_inputIsWaiting())
    2898:	15 c0       	rjmp	.+42     	; 0x28c4 <userInputTask+0x5e>
		{
			i = getchar();
    289a:	80 91 0d 0d 	lds	r24, 0x0D0D	; 0x800d0d <__iob>
    289e:	90 91 0e 0d 	lds	r25, 0x0D0E	; 0x800d0e <__iob+0x1>
    28a2:	6f d7       	rcall	.+3806   	; 0x3782 <fgetc>
			message.data = i;
			message.hammingCode = getHammingBits(i);
    28a4:	8d 83       	std	Y+5, r24	; 0x05
    28a6:	13 df       	rcall	.-474    	; 0x26ce <getHammingBits>
    28a8:	8e 83       	std	Y+6, r24	; 0x06
			xQueueSend(sendQueue,(void*)&message, portMAX_DELAY);
    28aa:	00 e0       	ldi	r16, 0x00	; 0
    28ac:	2f ef       	ldi	r18, 0xFF	; 255
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	a9 01       	movw	r20, r18
    28b2:	be 01       	movw	r22, r28
    28b4:	6b 5f       	subi	r22, 0xFB	; 251
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	80 91 03 0d 	lds	r24, 0x0D03	; 0x800d03 <sendQueue>
    28bc:	90 91 04 0d 	lds	r25, 0x0D04	; 0x800d04 <sendQueue+0x1>
    28c0:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
	 
	for(;;)
	{
		xTaskDelayUntil(&last_wake_time, xFrequency);
		
		while (stdio_inputIsWaiting())
    28c4:	b5 d0       	rcall	.+362    	; 0x2a30 <stdio_inputIsWaiting>
    28c6:	81 11       	cpse	r24, r1
    28c8:	e8 cf       	rjmp	.-48     	; 0x289a <userInputTask+0x34>
    28ca:	de cf       	rjmp	.-68     	; 0x2888 <userInputTask+0x22>

000028cc <initialiseSystem>:
	char bit4 = (bitAtPos(data, 4) ^ bitAtPos(data, 5) ^ bitAtPos(data, 6) ^ bitAtPos(data, 7)) << 3;
	return bit4 | bit3 | bit2 | bit1;
}
 
void initialiseSystem()
{
    28cc:	ef 92       	push	r14
    28ce:	ff 92       	push	r15
    28d0:	0f 93       	push	r16
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	84 d0       	rcall	.+264    	; 0x29de <stdio_initialise>
	trace_init();
    28d6:	0e 94 b7 00 	call	0x16e	; 0x16e <trace_init>
	
	//Port initialization
	//PortA all data IN
	DDRA = 0b00000000;
    28da:	11 b8       	out	0x01, r1	; 1
	 
	//PortC all data OUT and set to zero
	DDRC = 0b11111111;
    28dc:	8f ef       	ldi	r24, 0xFF	; 255
    28de:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
    28e0:	18 b8       	out	0x08, r1	; 8
	 
	if (NULL == printSemaphore)  // Check to confirm that the Semaphore has not already been created.
    28e2:	80 91 07 0d 	lds	r24, 0x0D07	; 0x800d07 <printSemaphore>
    28e6:	90 91 08 0d 	lds	r25, 0x0D08	; 0x800d08 <printSemaphore+0x1>
    28ea:	89 2b       	or	r24, r25
    28ec:	89 f4       	brne	.+34     	; 0x2910 <initialiseSystem+0x44>
	{
		printSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	0e 94 aa 05 	call	0xb54	; 0xb54 <xQueueCreateMutex>
    28f4:	90 93 08 0d 	sts	0x0D08, r25	; 0x800d08 <printSemaphore+0x1>
    28f8:	80 93 07 0d 	sts	0x0D07, r24	; 0x800d07 <printSemaphore>
		if (NULL != printSemaphore)
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	41 f0       	breq	.+16     	; 0x2910 <initialiseSystem+0x44>
		{
			xSemaphoreGive( ( printSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2900:	00 e0       	ldi	r16, 0x00	; 0
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	a9 01       	movw	r20, r18
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	70 e0       	ldi	r23, 0x00	; 0
    290c:	0e 94 0a 05 	call	0xa14	; 0xa14 <xQueueGenericSend>
		}
	}
	 
	//Task initialization
	xTaskCreate(
    2910:	e1 2c       	mov	r14, r1
    2912:	f1 2c       	mov	r15, r1
    2914:	04 e0       	ldi	r16, 0x04	; 4
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 ec       	ldi	r20, 0xC0	; 192
    291c:	50 e0       	ldi	r21, 0x00	; 0
    291e:	6a e2       	ldi	r22, 0x2A	; 42
    2920:	72 e0       	ldi	r23, 0x02	; 2
    2922:	8a eb       	ldi	r24, 0xBA	; 186
    2924:	93 e1       	ldi	r25, 0x13	; 19
    2926:	0e 94 4c 09 	call	0x1298	; 0x1298 <xTaskCreate>
	NULL,
	4,
	NULL
	);
	
	xTaskCreate(
    292a:	03 e0       	ldi	r16, 0x03	; 3
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 ec       	ldi	r20, 0xC0	; 192
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	62 e3       	ldi	r22, 0x32	; 50
    2936:	72 e0       	ldi	r23, 0x02	; 2
    2938:	8c ef       	ldi	r24, 0xFC	; 252
    293a:	92 e1       	ldi	r25, 0x12	; 18
    293c:	0e 94 4c 09 	call	0x1298	; 0x1298 <xTaskCreate>
	NULL,
	3,
	NULL
	);
	 
	xTaskCreate(
    2940:	01 e0       	ldi	r16, 0x01	; 1
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 ec       	ldi	r20, 0xC0	; 192
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	67 e3       	ldi	r22, 0x37	; 55
    294c:	72 e0       	ldi	r23, 0x02	; 2
    294e:	83 e3       	ldi	r24, 0x33	; 51
    2950:	94 e1       	ldi	r25, 0x14	; 20
    2952:	0e 94 4c 09 	call	0x1298	; 0x1298 <xTaskCreate>
	NULL,
	1,
	NULL
	);
	 
	xTaskCreate(
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 ec       	ldi	r20, 0xC0	; 192
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	6c e3       	ldi	r22, 0x3C	; 60
    2960:	72 e0       	ldi	r23, 0x02	; 2
    2962:	8a e2       	ldi	r24, 0x2A	; 42
    2964:	93 e1       	ldi	r25, 0x13	; 19
    2966:	0e 94 4c 09 	call	0x1298	; 0x1298 <xTaskCreate>
	1,
	NULL
	);
	
	//Queue initialization
	sendQueue = xQueueCreate(QUEUE_LENGTH, QUEUE_ITEM_SIZE);
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	62 e0       	ldi	r22, 0x02	; 2
    296e:	8a e0       	ldi	r24, 0x0A	; 10
    2970:	0e 94 e7 04 	call	0x9ce	; 0x9ce <xQueueGenericCreate>
    2974:	90 93 04 0d 	sts	0x0D04, r25	; 0x800d04 <sendQueue+0x1>
    2978:	80 93 03 0d 	sts	0x0D03, r24	; 0x800d03 <sendQueue>
	receiveQueue = xQueueCreate(QUEUE_LENGTH, QUEUE_ITEM_SIZE);
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	62 e0       	ldi	r22, 0x02	; 2
    2980:	8a e0       	ldi	r24, 0x0A	; 10
    2982:	0e 94 e7 04 	call	0x9ce	; 0x9ce <xQueueGenericCreate>
    2986:	90 93 06 0d 	sts	0x0D06, r25	; 0x800d06 <receiveQueue+0x1>
    298a:	80 93 05 0d 	sts	0x0D05, r24	; 0x800d05 <receiveQueue>
}
    298e:	0f 91       	pop	r16
    2990:	ff 90       	pop	r15
    2992:	ef 90       	pop	r14
    2994:	08 95       	ret

00002996 <main>:
/*-----------------------------------------------------------*/

int main(void)
{
	initialiseSystem();
    2996:	9a df       	rcall	.-204    	; 0x28cc <initialiseSystem>
	vTaskStartScheduler();
    2998:	0e 94 97 09 	call	0x132e	; 0x132e <vTaskStartScheduler>
}
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	08 95       	ret

000029a2 <usart_getchar>:
    29a2:	cf 93       	push	r28
    29a4:	df 93       	push	r29
    29a6:	1f 92       	push	r1
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	be 01       	movw	r22, r28
    29ae:	6f 5f       	subi	r22, 0xFF	; 255
    29b0:	7f 4f       	sbci	r23, 0xFF	; 255
    29b2:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <_com_serial_instance>
    29b6:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <_com_serial_instance+0x1>
    29ba:	16 d1       	rcall	.+556    	; 0x2be8 <serial_getByte>
    29bc:	81 11       	cpse	r24, r1
    29be:	f6 cf       	rjmp	.-20     	; 0x29ac <usart_getchar+0xa>
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	0f 90       	pop	r0
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	08 95       	ret

000029cc <usart_putchar>:
    29cc:	68 2f       	mov	r22, r24
    29ce:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <_com_serial_instance>
    29d2:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <_com_serial_instance+0x1>
    29d6:	dd d0       	rcall	.+442    	; 0x2b92 <serial_sendByte>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	08 95       	ret

000029de <stdio_initialise>:
    29de:	8f 92       	push	r8
    29e0:	9f 92       	push	r9
    29e2:	af 92       	push	r10
    29e4:	cf 92       	push	r12
    29e6:	ef 92       	push	r14
    29e8:	0f 93       	push	r16
    29ea:	81 2c       	mov	r8, r1
    29ec:	91 2c       	mov	r9, r1
    29ee:	68 94       	set
    29f0:	aa 24       	eor	r10, r10
    29f2:	a7 f8       	bld	r10, 7
    29f4:	68 94       	set
    29f6:	cc 24       	eor	r12, r12
    29f8:	c7 f8       	bld	r12, 7
    29fa:	e1 2c       	mov	r14, r1
    29fc:	00 e0       	ldi	r16, 0x00	; 0
    29fe:	23 e0       	ldi	r18, 0x03	; 3
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	51 ee       	ldi	r21, 0xE1	; 225
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	70 e0       	ldi	r23, 0x00	; 0
    2a08:	28 d0       	rcall	.+80     	; 0x2a5a <serial_create>
    2a0a:	90 93 fa 0c 	sts	0x0CFA, r25	; 0x800cfa <_com_serial_instance+0x1>
    2a0e:	80 93 f9 0c 	sts	0x0CF9, r24	; 0x800cf9 <_com_serial_instance>
    2a12:	ed e0       	ldi	r30, 0x0D	; 13
    2a14:	fd e0       	ldi	r31, 0x0D	; 13
    2a16:	87 e0       	ldi	r24, 0x07	; 7
    2a18:	92 e0       	ldi	r25, 0x02	; 2
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24
    2a1e:	93 83       	std	Z+3, r25	; 0x03
    2a20:	82 83       	std	Z+2, r24	; 0x02
    2a22:	0f 91       	pop	r16
    2a24:	ef 90       	pop	r14
    2a26:	cf 90       	pop	r12
    2a28:	af 90       	pop	r10
    2a2a:	9f 90       	pop	r9
    2a2c:	8f 90       	pop	r8
    2a2e:	08 95       	ret

00002a30 <stdio_inputIsWaiting>:
    2a30:	cf 93       	push	r28
    2a32:	df 93       	push	r29
    2a34:	1f 92       	push	r1
    2a36:	cd b7       	in	r28, 0x3d	; 61
    2a38:	de b7       	in	r29, 0x3e	; 62
    2a3a:	19 82       	std	Y+1, r1	; 0x01
    2a3c:	be 01       	movw	r22, r28
    2a3e:	6f 5f       	subi	r22, 0xFF	; 255
    2a40:	7f 4f       	sbci	r23, 0xFF	; 255
    2a42:	80 91 f9 0c 	lds	r24, 0x0CF9	; 0x800cf9 <_com_serial_instance>
    2a46:	90 91 fa 0c 	lds	r25, 0x0CFA	; 0x800cfa <_com_serial_instance+0x1>
    2a4a:	ee d0       	rcall	.+476    	; 0x2c28 <serial_emptyRxFifo>
    2a4c:	99 81       	ldd	r25, Y+1	; 0x01
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	89 27       	eor	r24, r25
    2a52:	0f 90       	pop	r0
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	08 95       	ret

00002a5a <serial_create>:
    2a5a:	2f 92       	push	r2
    2a5c:	3f 92       	push	r3
    2a5e:	4f 92       	push	r4
    2a60:	5f 92       	push	r5
    2a62:	6f 92       	push	r6
    2a64:	7f 92       	push	r7
    2a66:	8f 92       	push	r8
    2a68:	9f 92       	push	r9
    2a6a:	af 92       	push	r10
    2a6c:	cf 92       	push	r12
    2a6e:	ef 92       	push	r14
    2a70:	ff 92       	push	r15
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	f8 2e       	mov	r15, r24
    2a80:	2a 01       	movw	r4, r20
    2a82:	3b 01       	movw	r6, r22
    2a84:	88 e0       	ldi	r24, 0x08	; 8
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	47 d5       	rcall	.+2702   	; 0x3518 <malloc>
    2a8a:	8c 01       	movw	r16, r24
    2a8c:	8f 2d       	mov	r24, r15
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	fc 01       	movw	r30, r24
    2a92:	ee 0f       	add	r30, r30
    2a94:	ff 1f       	adc	r31, r31
    2a96:	e5 50       	subi	r30, 0x05	; 5
    2a98:	f3 4f       	sbci	r31, 0xF3	; 243
    2a9a:	11 83       	std	Z+1, r17	; 0x01
    2a9c:	00 83       	st	Z, r16
    2a9e:	01 15       	cp	r16, r1
    2aa0:	11 05       	cpc	r17, r1
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <serial_create+0x4c>
    2aa4:	64 c0       	rjmp	.+200    	; 0x2b6e <serial_create+0x114>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	fc 01       	movw	r30, r24
    2aac:	eb 5e       	subi	r30, 0xEB	; 235
    2aae:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab0:	80 81       	ld	r24, Z
    2ab2:	91 81       	ldd	r25, Z+1	; 0x01
    2ab4:	d8 01       	movw	r26, r16
    2ab6:	8d 93       	st	X+, r24
    2ab8:	9c 93       	st	X, r25
    2aba:	8c 2d       	mov	r24, r12
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	28 d5       	rcall	.+2640   	; 0x3518 <malloc>
    2ac8:	1c 01       	movw	r2, r24
    2aca:	86 e0       	ldi	r24, 0x06	; 6
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	24 d5       	rcall	.+2632   	; 0x3518 <malloc>
    2ad0:	7c 01       	movw	r14, r24
    2ad2:	4c 2d       	mov	r20, r12
    2ad4:	b1 01       	movw	r22, r2
    2ad6:	12 d3       	rcall	.+1572   	; 0x30fc <fifo_init>
    2ad8:	f8 01       	movw	r30, r16
    2ada:	f5 82       	std	Z+5, r15	; 0x05
    2adc:	e4 82       	std	Z+4, r14	; 0x04
    2ade:	8a 2d       	mov	r24, r10
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	88 0f       	add	r24, r24
    2ae4:	99 1f       	adc	r25, r25
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	16 d5       	rcall	.+2604   	; 0x3518 <malloc>
    2aec:	1c 01       	movw	r2, r24
    2aee:	86 e0       	ldi	r24, 0x06	; 6
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	12 d5       	rcall	.+2596   	; 0x3518 <malloc>
    2af4:	7c 01       	movw	r14, r24
    2af6:	4a 2d       	mov	r20, r10
    2af8:	b1 01       	movw	r22, r2
    2afa:	00 d3       	rcall	.+1536   	; 0x30fc <fifo_init>
    2afc:	d8 01       	movw	r26, r16
    2afe:	13 96       	adiw	r26, 0x03	; 3
    2b00:	fc 92       	st	X, r15
    2b02:	ee 92       	st	-X, r14
    2b04:	12 97       	sbiw	r26, 0x02	; 2
    2b06:	17 96       	adiw	r26, 0x07	; 7
    2b08:	9c 92       	st	X, r9
    2b0a:	8e 92       	st	-X, r8
    2b0c:	16 97       	sbiw	r26, 0x06	; 6
    2b0e:	ff b6       	in	r15, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	ed 91       	ld	r30, X+
    2b14:	fc 91       	ld	r31, X
    2b16:	11 97       	sbiw	r26, 0x01	; 1
    2b18:	36 97       	sbiw	r30, 0x06	; 6
    2b1a:	80 81       	ld	r24, Z
    2b1c:	82 60       	ori	r24, 0x02	; 2
    2b1e:	80 83       	st	Z, r24
    2b20:	8d 90       	ld	r8, X+
    2b22:	9c 90       	ld	r9, X
    2b24:	c3 01       	movw	r24, r6
    2b26:	b2 01       	movw	r22, r4
    2b28:	fe d3       	rcall	.+2044   	; 0x3326 <__floatunsisf>
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	51 e4       	ldi	r21, 0x41	; 65
    2b32:	87 d4       	rcall	.+2318   	; 0x3442 <__mulsf3>
    2b34:	9b 01       	movw	r18, r22
    2b36:	ac 01       	movw	r20, r24
    2b38:	60 e0       	ldi	r22, 0x00	; 0
    2b3a:	74 e2       	ldi	r23, 0x24	; 36
    2b3c:	84 e7       	ldi	r24, 0x74	; 116
    2b3e:	9b e4       	ldi	r25, 0x4B	; 75
    2b40:	5e d3       	rcall	.+1724   	; 0x31fe <__divsf3>
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e8       	ldi	r20, 0x80	; 128
    2b48:	5f e3       	ldi	r21, 0x3F	; 63
    2b4a:	f4 d2       	rcall	.+1512   	; 0x3134 <__subsf3>
    2b4c:	c0 d3       	rcall	.+1920   	; 0x32ce <__fixunssfsi>
    2b4e:	f4 01       	movw	r30, r8
    2b50:	32 97       	sbiw	r30, 0x02	; 2
    2b52:	60 83       	st	Z, r22
    2b54:	d8 01       	movw	r26, r16
    2b56:	ed 91       	ld	r30, X+
    2b58:	fc 91       	ld	r31, X
    2b5a:	11 97       	sbiw	r26, 0x01	; 1
    2b5c:	35 97       	sbiw	r30, 0x05	; 5
    2b5e:	88 e9       	ldi	r24, 0x98	; 152
    2b60:	80 83       	st	Z, r24
    2b62:	ed 91       	ld	r30, X+
    2b64:	fc 91       	ld	r31, X
    2b66:	34 97       	sbiw	r30, 0x04	; 4
    2b68:	86 e0       	ldi	r24, 0x06	; 6
    2b6a:	80 83       	st	Z, r24
    2b6c:	ff be       	out	0x3f, r15	; 63
    2b6e:	c8 01       	movw	r24, r16
    2b70:	df 91       	pop	r29
    2b72:	cf 91       	pop	r28
    2b74:	1f 91       	pop	r17
    2b76:	0f 91       	pop	r16
    2b78:	ff 90       	pop	r15
    2b7a:	ef 90       	pop	r14
    2b7c:	cf 90       	pop	r12
    2b7e:	af 90       	pop	r10
    2b80:	9f 90       	pop	r9
    2b82:	8f 90       	pop	r8
    2b84:	7f 90       	pop	r7
    2b86:	6f 90       	pop	r6
    2b88:	5f 90       	pop	r5
    2b8a:	4f 90       	pop	r4
    2b8c:	3f 90       	pop	r3
    2b8e:	2f 90       	pop	r2
    2b90:	08 95       	ret

00002b92 <serial_sendByte>:
    2b92:	cf 93       	push	r28
    2b94:	df 93       	push	r29
    2b96:	dc 01       	movw	r26, r24
    2b98:	89 2b       	or	r24, r25
    2b9a:	01 f1       	breq	.+64     	; 0x2bdc <serial_sendByte+0x4a>
    2b9c:	12 96       	adiw	r26, 0x02	; 2
    2b9e:	ed 91       	ld	r30, X+
    2ba0:	fc 91       	ld	r31, X
    2ba2:	13 97       	sbiw	r26, 0x03	; 3
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	25 81       	ldd	r18, Z+5	; 0x05
    2baa:	98 1b       	sub	r25, r24
    2bac:	92 23       	and	r25, r18
    2bae:	84 81       	ldd	r24, Z+4	; 0x04
    2bb0:	98 17       	cp	r25, r24
    2bb2:	b1 f0       	breq	.+44     	; 0x2be0 <serial_sendByte+0x4e>
    2bb4:	83 81       	ldd	r24, Z+3	; 0x03
    2bb6:	26 95       	lsr	r18
    2bb8:	28 23       	and	r18, r24
    2bba:	c0 81       	ld	r28, Z
    2bbc:	d1 81       	ldd	r29, Z+1	; 0x01
    2bbe:	c2 0f       	add	r28, r18
    2bc0:	d1 1d       	adc	r29, r1
    2bc2:	68 83       	st	Y, r22
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	95 81       	ldd	r25, Z+5	; 0x05
    2bc8:	89 23       	and	r24, r25
    2bca:	83 83       	std	Z+3, r24	; 0x03
    2bcc:	ed 91       	ld	r30, X+
    2bce:	fc 91       	ld	r31, X
    2bd0:	35 97       	sbiw	r30, 0x05	; 5
    2bd2:	80 81       	ld	r24, Z
    2bd4:	80 62       	ori	r24, 0x20	; 32
    2bd6:	80 83       	st	Z, r24
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	03 c0       	rjmp	.+6      	; 0x2be2 <serial_sendByte+0x50>
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	01 c0       	rjmp	.+2      	; 0x2be2 <serial_sendByte+0x50>
    2be0:	82 e0       	ldi	r24, 0x02	; 2
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	08 95       	ret

00002be8 <serial_getByte>:
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	d1 f0       	breq	.+52     	; 0x2c20 <serial_getByte+0x38>
    2bec:	dc 01       	movw	r26, r24
    2bee:	14 96       	adiw	r26, 0x04	; 4
    2bf0:	ed 91       	ld	r30, X+
    2bf2:	fc 91       	ld	r31, X
    2bf4:	15 97       	sbiw	r26, 0x05	; 5
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	82 81       	ldd	r24, Z+2	; 0x02
    2bfa:	98 17       	cp	r25, r24
    2bfc:	99 f0       	breq	.+38     	; 0x2c24 <serial_getByte+0x3c>
    2bfe:	92 81       	ldd	r25, Z+2	; 0x02
    2c00:	85 81       	ldd	r24, Z+5	; 0x05
    2c02:	86 95       	lsr	r24
    2c04:	89 23       	and	r24, r25
    2c06:	a0 81       	ld	r26, Z
    2c08:	b1 81       	ldd	r27, Z+1	; 0x01
    2c0a:	a8 0f       	add	r26, r24
    2c0c:	b1 1d       	adc	r27, r1
    2c0e:	8c 91       	ld	r24, X
    2c10:	db 01       	movw	r26, r22
    2c12:	8c 93       	st	X, r24
    2c14:	9f 5f       	subi	r25, 0xFF	; 255
    2c16:	85 81       	ldd	r24, Z+5	; 0x05
    2c18:	98 23       	and	r25, r24
    2c1a:	92 83       	std	Z+2, r25	; 0x02
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	08 95       	ret
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	08 95       	ret
    2c24:	83 e0       	ldi	r24, 0x03	; 3
    2c26:	08 95       	ret

00002c28 <serial_emptyRxFifo>:
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	71 f0       	breq	.+28     	; 0x2c48 <serial_emptyRxFifo+0x20>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	14 96       	adiw	r26, 0x04	; 4
    2c30:	ed 91       	ld	r30, X+
    2c32:	fc 91       	ld	r31, X
    2c34:	15 97       	sbiw	r26, 0x05	; 5
    2c36:	23 81       	ldd	r18, Z+3	; 0x03
    2c38:	92 81       	ldd	r25, Z+2	; 0x02
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	29 13       	cpse	r18, r25
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	fb 01       	movw	r30, r22
    2c42:	80 83       	st	Z, r24
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	08 95       	ret
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	08 95       	ret

00002c4c <__vector_25>:
    2c4c:	1f 92       	push	r1
    2c4e:	0f 92       	push	r0
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	0f 92       	push	r0
    2c54:	11 24       	eor	r1, r1
    2c56:	0b b6       	in	r0, 0x3b	; 59
    2c58:	0f 92       	push	r0
    2c5a:	2f 93       	push	r18
    2c5c:	3f 93       	push	r19
    2c5e:	4f 93       	push	r20
    2c60:	5f 93       	push	r21
    2c62:	6f 93       	push	r22
    2c64:	7f 93       	push	r23
    2c66:	8f 93       	push	r24
    2c68:	9f 93       	push	r25
    2c6a:	af 93       	push	r26
    2c6c:	bf 93       	push	r27
    2c6e:	cf 93       	push	r28
    2c70:	df 93       	push	r29
    2c72:	ef 93       	push	r30
    2c74:	ff 93       	push	r31
    2c76:	a0 91 fb 0c 	lds	r26, 0x0CFB	; 0x800cfb <_ser_handle>
    2c7a:	b0 91 fc 0c 	lds	r27, 0x0CFC	; 0x800cfc <_ser_handle+0x1>
    2c7e:	10 97       	sbiw	r26, 0x00	; 0
    2c80:	11 f1       	breq	.+68     	; 0x2cc6 <__vector_25+0x7a>
    2c82:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2c86:	14 96       	adiw	r26, 0x04	; 4
    2c88:	ed 91       	ld	r30, X+
    2c8a:	fc 91       	ld	r31, X
    2c8c:	15 97       	sbiw	r26, 0x05	; 5
    2c8e:	93 81       	ldd	r25, Z+3	; 0x03
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	25 81       	ldd	r18, Z+5	; 0x05
    2c94:	98 1b       	sub	r25, r24
    2c96:	92 23       	and	r25, r18
    2c98:	84 81       	ldd	r24, Z+4	; 0x04
    2c9a:	98 17       	cp	r25, r24
    2c9c:	61 f0       	breq	.+24     	; 0x2cb6 <__vector_25+0x6a>
    2c9e:	83 81       	ldd	r24, Z+3	; 0x03
    2ca0:	26 95       	lsr	r18
    2ca2:	28 23       	and	r18, r24
    2ca4:	c0 81       	ld	r28, Z
    2ca6:	d1 81       	ldd	r29, Z+1	; 0x01
    2ca8:	c2 0f       	add	r28, r18
    2caa:	d1 1d       	adc	r29, r1
    2cac:	68 83       	st	Y, r22
    2cae:	8f 5f       	subi	r24, 0xFF	; 255
    2cb0:	95 81       	ldd	r25, Z+5	; 0x05
    2cb2:	89 23       	and	r24, r25
    2cb4:	83 83       	std	Z+3, r24	; 0x03
    2cb6:	16 96       	adiw	r26, 0x06	; 6
    2cb8:	ed 91       	ld	r30, X+
    2cba:	fc 91       	ld	r31, X
    2cbc:	17 97       	sbiw	r26, 0x07	; 7
    2cbe:	30 97       	sbiw	r30, 0x00	; 0
    2cc0:	11 f0       	breq	.+4      	; 0x2cc6 <__vector_25+0x7a>
    2cc2:	cd 01       	movw	r24, r26
    2cc4:	19 95       	eicall
    2cc6:	ff 91       	pop	r31
    2cc8:	ef 91       	pop	r30
    2cca:	df 91       	pop	r29
    2ccc:	cf 91       	pop	r28
    2cce:	bf 91       	pop	r27
    2cd0:	af 91       	pop	r26
    2cd2:	9f 91       	pop	r25
    2cd4:	8f 91       	pop	r24
    2cd6:	7f 91       	pop	r23
    2cd8:	6f 91       	pop	r22
    2cda:	5f 91       	pop	r21
    2cdc:	4f 91       	pop	r20
    2cde:	3f 91       	pop	r19
    2ce0:	2f 91       	pop	r18
    2ce2:	0f 90       	pop	r0
    2ce4:	0b be       	out	0x3b, r0	; 59
    2ce6:	0f 90       	pop	r0
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	0f 90       	pop	r0
    2cec:	1f 90       	pop	r1
    2cee:	18 95       	reti

00002cf0 <__vector_26>:
    2cf0:	1f 92       	push	r1
    2cf2:	0f 92       	push	r0
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	0f 92       	push	r0
    2cf8:	11 24       	eor	r1, r1
    2cfa:	0b b6       	in	r0, 0x3b	; 59
    2cfc:	0f 92       	push	r0
    2cfe:	2f 93       	push	r18
    2d00:	8f 93       	push	r24
    2d02:	9f 93       	push	r25
    2d04:	af 93       	push	r26
    2d06:	bf 93       	push	r27
    2d08:	ef 93       	push	r30
    2d0a:	ff 93       	push	r31
    2d0c:	e0 91 fb 0c 	lds	r30, 0x0CFB	; 0x800cfb <_ser_handle>
    2d10:	f0 91 fc 0c 	lds	r31, 0x0CFC	; 0x800cfc <_ser_handle+0x1>
    2d14:	30 97       	sbiw	r30, 0x00	; 0
    2d16:	b9 f0       	breq	.+46     	; 0x2d46 <__vector_26+0x56>
    2d18:	02 80       	ldd	r0, Z+2	; 0x02
    2d1a:	f3 81       	ldd	r31, Z+3	; 0x03
    2d1c:	e0 2d       	mov	r30, r0
    2d1e:	93 81       	ldd	r25, Z+3	; 0x03
    2d20:	82 81       	ldd	r24, Z+2	; 0x02
    2d22:	98 17       	cp	r25, r24
    2d24:	b1 f0       	breq	.+44     	; 0x2d52 <__vector_26+0x62>
    2d26:	92 81       	ldd	r25, Z+2	; 0x02
    2d28:	85 81       	ldd	r24, Z+5	; 0x05
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	26 95       	lsr	r18
    2d2e:	29 23       	and	r18, r25
    2d30:	a0 81       	ld	r26, Z
    2d32:	b1 81       	ldd	r27, Z+1	; 0x01
    2d34:	a2 0f       	add	r26, r18
    2d36:	b1 1d       	adc	r27, r1
    2d38:	2c 91       	ld	r18, X
    2d3a:	9f 5f       	subi	r25, 0xFF	; 255
    2d3c:	89 23       	and	r24, r25
    2d3e:	82 83       	std	Z+2, r24	; 0x02
    2d40:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2d44:	0b c0       	rjmp	.+22     	; 0x2d5c <__vector_26+0x6c>
    2d46:	e1 ec       	ldi	r30, 0xC1	; 193
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	8f 7d       	andi	r24, 0xDF	; 223
    2d4e:	80 83       	st	Z, r24
    2d50:	05 c0       	rjmp	.+10     	; 0x2d5c <__vector_26+0x6c>
    2d52:	e1 ec       	ldi	r30, 0xC1	; 193
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	8f 7d       	andi	r24, 0xDF	; 223
    2d5a:	80 83       	st	Z, r24
    2d5c:	ff 91       	pop	r31
    2d5e:	ef 91       	pop	r30
    2d60:	bf 91       	pop	r27
    2d62:	af 91       	pop	r26
    2d64:	9f 91       	pop	r25
    2d66:	8f 91       	pop	r24
    2d68:	2f 91       	pop	r18
    2d6a:	0f 90       	pop	r0
    2d6c:	0b be       	out	0x3b, r0	; 59
    2d6e:	0f 90       	pop	r0
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	0f 90       	pop	r0
    2d74:	1f 90       	pop	r1
    2d76:	18 95       	reti

00002d78 <__vector_36>:
    2d78:	1f 92       	push	r1
    2d7a:	0f 92       	push	r0
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	0f 92       	push	r0
    2d80:	11 24       	eor	r1, r1
    2d82:	0b b6       	in	r0, 0x3b	; 59
    2d84:	0f 92       	push	r0
    2d86:	2f 93       	push	r18
    2d88:	3f 93       	push	r19
    2d8a:	4f 93       	push	r20
    2d8c:	5f 93       	push	r21
    2d8e:	6f 93       	push	r22
    2d90:	7f 93       	push	r23
    2d92:	8f 93       	push	r24
    2d94:	9f 93       	push	r25
    2d96:	af 93       	push	r26
    2d98:	bf 93       	push	r27
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	ef 93       	push	r30
    2da0:	ff 93       	push	r31
    2da2:	a0 91 fd 0c 	lds	r26, 0x0CFD	; 0x800cfd <_ser_handle+0x2>
    2da6:	b0 91 fe 0c 	lds	r27, 0x0CFE	; 0x800cfe <_ser_handle+0x3>
    2daa:	10 97       	sbiw	r26, 0x00	; 0
    2dac:	11 f1       	breq	.+68     	; 0x2df2 <__vector_36+0x7a>
    2dae:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2db2:	14 96       	adiw	r26, 0x04	; 4
    2db4:	ed 91       	ld	r30, X+
    2db6:	fc 91       	ld	r31, X
    2db8:	15 97       	sbiw	r26, 0x05	; 5
    2dba:	93 81       	ldd	r25, Z+3	; 0x03
    2dbc:	82 81       	ldd	r24, Z+2	; 0x02
    2dbe:	25 81       	ldd	r18, Z+5	; 0x05
    2dc0:	98 1b       	sub	r25, r24
    2dc2:	92 23       	and	r25, r18
    2dc4:	84 81       	ldd	r24, Z+4	; 0x04
    2dc6:	98 17       	cp	r25, r24
    2dc8:	61 f0       	breq	.+24     	; 0x2de2 <__vector_36+0x6a>
    2dca:	83 81       	ldd	r24, Z+3	; 0x03
    2dcc:	26 95       	lsr	r18
    2dce:	28 23       	and	r18, r24
    2dd0:	c0 81       	ld	r28, Z
    2dd2:	d1 81       	ldd	r29, Z+1	; 0x01
    2dd4:	c2 0f       	add	r28, r18
    2dd6:	d1 1d       	adc	r29, r1
    2dd8:	68 83       	st	Y, r22
    2dda:	8f 5f       	subi	r24, 0xFF	; 255
    2ddc:	95 81       	ldd	r25, Z+5	; 0x05
    2dde:	89 23       	and	r24, r25
    2de0:	83 83       	std	Z+3, r24	; 0x03
    2de2:	16 96       	adiw	r26, 0x06	; 6
    2de4:	ed 91       	ld	r30, X+
    2de6:	fc 91       	ld	r31, X
    2de8:	17 97       	sbiw	r26, 0x07	; 7
    2dea:	30 97       	sbiw	r30, 0x00	; 0
    2dec:	11 f0       	breq	.+4      	; 0x2df2 <__vector_36+0x7a>
    2dee:	cd 01       	movw	r24, r26
    2df0:	19 95       	eicall
    2df2:	ff 91       	pop	r31
    2df4:	ef 91       	pop	r30
    2df6:	df 91       	pop	r29
    2df8:	cf 91       	pop	r28
    2dfa:	bf 91       	pop	r27
    2dfc:	af 91       	pop	r26
    2dfe:	9f 91       	pop	r25
    2e00:	8f 91       	pop	r24
    2e02:	7f 91       	pop	r23
    2e04:	6f 91       	pop	r22
    2e06:	5f 91       	pop	r21
    2e08:	4f 91       	pop	r20
    2e0a:	3f 91       	pop	r19
    2e0c:	2f 91       	pop	r18
    2e0e:	0f 90       	pop	r0
    2e10:	0b be       	out	0x3b, r0	; 59
    2e12:	0f 90       	pop	r0
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	0f 90       	pop	r0
    2e18:	1f 90       	pop	r1
    2e1a:	18 95       	reti

00002e1c <__vector_37>:
    2e1c:	1f 92       	push	r1
    2e1e:	0f 92       	push	r0
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	0f 92       	push	r0
    2e24:	11 24       	eor	r1, r1
    2e26:	0b b6       	in	r0, 0x3b	; 59
    2e28:	0f 92       	push	r0
    2e2a:	2f 93       	push	r18
    2e2c:	8f 93       	push	r24
    2e2e:	9f 93       	push	r25
    2e30:	af 93       	push	r26
    2e32:	bf 93       	push	r27
    2e34:	ef 93       	push	r30
    2e36:	ff 93       	push	r31
    2e38:	e0 91 fd 0c 	lds	r30, 0x0CFD	; 0x800cfd <_ser_handle+0x2>
    2e3c:	f0 91 fe 0c 	lds	r31, 0x0CFE	; 0x800cfe <_ser_handle+0x3>
    2e40:	30 97       	sbiw	r30, 0x00	; 0
    2e42:	b9 f0       	breq	.+46     	; 0x2e72 <__vector_37+0x56>
    2e44:	02 80       	ldd	r0, Z+2	; 0x02
    2e46:	f3 81       	ldd	r31, Z+3	; 0x03
    2e48:	e0 2d       	mov	r30, r0
    2e4a:	93 81       	ldd	r25, Z+3	; 0x03
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	98 17       	cp	r25, r24
    2e50:	b1 f0       	breq	.+44     	; 0x2e7e <__vector_37+0x62>
    2e52:	92 81       	ldd	r25, Z+2	; 0x02
    2e54:	85 81       	ldd	r24, Z+5	; 0x05
    2e56:	28 2f       	mov	r18, r24
    2e58:	26 95       	lsr	r18
    2e5a:	29 23       	and	r18, r25
    2e5c:	a0 81       	ld	r26, Z
    2e5e:	b1 81       	ldd	r27, Z+1	; 0x01
    2e60:	a2 0f       	add	r26, r18
    2e62:	b1 1d       	adc	r27, r1
    2e64:	2c 91       	ld	r18, X
    2e66:	9f 5f       	subi	r25, 0xFF	; 255
    2e68:	89 23       	and	r24, r25
    2e6a:	82 83       	std	Z+2, r24	; 0x02
    2e6c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2e70:	0b c0       	rjmp	.+22     	; 0x2e88 <__vector_37+0x6c>
    2e72:	e9 ec       	ldi	r30, 0xC9	; 201
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	8f 7d       	andi	r24, 0xDF	; 223
    2e7a:	80 83       	st	Z, r24
    2e7c:	05 c0       	rjmp	.+10     	; 0x2e88 <__vector_37+0x6c>
    2e7e:	e9 ec       	ldi	r30, 0xC9	; 201
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	8f 7d       	andi	r24, 0xDF	; 223
    2e86:	80 83       	st	Z, r24
    2e88:	ff 91       	pop	r31
    2e8a:	ef 91       	pop	r30
    2e8c:	bf 91       	pop	r27
    2e8e:	af 91       	pop	r26
    2e90:	9f 91       	pop	r25
    2e92:	8f 91       	pop	r24
    2e94:	2f 91       	pop	r18
    2e96:	0f 90       	pop	r0
    2e98:	0b be       	out	0x3b, r0	; 59
    2e9a:	0f 90       	pop	r0
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	0f 90       	pop	r0
    2ea0:	1f 90       	pop	r1
    2ea2:	18 95       	reti

00002ea4 <__vector_51>:
    2ea4:	1f 92       	push	r1
    2ea6:	0f 92       	push	r0
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	0f 92       	push	r0
    2eac:	11 24       	eor	r1, r1
    2eae:	0b b6       	in	r0, 0x3b	; 59
    2eb0:	0f 92       	push	r0
    2eb2:	2f 93       	push	r18
    2eb4:	3f 93       	push	r19
    2eb6:	4f 93       	push	r20
    2eb8:	5f 93       	push	r21
    2eba:	6f 93       	push	r22
    2ebc:	7f 93       	push	r23
    2ebe:	8f 93       	push	r24
    2ec0:	9f 93       	push	r25
    2ec2:	af 93       	push	r26
    2ec4:	bf 93       	push	r27
    2ec6:	cf 93       	push	r28
    2ec8:	df 93       	push	r29
    2eca:	ef 93       	push	r30
    2ecc:	ff 93       	push	r31
    2ece:	a0 91 ff 0c 	lds	r26, 0x0CFF	; 0x800cff <_ser_handle+0x4>
    2ed2:	b0 91 00 0d 	lds	r27, 0x0D00	; 0x800d00 <_ser_handle+0x5>
    2ed6:	10 97       	sbiw	r26, 0x00	; 0
    2ed8:	11 f1       	breq	.+68     	; 0x2f1e <__vector_51+0x7a>
    2eda:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2ede:	14 96       	adiw	r26, 0x04	; 4
    2ee0:	ed 91       	ld	r30, X+
    2ee2:	fc 91       	ld	r31, X
    2ee4:	15 97       	sbiw	r26, 0x05	; 5
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	82 81       	ldd	r24, Z+2	; 0x02
    2eea:	25 81       	ldd	r18, Z+5	; 0x05
    2eec:	98 1b       	sub	r25, r24
    2eee:	92 23       	and	r25, r18
    2ef0:	84 81       	ldd	r24, Z+4	; 0x04
    2ef2:	98 17       	cp	r25, r24
    2ef4:	61 f0       	breq	.+24     	; 0x2f0e <__vector_51+0x6a>
    2ef6:	83 81       	ldd	r24, Z+3	; 0x03
    2ef8:	26 95       	lsr	r18
    2efa:	28 23       	and	r18, r24
    2efc:	c0 81       	ld	r28, Z
    2efe:	d1 81       	ldd	r29, Z+1	; 0x01
    2f00:	c2 0f       	add	r28, r18
    2f02:	d1 1d       	adc	r29, r1
    2f04:	68 83       	st	Y, r22
    2f06:	8f 5f       	subi	r24, 0xFF	; 255
    2f08:	95 81       	ldd	r25, Z+5	; 0x05
    2f0a:	89 23       	and	r24, r25
    2f0c:	83 83       	std	Z+3, r24	; 0x03
    2f0e:	16 96       	adiw	r26, 0x06	; 6
    2f10:	ed 91       	ld	r30, X+
    2f12:	fc 91       	ld	r31, X
    2f14:	17 97       	sbiw	r26, 0x07	; 7
    2f16:	30 97       	sbiw	r30, 0x00	; 0
    2f18:	11 f0       	breq	.+4      	; 0x2f1e <__vector_51+0x7a>
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	19 95       	eicall
    2f1e:	ff 91       	pop	r31
    2f20:	ef 91       	pop	r30
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	bf 91       	pop	r27
    2f28:	af 91       	pop	r26
    2f2a:	9f 91       	pop	r25
    2f2c:	8f 91       	pop	r24
    2f2e:	7f 91       	pop	r23
    2f30:	6f 91       	pop	r22
    2f32:	5f 91       	pop	r21
    2f34:	4f 91       	pop	r20
    2f36:	3f 91       	pop	r19
    2f38:	2f 91       	pop	r18
    2f3a:	0f 90       	pop	r0
    2f3c:	0b be       	out	0x3b, r0	; 59
    2f3e:	0f 90       	pop	r0
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	0f 90       	pop	r0
    2f44:	1f 90       	pop	r1
    2f46:	18 95       	reti

00002f48 <__vector_52>:
    2f48:	1f 92       	push	r1
    2f4a:	0f 92       	push	r0
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	0f 92       	push	r0
    2f50:	11 24       	eor	r1, r1
    2f52:	0b b6       	in	r0, 0x3b	; 59
    2f54:	0f 92       	push	r0
    2f56:	2f 93       	push	r18
    2f58:	8f 93       	push	r24
    2f5a:	9f 93       	push	r25
    2f5c:	af 93       	push	r26
    2f5e:	bf 93       	push	r27
    2f60:	ef 93       	push	r30
    2f62:	ff 93       	push	r31
    2f64:	e0 91 ff 0c 	lds	r30, 0x0CFF	; 0x800cff <_ser_handle+0x4>
    2f68:	f0 91 00 0d 	lds	r31, 0x0D00	; 0x800d00 <_ser_handle+0x5>
    2f6c:	30 97       	sbiw	r30, 0x00	; 0
    2f6e:	b9 f0       	breq	.+46     	; 0x2f9e <__vector_52+0x56>
    2f70:	02 80       	ldd	r0, Z+2	; 0x02
    2f72:	f3 81       	ldd	r31, Z+3	; 0x03
    2f74:	e0 2d       	mov	r30, r0
    2f76:	93 81       	ldd	r25, Z+3	; 0x03
    2f78:	82 81       	ldd	r24, Z+2	; 0x02
    2f7a:	98 17       	cp	r25, r24
    2f7c:	b1 f0       	breq	.+44     	; 0x2faa <__vector_52+0x62>
    2f7e:	92 81       	ldd	r25, Z+2	; 0x02
    2f80:	85 81       	ldd	r24, Z+5	; 0x05
    2f82:	28 2f       	mov	r18, r24
    2f84:	26 95       	lsr	r18
    2f86:	29 23       	and	r18, r25
    2f88:	a0 81       	ld	r26, Z
    2f8a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f8c:	a2 0f       	add	r26, r18
    2f8e:	b1 1d       	adc	r27, r1
    2f90:	2c 91       	ld	r18, X
    2f92:	9f 5f       	subi	r25, 0xFF	; 255
    2f94:	89 23       	and	r24, r25
    2f96:	82 83       	std	Z+2, r24	; 0x02
    2f98:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2f9c:	0b c0       	rjmp	.+22     	; 0x2fb4 <__vector_52+0x6c>
    2f9e:	e1 ed       	ldi	r30, 0xD1	; 209
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	80 81       	ld	r24, Z
    2fa4:	8f 7d       	andi	r24, 0xDF	; 223
    2fa6:	80 83       	st	Z, r24
    2fa8:	05 c0       	rjmp	.+10     	; 0x2fb4 <__vector_52+0x6c>
    2faa:	e1 ed       	ldi	r30, 0xD1	; 209
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	8f 7d       	andi	r24, 0xDF	; 223
    2fb2:	80 83       	st	Z, r24
    2fb4:	ff 91       	pop	r31
    2fb6:	ef 91       	pop	r30
    2fb8:	bf 91       	pop	r27
    2fba:	af 91       	pop	r26
    2fbc:	9f 91       	pop	r25
    2fbe:	8f 91       	pop	r24
    2fc0:	2f 91       	pop	r18
    2fc2:	0f 90       	pop	r0
    2fc4:	0b be       	out	0x3b, r0	; 59
    2fc6:	0f 90       	pop	r0
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	0f 90       	pop	r0
    2fcc:	1f 90       	pop	r1
    2fce:	18 95       	reti

00002fd0 <__vector_54>:
    2fd0:	1f 92       	push	r1
    2fd2:	0f 92       	push	r0
    2fd4:	0f b6       	in	r0, 0x3f	; 63
    2fd6:	0f 92       	push	r0
    2fd8:	11 24       	eor	r1, r1
    2fda:	0b b6       	in	r0, 0x3b	; 59
    2fdc:	0f 92       	push	r0
    2fde:	2f 93       	push	r18
    2fe0:	3f 93       	push	r19
    2fe2:	4f 93       	push	r20
    2fe4:	5f 93       	push	r21
    2fe6:	6f 93       	push	r22
    2fe8:	7f 93       	push	r23
    2fea:	8f 93       	push	r24
    2fec:	9f 93       	push	r25
    2fee:	af 93       	push	r26
    2ff0:	bf 93       	push	r27
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	ef 93       	push	r30
    2ff8:	ff 93       	push	r31
    2ffa:	a0 91 01 0d 	lds	r26, 0x0D01	; 0x800d01 <_ser_handle+0x6>
    2ffe:	b0 91 02 0d 	lds	r27, 0x0D02	; 0x800d02 <_ser_handle+0x7>
    3002:	10 97       	sbiw	r26, 0x00	; 0
    3004:	11 f1       	breq	.+68     	; 0x304a <__vector_54+0x7a>
    3006:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    300a:	14 96       	adiw	r26, 0x04	; 4
    300c:	ed 91       	ld	r30, X+
    300e:	fc 91       	ld	r31, X
    3010:	15 97       	sbiw	r26, 0x05	; 5
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	25 81       	ldd	r18, Z+5	; 0x05
    3018:	98 1b       	sub	r25, r24
    301a:	92 23       	and	r25, r18
    301c:	84 81       	ldd	r24, Z+4	; 0x04
    301e:	98 17       	cp	r25, r24
    3020:	61 f0       	breq	.+24     	; 0x303a <__vector_54+0x6a>
    3022:	83 81       	ldd	r24, Z+3	; 0x03
    3024:	26 95       	lsr	r18
    3026:	28 23       	and	r18, r24
    3028:	c0 81       	ld	r28, Z
    302a:	d1 81       	ldd	r29, Z+1	; 0x01
    302c:	c2 0f       	add	r28, r18
    302e:	d1 1d       	adc	r29, r1
    3030:	68 83       	st	Y, r22
    3032:	8f 5f       	subi	r24, 0xFF	; 255
    3034:	95 81       	ldd	r25, Z+5	; 0x05
    3036:	89 23       	and	r24, r25
    3038:	83 83       	std	Z+3, r24	; 0x03
    303a:	16 96       	adiw	r26, 0x06	; 6
    303c:	ed 91       	ld	r30, X+
    303e:	fc 91       	ld	r31, X
    3040:	17 97       	sbiw	r26, 0x07	; 7
    3042:	30 97       	sbiw	r30, 0x00	; 0
    3044:	11 f0       	breq	.+4      	; 0x304a <__vector_54+0x7a>
    3046:	cd 01       	movw	r24, r26
    3048:	19 95       	eicall
    304a:	ff 91       	pop	r31
    304c:	ef 91       	pop	r30
    304e:	df 91       	pop	r29
    3050:	cf 91       	pop	r28
    3052:	bf 91       	pop	r27
    3054:	af 91       	pop	r26
    3056:	9f 91       	pop	r25
    3058:	8f 91       	pop	r24
    305a:	7f 91       	pop	r23
    305c:	6f 91       	pop	r22
    305e:	5f 91       	pop	r21
    3060:	4f 91       	pop	r20
    3062:	3f 91       	pop	r19
    3064:	2f 91       	pop	r18
    3066:	0f 90       	pop	r0
    3068:	0b be       	out	0x3b, r0	; 59
    306a:	0f 90       	pop	r0
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	0f 90       	pop	r0
    3070:	1f 90       	pop	r1
    3072:	18 95       	reti

00003074 <__vector_55>:
    3074:	1f 92       	push	r1
    3076:	0f 92       	push	r0
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	0f 92       	push	r0
    307c:	11 24       	eor	r1, r1
    307e:	0b b6       	in	r0, 0x3b	; 59
    3080:	0f 92       	push	r0
    3082:	2f 93       	push	r18
    3084:	8f 93       	push	r24
    3086:	9f 93       	push	r25
    3088:	af 93       	push	r26
    308a:	bf 93       	push	r27
    308c:	ef 93       	push	r30
    308e:	ff 93       	push	r31
    3090:	e0 91 01 0d 	lds	r30, 0x0D01	; 0x800d01 <_ser_handle+0x6>
    3094:	f0 91 02 0d 	lds	r31, 0x0D02	; 0x800d02 <_ser_handle+0x7>
    3098:	30 97       	sbiw	r30, 0x00	; 0
    309a:	b9 f0       	breq	.+46     	; 0x30ca <__vector_55+0x56>
    309c:	02 80       	ldd	r0, Z+2	; 0x02
    309e:	f3 81       	ldd	r31, Z+3	; 0x03
    30a0:	e0 2d       	mov	r30, r0
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	82 81       	ldd	r24, Z+2	; 0x02
    30a6:	98 17       	cp	r25, r24
    30a8:	b1 f0       	breq	.+44     	; 0x30d6 <__vector_55+0x62>
    30aa:	92 81       	ldd	r25, Z+2	; 0x02
    30ac:	85 81       	ldd	r24, Z+5	; 0x05
    30ae:	28 2f       	mov	r18, r24
    30b0:	26 95       	lsr	r18
    30b2:	29 23       	and	r18, r25
    30b4:	a0 81       	ld	r26, Z
    30b6:	b1 81       	ldd	r27, Z+1	; 0x01
    30b8:	a2 0f       	add	r26, r18
    30ba:	b1 1d       	adc	r27, r1
    30bc:	2c 91       	ld	r18, X
    30be:	9f 5f       	subi	r25, 0xFF	; 255
    30c0:	89 23       	and	r24, r25
    30c2:	82 83       	std	Z+2, r24	; 0x02
    30c4:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    30c8:	0b c0       	rjmp	.+22     	; 0x30e0 <__vector_55+0x6c>
    30ca:	e1 e3       	ldi	r30, 0x31	; 49
    30cc:	f1 e0       	ldi	r31, 0x01	; 1
    30ce:	80 81       	ld	r24, Z
    30d0:	8f 7d       	andi	r24, 0xDF	; 223
    30d2:	80 83       	st	Z, r24
    30d4:	05 c0       	rjmp	.+10     	; 0x30e0 <__vector_55+0x6c>
    30d6:	e1 e3       	ldi	r30, 0x31	; 49
    30d8:	f1 e0       	ldi	r31, 0x01	; 1
    30da:	80 81       	ld	r24, Z
    30dc:	8f 7d       	andi	r24, 0xDF	; 223
    30de:	80 83       	st	Z, r24
    30e0:	ff 91       	pop	r31
    30e2:	ef 91       	pop	r30
    30e4:	bf 91       	pop	r27
    30e6:	af 91       	pop	r26
    30e8:	9f 91       	pop	r25
    30ea:	8f 91       	pop	r24
    30ec:	2f 91       	pop	r18
    30ee:	0f 90       	pop	r0
    30f0:	0b be       	out	0x3b, r0	; 59
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	0f 90       	pop	r0
    30f8:	1f 90       	pop	r1
    30fa:	18 95       	reti

000030fc <fifo_init>:
    30fc:	fc 01       	movw	r30, r24
    30fe:	41 11       	cpse	r20, r1
    3100:	01 c0       	rjmp	.+2      	; 0x3104 <fifo_init+0x8>
    3102:	2b d3       	rcall	.+1622   	; 0x375a <abort>
    3104:	84 2f       	mov	r24, r20
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	9c 01       	movw	r18, r24
    310a:	21 50       	subi	r18, 0x01	; 1
    310c:	31 09       	sbc	r19, r1
    310e:	82 23       	and	r24, r18
    3110:	93 23       	and	r25, r19
    3112:	89 2b       	or	r24, r25
    3114:	09 f0       	breq	.+2      	; 0x3118 <fifo_init+0x1c>
    3116:	21 d3       	rcall	.+1602   	; 0x375a <abort>
    3118:	41 38       	cpi	r20, 0x81	; 129
    311a:	08 f0       	brcs	.+2      	; 0x311e <fifo_init+0x22>
    311c:	1e d3       	rcall	.+1596   	; 0x375a <abort>
    311e:	12 82       	std	Z+2, r1	; 0x02
    3120:	13 82       	std	Z+3, r1	; 0x03
    3122:	44 83       	std	Z+4, r20	; 0x04
    3124:	44 0f       	add	r20, r20
    3126:	41 50       	subi	r20, 0x01	; 1
    3128:	45 83       	std	Z+5, r20	; 0x05
    312a:	71 83       	std	Z+1, r23	; 0x01
    312c:	60 83       	st	Z, r22
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	08 95       	ret

00003134 <__subsf3>:
    3134:	50 58       	subi	r21, 0x80	; 128

00003136 <__addsf3>:
    3136:	bb 27       	eor	r27, r27
    3138:	aa 27       	eor	r26, r26
    313a:	0e d0       	rcall	.+28     	; 0x3158 <__addsf3x>
    313c:	48 c1       	rjmp	.+656    	; 0x33ce <__fp_round>
    313e:	39 d1       	rcall	.+626    	; 0x33b2 <__fp_pscA>
    3140:	30 f0       	brcs	.+12     	; 0x314e <__addsf3+0x18>
    3142:	3e d1       	rcall	.+636    	; 0x33c0 <__fp_pscB>
    3144:	20 f0       	brcs	.+8      	; 0x314e <__addsf3+0x18>
    3146:	31 f4       	brne	.+12     	; 0x3154 <__addsf3+0x1e>
    3148:	9f 3f       	cpi	r25, 0xFF	; 255
    314a:	11 f4       	brne	.+4      	; 0x3150 <__addsf3+0x1a>
    314c:	1e f4       	brtc	.+6      	; 0x3154 <__addsf3+0x1e>
    314e:	2e c1       	rjmp	.+604    	; 0x33ac <__fp_nan>
    3150:	0e f4       	brtc	.+2      	; 0x3154 <__addsf3+0x1e>
    3152:	e0 95       	com	r30
    3154:	e7 fb       	bst	r30, 7
    3156:	24 c1       	rjmp	.+584    	; 0x33a0 <__fp_inf>

00003158 <__addsf3x>:
    3158:	e9 2f       	mov	r30, r25
    315a:	4a d1       	rcall	.+660    	; 0x33f0 <__fp_split3>
    315c:	80 f3       	brcs	.-32     	; 0x313e <__addsf3+0x8>
    315e:	ba 17       	cp	r27, r26
    3160:	62 07       	cpc	r22, r18
    3162:	73 07       	cpc	r23, r19
    3164:	84 07       	cpc	r24, r20
    3166:	95 07       	cpc	r25, r21
    3168:	18 f0       	brcs	.+6      	; 0x3170 <__addsf3x+0x18>
    316a:	71 f4       	brne	.+28     	; 0x3188 <__addsf3x+0x30>
    316c:	9e f5       	brtc	.+102    	; 0x31d4 <__addsf3x+0x7c>
    316e:	62 c1       	rjmp	.+708    	; 0x3434 <__fp_zero>
    3170:	0e f4       	brtc	.+2      	; 0x3174 <__addsf3x+0x1c>
    3172:	e0 95       	com	r30
    3174:	0b 2e       	mov	r0, r27
    3176:	ba 2f       	mov	r27, r26
    3178:	a0 2d       	mov	r26, r0
    317a:	0b 01       	movw	r0, r22
    317c:	b9 01       	movw	r22, r18
    317e:	90 01       	movw	r18, r0
    3180:	0c 01       	movw	r0, r24
    3182:	ca 01       	movw	r24, r20
    3184:	a0 01       	movw	r20, r0
    3186:	11 24       	eor	r1, r1
    3188:	ff 27       	eor	r31, r31
    318a:	59 1b       	sub	r21, r25
    318c:	99 f0       	breq	.+38     	; 0x31b4 <__addsf3x+0x5c>
    318e:	59 3f       	cpi	r21, 0xF9	; 249
    3190:	50 f4       	brcc	.+20     	; 0x31a6 <__addsf3x+0x4e>
    3192:	50 3e       	cpi	r21, 0xE0	; 224
    3194:	68 f1       	brcs	.+90     	; 0x31f0 <__addsf3x+0x98>
    3196:	1a 16       	cp	r1, r26
    3198:	f0 40       	sbci	r31, 0x00	; 0
    319a:	a2 2f       	mov	r26, r18
    319c:	23 2f       	mov	r18, r19
    319e:	34 2f       	mov	r19, r20
    31a0:	44 27       	eor	r20, r20
    31a2:	58 5f       	subi	r21, 0xF8	; 248
    31a4:	f3 cf       	rjmp	.-26     	; 0x318c <__addsf3x+0x34>
    31a6:	46 95       	lsr	r20
    31a8:	37 95       	ror	r19
    31aa:	27 95       	ror	r18
    31ac:	a7 95       	ror	r26
    31ae:	f0 40       	sbci	r31, 0x00	; 0
    31b0:	53 95       	inc	r21
    31b2:	c9 f7       	brne	.-14     	; 0x31a6 <__addsf3x+0x4e>
    31b4:	7e f4       	brtc	.+30     	; 0x31d4 <__addsf3x+0x7c>
    31b6:	1f 16       	cp	r1, r31
    31b8:	ba 0b       	sbc	r27, r26
    31ba:	62 0b       	sbc	r22, r18
    31bc:	73 0b       	sbc	r23, r19
    31be:	84 0b       	sbc	r24, r20
    31c0:	ba f0       	brmi	.+46     	; 0x31f0 <__addsf3x+0x98>
    31c2:	91 50       	subi	r25, 0x01	; 1
    31c4:	a1 f0       	breq	.+40     	; 0x31ee <__addsf3x+0x96>
    31c6:	ff 0f       	add	r31, r31
    31c8:	bb 1f       	adc	r27, r27
    31ca:	66 1f       	adc	r22, r22
    31cc:	77 1f       	adc	r23, r23
    31ce:	88 1f       	adc	r24, r24
    31d0:	c2 f7       	brpl	.-16     	; 0x31c2 <__addsf3x+0x6a>
    31d2:	0e c0       	rjmp	.+28     	; 0x31f0 <__addsf3x+0x98>
    31d4:	ba 0f       	add	r27, r26
    31d6:	62 1f       	adc	r22, r18
    31d8:	73 1f       	adc	r23, r19
    31da:	84 1f       	adc	r24, r20
    31dc:	48 f4       	brcc	.+18     	; 0x31f0 <__addsf3x+0x98>
    31de:	87 95       	ror	r24
    31e0:	77 95       	ror	r23
    31e2:	67 95       	ror	r22
    31e4:	b7 95       	ror	r27
    31e6:	f7 95       	ror	r31
    31e8:	9e 3f       	cpi	r25, 0xFE	; 254
    31ea:	08 f0       	brcs	.+2      	; 0x31ee <__addsf3x+0x96>
    31ec:	b3 cf       	rjmp	.-154    	; 0x3154 <__addsf3+0x1e>
    31ee:	93 95       	inc	r25
    31f0:	88 0f       	add	r24, r24
    31f2:	08 f0       	brcs	.+2      	; 0x31f6 <__addsf3x+0x9e>
    31f4:	99 27       	eor	r25, r25
    31f6:	ee 0f       	add	r30, r30
    31f8:	97 95       	ror	r25
    31fa:	87 95       	ror	r24
    31fc:	08 95       	ret

000031fe <__divsf3>:
    31fe:	0c d0       	rcall	.+24     	; 0x3218 <__divsf3x>
    3200:	e6 c0       	rjmp	.+460    	; 0x33ce <__fp_round>
    3202:	de d0       	rcall	.+444    	; 0x33c0 <__fp_pscB>
    3204:	40 f0       	brcs	.+16     	; 0x3216 <__divsf3+0x18>
    3206:	d5 d0       	rcall	.+426    	; 0x33b2 <__fp_pscA>
    3208:	30 f0       	brcs	.+12     	; 0x3216 <__divsf3+0x18>
    320a:	21 f4       	brne	.+8      	; 0x3214 <__divsf3+0x16>
    320c:	5f 3f       	cpi	r21, 0xFF	; 255
    320e:	19 f0       	breq	.+6      	; 0x3216 <__divsf3+0x18>
    3210:	c7 c0       	rjmp	.+398    	; 0x33a0 <__fp_inf>
    3212:	51 11       	cpse	r21, r1
    3214:	10 c1       	rjmp	.+544    	; 0x3436 <__fp_szero>
    3216:	ca c0       	rjmp	.+404    	; 0x33ac <__fp_nan>

00003218 <__divsf3x>:
    3218:	eb d0       	rcall	.+470    	; 0x33f0 <__fp_split3>
    321a:	98 f3       	brcs	.-26     	; 0x3202 <__divsf3+0x4>

0000321c <__divsf3_pse>:
    321c:	99 23       	and	r25, r25
    321e:	c9 f3       	breq	.-14     	; 0x3212 <__divsf3+0x14>
    3220:	55 23       	and	r21, r21
    3222:	b1 f3       	breq	.-20     	; 0x3210 <__divsf3+0x12>
    3224:	95 1b       	sub	r25, r21
    3226:	55 0b       	sbc	r21, r21
    3228:	bb 27       	eor	r27, r27
    322a:	aa 27       	eor	r26, r26
    322c:	62 17       	cp	r22, r18
    322e:	73 07       	cpc	r23, r19
    3230:	84 07       	cpc	r24, r20
    3232:	38 f0       	brcs	.+14     	; 0x3242 <__divsf3_pse+0x26>
    3234:	9f 5f       	subi	r25, 0xFF	; 255
    3236:	5f 4f       	sbci	r21, 0xFF	; 255
    3238:	22 0f       	add	r18, r18
    323a:	33 1f       	adc	r19, r19
    323c:	44 1f       	adc	r20, r20
    323e:	aa 1f       	adc	r26, r26
    3240:	a9 f3       	breq	.-22     	; 0x322c <__divsf3_pse+0x10>
    3242:	33 d0       	rcall	.+102    	; 0x32aa <__divsf3_pse+0x8e>
    3244:	0e 2e       	mov	r0, r30
    3246:	3a f0       	brmi	.+14     	; 0x3256 <__divsf3_pse+0x3a>
    3248:	e0 e8       	ldi	r30, 0x80	; 128
    324a:	30 d0       	rcall	.+96     	; 0x32ac <__divsf3_pse+0x90>
    324c:	91 50       	subi	r25, 0x01	; 1
    324e:	50 40       	sbci	r21, 0x00	; 0
    3250:	e6 95       	lsr	r30
    3252:	00 1c       	adc	r0, r0
    3254:	ca f7       	brpl	.-14     	; 0x3248 <__divsf3_pse+0x2c>
    3256:	29 d0       	rcall	.+82     	; 0x32aa <__divsf3_pse+0x8e>
    3258:	fe 2f       	mov	r31, r30
    325a:	27 d0       	rcall	.+78     	; 0x32aa <__divsf3_pse+0x8e>
    325c:	66 0f       	add	r22, r22
    325e:	77 1f       	adc	r23, r23
    3260:	88 1f       	adc	r24, r24
    3262:	bb 1f       	adc	r27, r27
    3264:	26 17       	cp	r18, r22
    3266:	37 07       	cpc	r19, r23
    3268:	48 07       	cpc	r20, r24
    326a:	ab 07       	cpc	r26, r27
    326c:	b0 e8       	ldi	r27, 0x80	; 128
    326e:	09 f0       	breq	.+2      	; 0x3272 <__divsf3_pse+0x56>
    3270:	bb 0b       	sbc	r27, r27
    3272:	80 2d       	mov	r24, r0
    3274:	bf 01       	movw	r22, r30
    3276:	ff 27       	eor	r31, r31
    3278:	93 58       	subi	r25, 0x83	; 131
    327a:	5f 4f       	sbci	r21, 0xFF	; 255
    327c:	2a f0       	brmi	.+10     	; 0x3288 <__divsf3_pse+0x6c>
    327e:	9e 3f       	cpi	r25, 0xFE	; 254
    3280:	51 05       	cpc	r21, r1
    3282:	68 f0       	brcs	.+26     	; 0x329e <__divsf3_pse+0x82>
    3284:	8d c0       	rjmp	.+282    	; 0x33a0 <__fp_inf>
    3286:	d7 c0       	rjmp	.+430    	; 0x3436 <__fp_szero>
    3288:	5f 3f       	cpi	r21, 0xFF	; 255
    328a:	ec f3       	brlt	.-6      	; 0x3286 <__divsf3_pse+0x6a>
    328c:	98 3e       	cpi	r25, 0xE8	; 232
    328e:	dc f3       	brlt	.-10     	; 0x3286 <__divsf3_pse+0x6a>
    3290:	86 95       	lsr	r24
    3292:	77 95       	ror	r23
    3294:	67 95       	ror	r22
    3296:	b7 95       	ror	r27
    3298:	f7 95       	ror	r31
    329a:	9f 5f       	subi	r25, 0xFF	; 255
    329c:	c9 f7       	brne	.-14     	; 0x3290 <__divsf3_pse+0x74>
    329e:	88 0f       	add	r24, r24
    32a0:	91 1d       	adc	r25, r1
    32a2:	96 95       	lsr	r25
    32a4:	87 95       	ror	r24
    32a6:	97 f9       	bld	r25, 7
    32a8:	08 95       	ret
    32aa:	e1 e0       	ldi	r30, 0x01	; 1
    32ac:	66 0f       	add	r22, r22
    32ae:	77 1f       	adc	r23, r23
    32b0:	88 1f       	adc	r24, r24
    32b2:	bb 1f       	adc	r27, r27
    32b4:	62 17       	cp	r22, r18
    32b6:	73 07       	cpc	r23, r19
    32b8:	84 07       	cpc	r24, r20
    32ba:	ba 07       	cpc	r27, r26
    32bc:	20 f0       	brcs	.+8      	; 0x32c6 <__divsf3_pse+0xaa>
    32be:	62 1b       	sub	r22, r18
    32c0:	73 0b       	sbc	r23, r19
    32c2:	84 0b       	sbc	r24, r20
    32c4:	ba 0b       	sbc	r27, r26
    32c6:	ee 1f       	adc	r30, r30
    32c8:	88 f7       	brcc	.-30     	; 0x32ac <__divsf3_pse+0x90>
    32ca:	e0 95       	com	r30
    32cc:	08 95       	ret

000032ce <__fixunssfsi>:
    32ce:	98 d0       	rcall	.+304    	; 0x3400 <__fp_splitA>
    32d0:	88 f0       	brcs	.+34     	; 0x32f4 <__fixunssfsi+0x26>
    32d2:	9f 57       	subi	r25, 0x7F	; 127
    32d4:	90 f0       	brcs	.+36     	; 0x32fa <__fixunssfsi+0x2c>
    32d6:	b9 2f       	mov	r27, r25
    32d8:	99 27       	eor	r25, r25
    32da:	b7 51       	subi	r27, 0x17	; 23
    32dc:	a0 f0       	brcs	.+40     	; 0x3306 <__fixunssfsi+0x38>
    32de:	d1 f0       	breq	.+52     	; 0x3314 <__fixunssfsi+0x46>
    32e0:	66 0f       	add	r22, r22
    32e2:	77 1f       	adc	r23, r23
    32e4:	88 1f       	adc	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	1a f0       	brmi	.+6      	; 0x32f0 <__fixunssfsi+0x22>
    32ea:	ba 95       	dec	r27
    32ec:	c9 f7       	brne	.-14     	; 0x32e0 <__fixunssfsi+0x12>
    32ee:	12 c0       	rjmp	.+36     	; 0x3314 <__fixunssfsi+0x46>
    32f0:	b1 30       	cpi	r27, 0x01	; 1
    32f2:	81 f0       	breq	.+32     	; 0x3314 <__fixunssfsi+0x46>
    32f4:	9f d0       	rcall	.+318    	; 0x3434 <__fp_zero>
    32f6:	b1 e0       	ldi	r27, 0x01	; 1
    32f8:	08 95       	ret
    32fa:	9c c0       	rjmp	.+312    	; 0x3434 <__fp_zero>
    32fc:	67 2f       	mov	r22, r23
    32fe:	78 2f       	mov	r23, r24
    3300:	88 27       	eor	r24, r24
    3302:	b8 5f       	subi	r27, 0xF8	; 248
    3304:	39 f0       	breq	.+14     	; 0x3314 <__fixunssfsi+0x46>
    3306:	b9 3f       	cpi	r27, 0xF9	; 249
    3308:	cc f3       	brlt	.-14     	; 0x32fc <__fixunssfsi+0x2e>
    330a:	86 95       	lsr	r24
    330c:	77 95       	ror	r23
    330e:	67 95       	ror	r22
    3310:	b3 95       	inc	r27
    3312:	d9 f7       	brne	.-10     	; 0x330a <__fixunssfsi+0x3c>
    3314:	3e f4       	brtc	.+14     	; 0x3324 <__fixunssfsi+0x56>
    3316:	90 95       	com	r25
    3318:	80 95       	com	r24
    331a:	70 95       	com	r23
    331c:	61 95       	neg	r22
    331e:	7f 4f       	sbci	r23, 0xFF	; 255
    3320:	8f 4f       	sbci	r24, 0xFF	; 255
    3322:	9f 4f       	sbci	r25, 0xFF	; 255
    3324:	08 95       	ret

00003326 <__floatunsisf>:
    3326:	e8 94       	clt
    3328:	09 c0       	rjmp	.+18     	; 0x333c <__floatsisf+0x12>

0000332a <__floatsisf>:
    332a:	97 fb       	bst	r25, 7
    332c:	3e f4       	brtc	.+14     	; 0x333c <__floatsisf+0x12>
    332e:	90 95       	com	r25
    3330:	80 95       	com	r24
    3332:	70 95       	com	r23
    3334:	61 95       	neg	r22
    3336:	7f 4f       	sbci	r23, 0xFF	; 255
    3338:	8f 4f       	sbci	r24, 0xFF	; 255
    333a:	9f 4f       	sbci	r25, 0xFF	; 255
    333c:	99 23       	and	r25, r25
    333e:	a9 f0       	breq	.+42     	; 0x336a <__floatsisf+0x40>
    3340:	f9 2f       	mov	r31, r25
    3342:	96 e9       	ldi	r25, 0x96	; 150
    3344:	bb 27       	eor	r27, r27
    3346:	93 95       	inc	r25
    3348:	f6 95       	lsr	r31
    334a:	87 95       	ror	r24
    334c:	77 95       	ror	r23
    334e:	67 95       	ror	r22
    3350:	b7 95       	ror	r27
    3352:	f1 11       	cpse	r31, r1
    3354:	f8 cf       	rjmp	.-16     	; 0x3346 <__floatsisf+0x1c>
    3356:	fa f4       	brpl	.+62     	; 0x3396 <__floatsisf+0x6c>
    3358:	bb 0f       	add	r27, r27
    335a:	11 f4       	brne	.+4      	; 0x3360 <__floatsisf+0x36>
    335c:	60 ff       	sbrs	r22, 0
    335e:	1b c0       	rjmp	.+54     	; 0x3396 <__floatsisf+0x6c>
    3360:	6f 5f       	subi	r22, 0xFF	; 255
    3362:	7f 4f       	sbci	r23, 0xFF	; 255
    3364:	8f 4f       	sbci	r24, 0xFF	; 255
    3366:	9f 4f       	sbci	r25, 0xFF	; 255
    3368:	16 c0       	rjmp	.+44     	; 0x3396 <__floatsisf+0x6c>
    336a:	88 23       	and	r24, r24
    336c:	11 f0       	breq	.+4      	; 0x3372 <__floatsisf+0x48>
    336e:	96 e9       	ldi	r25, 0x96	; 150
    3370:	11 c0       	rjmp	.+34     	; 0x3394 <__floatsisf+0x6a>
    3372:	77 23       	and	r23, r23
    3374:	21 f0       	breq	.+8      	; 0x337e <__floatsisf+0x54>
    3376:	9e e8       	ldi	r25, 0x8E	; 142
    3378:	87 2f       	mov	r24, r23
    337a:	76 2f       	mov	r23, r22
    337c:	05 c0       	rjmp	.+10     	; 0x3388 <__floatsisf+0x5e>
    337e:	66 23       	and	r22, r22
    3380:	71 f0       	breq	.+28     	; 0x339e <__floatsisf+0x74>
    3382:	96 e8       	ldi	r25, 0x86	; 134
    3384:	86 2f       	mov	r24, r22
    3386:	70 e0       	ldi	r23, 0x00	; 0
    3388:	60 e0       	ldi	r22, 0x00	; 0
    338a:	2a f0       	brmi	.+10     	; 0x3396 <__floatsisf+0x6c>
    338c:	9a 95       	dec	r25
    338e:	66 0f       	add	r22, r22
    3390:	77 1f       	adc	r23, r23
    3392:	88 1f       	adc	r24, r24
    3394:	da f7       	brpl	.-10     	; 0x338c <__floatsisf+0x62>
    3396:	88 0f       	add	r24, r24
    3398:	96 95       	lsr	r25
    339a:	87 95       	ror	r24
    339c:	97 f9       	bld	r25, 7
    339e:	08 95       	ret

000033a0 <__fp_inf>:
    33a0:	97 f9       	bld	r25, 7
    33a2:	9f 67       	ori	r25, 0x7F	; 127
    33a4:	80 e8       	ldi	r24, 0x80	; 128
    33a6:	70 e0       	ldi	r23, 0x00	; 0
    33a8:	60 e0       	ldi	r22, 0x00	; 0
    33aa:	08 95       	ret

000033ac <__fp_nan>:
    33ac:	9f ef       	ldi	r25, 0xFF	; 255
    33ae:	80 ec       	ldi	r24, 0xC0	; 192
    33b0:	08 95       	ret

000033b2 <__fp_pscA>:
    33b2:	00 24       	eor	r0, r0
    33b4:	0a 94       	dec	r0
    33b6:	16 16       	cp	r1, r22
    33b8:	17 06       	cpc	r1, r23
    33ba:	18 06       	cpc	r1, r24
    33bc:	09 06       	cpc	r0, r25
    33be:	08 95       	ret

000033c0 <__fp_pscB>:
    33c0:	00 24       	eor	r0, r0
    33c2:	0a 94       	dec	r0
    33c4:	12 16       	cp	r1, r18
    33c6:	13 06       	cpc	r1, r19
    33c8:	14 06       	cpc	r1, r20
    33ca:	05 06       	cpc	r0, r21
    33cc:	08 95       	ret

000033ce <__fp_round>:
    33ce:	09 2e       	mov	r0, r25
    33d0:	03 94       	inc	r0
    33d2:	00 0c       	add	r0, r0
    33d4:	11 f4       	brne	.+4      	; 0x33da <__fp_round+0xc>
    33d6:	88 23       	and	r24, r24
    33d8:	52 f0       	brmi	.+20     	; 0x33ee <__fp_round+0x20>
    33da:	bb 0f       	add	r27, r27
    33dc:	40 f4       	brcc	.+16     	; 0x33ee <__fp_round+0x20>
    33de:	bf 2b       	or	r27, r31
    33e0:	11 f4       	brne	.+4      	; 0x33e6 <__fp_round+0x18>
    33e2:	60 ff       	sbrs	r22, 0
    33e4:	04 c0       	rjmp	.+8      	; 0x33ee <__fp_round+0x20>
    33e6:	6f 5f       	subi	r22, 0xFF	; 255
    33e8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ea:	8f 4f       	sbci	r24, 0xFF	; 255
    33ec:	9f 4f       	sbci	r25, 0xFF	; 255
    33ee:	08 95       	ret

000033f0 <__fp_split3>:
    33f0:	57 fd       	sbrc	r21, 7
    33f2:	90 58       	subi	r25, 0x80	; 128
    33f4:	44 0f       	add	r20, r20
    33f6:	55 1f       	adc	r21, r21
    33f8:	59 f0       	breq	.+22     	; 0x3410 <__fp_splitA+0x10>
    33fa:	5f 3f       	cpi	r21, 0xFF	; 255
    33fc:	71 f0       	breq	.+28     	; 0x341a <__fp_splitA+0x1a>
    33fe:	47 95       	ror	r20

00003400 <__fp_splitA>:
    3400:	88 0f       	add	r24, r24
    3402:	97 fb       	bst	r25, 7
    3404:	99 1f       	adc	r25, r25
    3406:	61 f0       	breq	.+24     	; 0x3420 <__fp_splitA+0x20>
    3408:	9f 3f       	cpi	r25, 0xFF	; 255
    340a:	79 f0       	breq	.+30     	; 0x342a <__fp_splitA+0x2a>
    340c:	87 95       	ror	r24
    340e:	08 95       	ret
    3410:	12 16       	cp	r1, r18
    3412:	13 06       	cpc	r1, r19
    3414:	14 06       	cpc	r1, r20
    3416:	55 1f       	adc	r21, r21
    3418:	f2 cf       	rjmp	.-28     	; 0x33fe <__fp_split3+0xe>
    341a:	46 95       	lsr	r20
    341c:	f1 df       	rcall	.-30     	; 0x3400 <__fp_splitA>
    341e:	08 c0       	rjmp	.+16     	; 0x3430 <__fp_splitA+0x30>
    3420:	16 16       	cp	r1, r22
    3422:	17 06       	cpc	r1, r23
    3424:	18 06       	cpc	r1, r24
    3426:	99 1f       	adc	r25, r25
    3428:	f1 cf       	rjmp	.-30     	; 0x340c <__fp_splitA+0xc>
    342a:	86 95       	lsr	r24
    342c:	71 05       	cpc	r23, r1
    342e:	61 05       	cpc	r22, r1
    3430:	08 94       	sec
    3432:	08 95       	ret

00003434 <__fp_zero>:
    3434:	e8 94       	clt

00003436 <__fp_szero>:
    3436:	bb 27       	eor	r27, r27
    3438:	66 27       	eor	r22, r22
    343a:	77 27       	eor	r23, r23
    343c:	cb 01       	movw	r24, r22
    343e:	97 f9       	bld	r25, 7
    3440:	08 95       	ret

00003442 <__mulsf3>:
    3442:	0b d0       	rcall	.+22     	; 0x345a <__mulsf3x>
    3444:	c4 cf       	rjmp	.-120    	; 0x33ce <__fp_round>
    3446:	b5 df       	rcall	.-150    	; 0x33b2 <__fp_pscA>
    3448:	28 f0       	brcs	.+10     	; 0x3454 <__mulsf3+0x12>
    344a:	ba df       	rcall	.-140    	; 0x33c0 <__fp_pscB>
    344c:	18 f0       	brcs	.+6      	; 0x3454 <__mulsf3+0x12>
    344e:	95 23       	and	r25, r21
    3450:	09 f0       	breq	.+2      	; 0x3454 <__mulsf3+0x12>
    3452:	a6 cf       	rjmp	.-180    	; 0x33a0 <__fp_inf>
    3454:	ab cf       	rjmp	.-170    	; 0x33ac <__fp_nan>
    3456:	11 24       	eor	r1, r1
    3458:	ee cf       	rjmp	.-36     	; 0x3436 <__fp_szero>

0000345a <__mulsf3x>:
    345a:	ca df       	rcall	.-108    	; 0x33f0 <__fp_split3>
    345c:	a0 f3       	brcs	.-24     	; 0x3446 <__mulsf3+0x4>

0000345e <__mulsf3_pse>:
    345e:	95 9f       	mul	r25, r21
    3460:	d1 f3       	breq	.-12     	; 0x3456 <__mulsf3+0x14>
    3462:	95 0f       	add	r25, r21
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	55 1f       	adc	r21, r21
    3468:	62 9f       	mul	r22, r18
    346a:	f0 01       	movw	r30, r0
    346c:	72 9f       	mul	r23, r18
    346e:	bb 27       	eor	r27, r27
    3470:	f0 0d       	add	r31, r0
    3472:	b1 1d       	adc	r27, r1
    3474:	63 9f       	mul	r22, r19
    3476:	aa 27       	eor	r26, r26
    3478:	f0 0d       	add	r31, r0
    347a:	b1 1d       	adc	r27, r1
    347c:	aa 1f       	adc	r26, r26
    347e:	64 9f       	mul	r22, r20
    3480:	66 27       	eor	r22, r22
    3482:	b0 0d       	add	r27, r0
    3484:	a1 1d       	adc	r26, r1
    3486:	66 1f       	adc	r22, r22
    3488:	82 9f       	mul	r24, r18
    348a:	22 27       	eor	r18, r18
    348c:	b0 0d       	add	r27, r0
    348e:	a1 1d       	adc	r26, r1
    3490:	62 1f       	adc	r22, r18
    3492:	73 9f       	mul	r23, r19
    3494:	b0 0d       	add	r27, r0
    3496:	a1 1d       	adc	r26, r1
    3498:	62 1f       	adc	r22, r18
    349a:	83 9f       	mul	r24, r19
    349c:	a0 0d       	add	r26, r0
    349e:	61 1d       	adc	r22, r1
    34a0:	22 1f       	adc	r18, r18
    34a2:	74 9f       	mul	r23, r20
    34a4:	33 27       	eor	r19, r19
    34a6:	a0 0d       	add	r26, r0
    34a8:	61 1d       	adc	r22, r1
    34aa:	23 1f       	adc	r18, r19
    34ac:	84 9f       	mul	r24, r20
    34ae:	60 0d       	add	r22, r0
    34b0:	21 1d       	adc	r18, r1
    34b2:	82 2f       	mov	r24, r18
    34b4:	76 2f       	mov	r23, r22
    34b6:	6a 2f       	mov	r22, r26
    34b8:	11 24       	eor	r1, r1
    34ba:	9f 57       	subi	r25, 0x7F	; 127
    34bc:	50 40       	sbci	r21, 0x00	; 0
    34be:	8a f0       	brmi	.+34     	; 0x34e2 <__mulsf3_pse+0x84>
    34c0:	e1 f0       	breq	.+56     	; 0x34fa <__mulsf3_pse+0x9c>
    34c2:	88 23       	and	r24, r24
    34c4:	4a f0       	brmi	.+18     	; 0x34d8 <__mulsf3_pse+0x7a>
    34c6:	ee 0f       	add	r30, r30
    34c8:	ff 1f       	adc	r31, r31
    34ca:	bb 1f       	adc	r27, r27
    34cc:	66 1f       	adc	r22, r22
    34ce:	77 1f       	adc	r23, r23
    34d0:	88 1f       	adc	r24, r24
    34d2:	91 50       	subi	r25, 0x01	; 1
    34d4:	50 40       	sbci	r21, 0x00	; 0
    34d6:	a9 f7       	brne	.-22     	; 0x34c2 <__mulsf3_pse+0x64>
    34d8:	9e 3f       	cpi	r25, 0xFE	; 254
    34da:	51 05       	cpc	r21, r1
    34dc:	70 f0       	brcs	.+28     	; 0x34fa <__mulsf3_pse+0x9c>
    34de:	60 cf       	rjmp	.-320    	; 0x33a0 <__fp_inf>
    34e0:	aa cf       	rjmp	.-172    	; 0x3436 <__fp_szero>
    34e2:	5f 3f       	cpi	r21, 0xFF	; 255
    34e4:	ec f3       	brlt	.-6      	; 0x34e0 <__mulsf3_pse+0x82>
    34e6:	98 3e       	cpi	r25, 0xE8	; 232
    34e8:	dc f3       	brlt	.-10     	; 0x34e0 <__mulsf3_pse+0x82>
    34ea:	86 95       	lsr	r24
    34ec:	77 95       	ror	r23
    34ee:	67 95       	ror	r22
    34f0:	b7 95       	ror	r27
    34f2:	f7 95       	ror	r31
    34f4:	e7 95       	ror	r30
    34f6:	9f 5f       	subi	r25, 0xFF	; 255
    34f8:	c1 f7       	brne	.-16     	; 0x34ea <__mulsf3_pse+0x8c>
    34fa:	fe 2b       	or	r31, r30
    34fc:	88 0f       	add	r24, r24
    34fe:	91 1d       	adc	r25, r1
    3500:	96 95       	lsr	r25
    3502:	87 95       	ror	r24
    3504:	97 f9       	bld	r25, 7
    3506:	08 95       	ret

00003508 <__tablejump2__>:
    3508:	ee 0f       	add	r30, r30
    350a:	ff 1f       	adc	r31, r31
    350c:	88 1f       	adc	r24, r24
    350e:	8b bf       	out	0x3b, r24	; 59
    3510:	07 90       	elpm	r0, Z+
    3512:	f6 91       	elpm	r31, Z
    3514:	e0 2d       	mov	r30, r0
    3516:	19 94       	eijmp

00003518 <malloc>:
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	82 30       	cpi	r24, 0x02	; 2
    3522:	91 05       	cpc	r25, r1
    3524:	10 f4       	brcc	.+4      	; 0x352a <malloc+0x12>
    3526:	82 e0       	ldi	r24, 0x02	; 2
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	e0 91 0b 0d 	lds	r30, 0x0D0B	; 0x800d0b <__flp>
    352e:	f0 91 0c 0d 	lds	r31, 0x0D0C	; 0x800d0c <__flp+0x1>
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	a0 e0       	ldi	r26, 0x00	; 0
    3538:	b0 e0       	ldi	r27, 0x00	; 0
    353a:	30 97       	sbiw	r30, 0x00	; 0
    353c:	19 f1       	breq	.+70     	; 0x3584 <malloc+0x6c>
    353e:	40 81       	ld	r20, Z
    3540:	51 81       	ldd	r21, Z+1	; 0x01
    3542:	02 81       	ldd	r16, Z+2	; 0x02
    3544:	13 81       	ldd	r17, Z+3	; 0x03
    3546:	48 17       	cp	r20, r24
    3548:	59 07       	cpc	r21, r25
    354a:	c8 f0       	brcs	.+50     	; 0x357e <malloc+0x66>
    354c:	84 17       	cp	r24, r20
    354e:	95 07       	cpc	r25, r21
    3550:	69 f4       	brne	.+26     	; 0x356c <malloc+0x54>
    3552:	10 97       	sbiw	r26, 0x00	; 0
    3554:	31 f0       	breq	.+12     	; 0x3562 <malloc+0x4a>
    3556:	12 96       	adiw	r26, 0x02	; 2
    3558:	0c 93       	st	X, r16
    355a:	12 97       	sbiw	r26, 0x02	; 2
    355c:	13 96       	adiw	r26, 0x03	; 3
    355e:	1c 93       	st	X, r17
    3560:	27 c0       	rjmp	.+78     	; 0x35b0 <malloc+0x98>
    3562:	00 93 0b 0d 	sts	0x0D0B, r16	; 0x800d0b <__flp>
    3566:	10 93 0c 0d 	sts	0x0D0C, r17	; 0x800d0c <__flp+0x1>
    356a:	22 c0       	rjmp	.+68     	; 0x35b0 <malloc+0x98>
    356c:	21 15       	cp	r18, r1
    356e:	31 05       	cpc	r19, r1
    3570:	19 f0       	breq	.+6      	; 0x3578 <malloc+0x60>
    3572:	42 17       	cp	r20, r18
    3574:	53 07       	cpc	r21, r19
    3576:	18 f4       	brcc	.+6      	; 0x357e <malloc+0x66>
    3578:	9a 01       	movw	r18, r20
    357a:	bd 01       	movw	r22, r26
    357c:	ef 01       	movw	r28, r30
    357e:	df 01       	movw	r26, r30
    3580:	f8 01       	movw	r30, r16
    3582:	db cf       	rjmp	.-74     	; 0x353a <malloc+0x22>
    3584:	21 15       	cp	r18, r1
    3586:	31 05       	cpc	r19, r1
    3588:	f9 f0       	breq	.+62     	; 0x35c8 <malloc+0xb0>
    358a:	28 1b       	sub	r18, r24
    358c:	39 0b       	sbc	r19, r25
    358e:	24 30       	cpi	r18, 0x04	; 4
    3590:	31 05       	cpc	r19, r1
    3592:	80 f4       	brcc	.+32     	; 0x35b4 <malloc+0x9c>
    3594:	8a 81       	ldd	r24, Y+2	; 0x02
    3596:	9b 81       	ldd	r25, Y+3	; 0x03
    3598:	61 15       	cp	r22, r1
    359a:	71 05       	cpc	r23, r1
    359c:	21 f0       	breq	.+8      	; 0x35a6 <malloc+0x8e>
    359e:	fb 01       	movw	r30, r22
    35a0:	93 83       	std	Z+3, r25	; 0x03
    35a2:	82 83       	std	Z+2, r24	; 0x02
    35a4:	04 c0       	rjmp	.+8      	; 0x35ae <malloc+0x96>
    35a6:	90 93 0c 0d 	sts	0x0D0C, r25	; 0x800d0c <__flp+0x1>
    35aa:	80 93 0b 0d 	sts	0x0D0B, r24	; 0x800d0b <__flp>
    35ae:	fe 01       	movw	r30, r28
    35b0:	32 96       	adiw	r30, 0x02	; 2
    35b2:	44 c0       	rjmp	.+136    	; 0x363c <malloc+0x124>
    35b4:	fe 01       	movw	r30, r28
    35b6:	e2 0f       	add	r30, r18
    35b8:	f3 1f       	adc	r31, r19
    35ba:	81 93       	st	Z+, r24
    35bc:	91 93       	st	Z+, r25
    35be:	22 50       	subi	r18, 0x02	; 2
    35c0:	31 09       	sbc	r19, r1
    35c2:	39 83       	std	Y+1, r19	; 0x01
    35c4:	28 83       	st	Y, r18
    35c6:	3a c0       	rjmp	.+116    	; 0x363c <malloc+0x124>
    35c8:	20 91 09 0d 	lds	r18, 0x0D09	; 0x800d09 <__brkval>
    35cc:	30 91 0a 0d 	lds	r19, 0x0D0A	; 0x800d0a <__brkval+0x1>
    35d0:	23 2b       	or	r18, r19
    35d2:	41 f4       	brne	.+16     	; 0x35e4 <malloc+0xcc>
    35d4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    35d8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    35dc:	30 93 0a 0d 	sts	0x0D0A, r19	; 0x800d0a <__brkval+0x1>
    35e0:	20 93 09 0d 	sts	0x0D09, r18	; 0x800d09 <__brkval>
    35e4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    35e8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    35ec:	21 15       	cp	r18, r1
    35ee:	31 05       	cpc	r19, r1
    35f0:	41 f4       	brne	.+16     	; 0x3602 <malloc+0xea>
    35f2:	2d b7       	in	r18, 0x3d	; 61
    35f4:	3e b7       	in	r19, 0x3e	; 62
    35f6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    35fa:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    35fe:	24 1b       	sub	r18, r20
    3600:	35 0b       	sbc	r19, r21
    3602:	e0 91 09 0d 	lds	r30, 0x0D09	; 0x800d09 <__brkval>
    3606:	f0 91 0a 0d 	lds	r31, 0x0D0A	; 0x800d0a <__brkval+0x1>
    360a:	e2 17       	cp	r30, r18
    360c:	f3 07       	cpc	r31, r19
    360e:	a0 f4       	brcc	.+40     	; 0x3638 <malloc+0x120>
    3610:	2e 1b       	sub	r18, r30
    3612:	3f 0b       	sbc	r19, r31
    3614:	28 17       	cp	r18, r24
    3616:	39 07       	cpc	r19, r25
    3618:	78 f0       	brcs	.+30     	; 0x3638 <malloc+0x120>
    361a:	ac 01       	movw	r20, r24
    361c:	4e 5f       	subi	r20, 0xFE	; 254
    361e:	5f 4f       	sbci	r21, 0xFF	; 255
    3620:	24 17       	cp	r18, r20
    3622:	35 07       	cpc	r19, r21
    3624:	48 f0       	brcs	.+18     	; 0x3638 <malloc+0x120>
    3626:	4e 0f       	add	r20, r30
    3628:	5f 1f       	adc	r21, r31
    362a:	50 93 0a 0d 	sts	0x0D0A, r21	; 0x800d0a <__brkval+0x1>
    362e:	40 93 09 0d 	sts	0x0D09, r20	; 0x800d09 <__brkval>
    3632:	81 93       	st	Z+, r24
    3634:	91 93       	st	Z+, r25
    3636:	02 c0       	rjmp	.+4      	; 0x363c <malloc+0x124>
    3638:	e0 e0       	ldi	r30, 0x00	; 0
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	cf 01       	movw	r24, r30
    363e:	df 91       	pop	r29
    3640:	cf 91       	pop	r28
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	08 95       	ret

00003648 <free>:
    3648:	cf 93       	push	r28
    364a:	df 93       	push	r29
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	09 f4       	brne	.+2      	; 0x3652 <free+0xa>
    3650:	81 c0       	rjmp	.+258    	; 0x3754 <free+0x10c>
    3652:	fc 01       	movw	r30, r24
    3654:	32 97       	sbiw	r30, 0x02	; 2
    3656:	13 82       	std	Z+3, r1	; 0x03
    3658:	12 82       	std	Z+2, r1	; 0x02
    365a:	a0 91 0b 0d 	lds	r26, 0x0D0B	; 0x800d0b <__flp>
    365e:	b0 91 0c 0d 	lds	r27, 0x0D0C	; 0x800d0c <__flp+0x1>
    3662:	10 97       	sbiw	r26, 0x00	; 0
    3664:	81 f4       	brne	.+32     	; 0x3686 <free+0x3e>
    3666:	20 81       	ld	r18, Z
    3668:	31 81       	ldd	r19, Z+1	; 0x01
    366a:	82 0f       	add	r24, r18
    366c:	93 1f       	adc	r25, r19
    366e:	20 91 09 0d 	lds	r18, 0x0D09	; 0x800d09 <__brkval>
    3672:	30 91 0a 0d 	lds	r19, 0x0D0A	; 0x800d0a <__brkval+0x1>
    3676:	28 17       	cp	r18, r24
    3678:	39 07       	cpc	r19, r25
    367a:	51 f5       	brne	.+84     	; 0x36d0 <free+0x88>
    367c:	f0 93 0a 0d 	sts	0x0D0A, r31	; 0x800d0a <__brkval+0x1>
    3680:	e0 93 09 0d 	sts	0x0D09, r30	; 0x800d09 <__brkval>
    3684:	67 c0       	rjmp	.+206    	; 0x3754 <free+0x10c>
    3686:	ed 01       	movw	r28, r26
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	ce 17       	cp	r28, r30
    368e:	df 07       	cpc	r29, r31
    3690:	40 f4       	brcc	.+16     	; 0x36a2 <free+0x5a>
    3692:	4a 81       	ldd	r20, Y+2	; 0x02
    3694:	5b 81       	ldd	r21, Y+3	; 0x03
    3696:	9e 01       	movw	r18, r28
    3698:	41 15       	cp	r20, r1
    369a:	51 05       	cpc	r21, r1
    369c:	f1 f0       	breq	.+60     	; 0x36da <free+0x92>
    369e:	ea 01       	movw	r28, r20
    36a0:	f5 cf       	rjmp	.-22     	; 0x368c <free+0x44>
    36a2:	d3 83       	std	Z+3, r29	; 0x03
    36a4:	c2 83       	std	Z+2, r28	; 0x02
    36a6:	40 81       	ld	r20, Z
    36a8:	51 81       	ldd	r21, Z+1	; 0x01
    36aa:	84 0f       	add	r24, r20
    36ac:	95 1f       	adc	r25, r21
    36ae:	c8 17       	cp	r28, r24
    36b0:	d9 07       	cpc	r29, r25
    36b2:	59 f4       	brne	.+22     	; 0x36ca <free+0x82>
    36b4:	88 81       	ld	r24, Y
    36b6:	99 81       	ldd	r25, Y+1	; 0x01
    36b8:	84 0f       	add	r24, r20
    36ba:	95 1f       	adc	r25, r21
    36bc:	02 96       	adiw	r24, 0x02	; 2
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	80 83       	st	Z, r24
    36c2:	8a 81       	ldd	r24, Y+2	; 0x02
    36c4:	9b 81       	ldd	r25, Y+3	; 0x03
    36c6:	93 83       	std	Z+3, r25	; 0x03
    36c8:	82 83       	std	Z+2, r24	; 0x02
    36ca:	21 15       	cp	r18, r1
    36cc:	31 05       	cpc	r19, r1
    36ce:	29 f4       	brne	.+10     	; 0x36da <free+0x92>
    36d0:	f0 93 0c 0d 	sts	0x0D0C, r31	; 0x800d0c <__flp+0x1>
    36d4:	e0 93 0b 0d 	sts	0x0D0B, r30	; 0x800d0b <__flp>
    36d8:	3d c0       	rjmp	.+122    	; 0x3754 <free+0x10c>
    36da:	e9 01       	movw	r28, r18
    36dc:	fb 83       	std	Y+3, r31	; 0x03
    36de:	ea 83       	std	Y+2, r30	; 0x02
    36e0:	49 91       	ld	r20, Y+
    36e2:	59 91       	ld	r21, Y+
    36e4:	c4 0f       	add	r28, r20
    36e6:	d5 1f       	adc	r29, r21
    36e8:	ec 17       	cp	r30, r28
    36ea:	fd 07       	cpc	r31, r29
    36ec:	61 f4       	brne	.+24     	; 0x3706 <free+0xbe>
    36ee:	80 81       	ld	r24, Z
    36f0:	91 81       	ldd	r25, Z+1	; 0x01
    36f2:	84 0f       	add	r24, r20
    36f4:	95 1f       	adc	r25, r21
    36f6:	02 96       	adiw	r24, 0x02	; 2
    36f8:	e9 01       	movw	r28, r18
    36fa:	99 83       	std	Y+1, r25	; 0x01
    36fc:	88 83       	st	Y, r24
    36fe:	82 81       	ldd	r24, Z+2	; 0x02
    3700:	93 81       	ldd	r25, Z+3	; 0x03
    3702:	9b 83       	std	Y+3, r25	; 0x03
    3704:	8a 83       	std	Y+2, r24	; 0x02
    3706:	e0 e0       	ldi	r30, 0x00	; 0
    3708:	f0 e0       	ldi	r31, 0x00	; 0
    370a:	12 96       	adiw	r26, 0x02	; 2
    370c:	8d 91       	ld	r24, X+
    370e:	9c 91       	ld	r25, X
    3710:	13 97       	sbiw	r26, 0x03	; 3
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	19 f0       	breq	.+6      	; 0x371c <free+0xd4>
    3716:	fd 01       	movw	r30, r26
    3718:	dc 01       	movw	r26, r24
    371a:	f7 cf       	rjmp	.-18     	; 0x370a <free+0xc2>
    371c:	8d 91       	ld	r24, X+
    371e:	9c 91       	ld	r25, X
    3720:	11 97       	sbiw	r26, 0x01	; 1
    3722:	9d 01       	movw	r18, r26
    3724:	2e 5f       	subi	r18, 0xFE	; 254
    3726:	3f 4f       	sbci	r19, 0xFF	; 255
    3728:	82 0f       	add	r24, r18
    372a:	93 1f       	adc	r25, r19
    372c:	20 91 09 0d 	lds	r18, 0x0D09	; 0x800d09 <__brkval>
    3730:	30 91 0a 0d 	lds	r19, 0x0D0A	; 0x800d0a <__brkval+0x1>
    3734:	28 17       	cp	r18, r24
    3736:	39 07       	cpc	r19, r25
    3738:	69 f4       	brne	.+26     	; 0x3754 <free+0x10c>
    373a:	30 97       	sbiw	r30, 0x00	; 0
    373c:	29 f4       	brne	.+10     	; 0x3748 <free+0x100>
    373e:	10 92 0c 0d 	sts	0x0D0C, r1	; 0x800d0c <__flp+0x1>
    3742:	10 92 0b 0d 	sts	0x0D0B, r1	; 0x800d0b <__flp>
    3746:	02 c0       	rjmp	.+4      	; 0x374c <free+0x104>
    3748:	13 82       	std	Z+3, r1	; 0x03
    374a:	12 82       	std	Z+2, r1	; 0x02
    374c:	b0 93 0a 0d 	sts	0x0D0A, r27	; 0x800d0a <__brkval+0x1>
    3750:	a0 93 09 0d 	sts	0x0D09, r26	; 0x800d09 <__brkval>
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	08 95       	ret

0000375a <abort>:
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	f8 94       	cli
    3760:	8f c0       	rjmp	.+286    	; 0x3880 <_exit>

00003762 <memcpy>:
    3762:	fb 01       	movw	r30, r22
    3764:	dc 01       	movw	r26, r24
    3766:	02 c0       	rjmp	.+4      	; 0x376c <memcpy+0xa>
    3768:	01 90       	ld	r0, Z+
    376a:	0d 92       	st	X+, r0
    376c:	41 50       	subi	r20, 0x01	; 1
    376e:	50 40       	sbci	r21, 0x00	; 0
    3770:	d8 f7       	brcc	.-10     	; 0x3768 <memcpy+0x6>
    3772:	08 95       	ret

00003774 <memset>:
    3774:	dc 01       	movw	r26, r24
    3776:	01 c0       	rjmp	.+2      	; 0x377a <memset+0x6>
    3778:	6d 93       	st	X+, r22
    377a:	41 50       	subi	r20, 0x01	; 1
    377c:	50 40       	sbci	r21, 0x00	; 0
    377e:	e0 f7       	brcc	.-8      	; 0x3778 <memset+0x4>
    3780:	08 95       	ret

00003782 <fgetc>:
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	ec 01       	movw	r28, r24
    3788:	2b 81       	ldd	r18, Y+3	; 0x03
    378a:	20 ff       	sbrs	r18, 0
    378c:	33 c0       	rjmp	.+102    	; 0x37f4 <fgetc+0x72>
    378e:	26 ff       	sbrs	r18, 6
    3790:	0a c0       	rjmp	.+20     	; 0x37a6 <fgetc+0x24>
    3792:	2f 7b       	andi	r18, 0xBF	; 191
    3794:	2b 83       	std	Y+3, r18	; 0x03
    3796:	8e 81       	ldd	r24, Y+6	; 0x06
    3798:	9f 81       	ldd	r25, Y+7	; 0x07
    379a:	01 96       	adiw	r24, 0x01	; 1
    379c:	9f 83       	std	Y+7, r25	; 0x07
    379e:	8e 83       	std	Y+6, r24	; 0x06
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	29 c0       	rjmp	.+82     	; 0x37f8 <fgetc+0x76>
    37a6:	22 ff       	sbrs	r18, 2
    37a8:	0f c0       	rjmp	.+30     	; 0x37c8 <fgetc+0x46>
    37aa:	e8 81       	ld	r30, Y
    37ac:	f9 81       	ldd	r31, Y+1	; 0x01
    37ae:	80 81       	ld	r24, Z
    37b0:	08 2e       	mov	r0, r24
    37b2:	00 0c       	add	r0, r0
    37b4:	99 0b       	sbc	r25, r25
    37b6:	00 97       	sbiw	r24, 0x00	; 0
    37b8:	19 f4       	brne	.+6      	; 0x37c0 <fgetc+0x3e>
    37ba:	20 62       	ori	r18, 0x20	; 32
    37bc:	2b 83       	std	Y+3, r18	; 0x03
    37be:	1a c0       	rjmp	.+52     	; 0x37f4 <fgetc+0x72>
    37c0:	31 96       	adiw	r30, 0x01	; 1
    37c2:	f9 83       	std	Y+1, r31	; 0x01
    37c4:	e8 83       	st	Y, r30
    37c6:	0e c0       	rjmp	.+28     	; 0x37e4 <fgetc+0x62>
    37c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    37ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    37cc:	19 95       	eicall
    37ce:	97 ff       	sbrs	r25, 7
    37d0:	09 c0       	rjmp	.+18     	; 0x37e4 <fgetc+0x62>
    37d2:	2b 81       	ldd	r18, Y+3	; 0x03
    37d4:	01 96       	adiw	r24, 0x01	; 1
    37d6:	11 f0       	breq	.+4      	; 0x37dc <fgetc+0x5a>
    37d8:	80 e2       	ldi	r24, 0x20	; 32
    37da:	01 c0       	rjmp	.+2      	; 0x37de <fgetc+0x5c>
    37dc:	80 e1       	ldi	r24, 0x10	; 16
    37de:	82 2b       	or	r24, r18
    37e0:	8b 83       	std	Y+3, r24	; 0x03
    37e2:	08 c0       	rjmp	.+16     	; 0x37f4 <fgetc+0x72>
    37e4:	2e 81       	ldd	r18, Y+6	; 0x06
    37e6:	3f 81       	ldd	r19, Y+7	; 0x07
    37e8:	2f 5f       	subi	r18, 0xFF	; 255
    37ea:	3f 4f       	sbci	r19, 0xFF	; 255
    37ec:	3f 83       	std	Y+7, r19	; 0x07
    37ee:	2e 83       	std	Y+6, r18	; 0x06
    37f0:	99 27       	eor	r25, r25
    37f2:	02 c0       	rjmp	.+4      	; 0x37f8 <fgetc+0x76>
    37f4:	8f ef       	ldi	r24, 0xFF	; 255
    37f6:	9f ef       	ldi	r25, 0xFF	; 255
    37f8:	df 91       	pop	r29
    37fa:	cf 91       	pop	r28
    37fc:	08 95       	ret

000037fe <putchar>:
    37fe:	60 91 0f 0d 	lds	r22, 0x0D0F	; 0x800d0f <__iob+0x2>
    3802:	70 91 10 0d 	lds	r23, 0x0D10	; 0x800d10 <__iob+0x3>
    3806:	00 c0       	rjmp	.+0      	; 0x3808 <fputc>

00003808 <fputc>:
    3808:	0f 93       	push	r16
    380a:	1f 93       	push	r17
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
    3810:	fb 01       	movw	r30, r22
    3812:	23 81       	ldd	r18, Z+3	; 0x03
    3814:	21 fd       	sbrc	r18, 1
    3816:	03 c0       	rjmp	.+6      	; 0x381e <fputc+0x16>
    3818:	8f ef       	ldi	r24, 0xFF	; 255
    381a:	9f ef       	ldi	r25, 0xFF	; 255
    381c:	2c c0       	rjmp	.+88     	; 0x3876 <fputc+0x6e>
    381e:	22 ff       	sbrs	r18, 2
    3820:	16 c0       	rjmp	.+44     	; 0x384e <fputc+0x46>
    3822:	46 81       	ldd	r20, Z+6	; 0x06
    3824:	57 81       	ldd	r21, Z+7	; 0x07
    3826:	24 81       	ldd	r18, Z+4	; 0x04
    3828:	35 81       	ldd	r19, Z+5	; 0x05
    382a:	42 17       	cp	r20, r18
    382c:	53 07       	cpc	r21, r19
    382e:	44 f4       	brge	.+16     	; 0x3840 <fputc+0x38>
    3830:	a0 81       	ld	r26, Z
    3832:	b1 81       	ldd	r27, Z+1	; 0x01
    3834:	9d 01       	movw	r18, r26
    3836:	2f 5f       	subi	r18, 0xFF	; 255
    3838:	3f 4f       	sbci	r19, 0xFF	; 255
    383a:	31 83       	std	Z+1, r19	; 0x01
    383c:	20 83       	st	Z, r18
    383e:	8c 93       	st	X, r24
    3840:	26 81       	ldd	r18, Z+6	; 0x06
    3842:	37 81       	ldd	r19, Z+7	; 0x07
    3844:	2f 5f       	subi	r18, 0xFF	; 255
    3846:	3f 4f       	sbci	r19, 0xFF	; 255
    3848:	37 83       	std	Z+7, r19	; 0x07
    384a:	26 83       	std	Z+6, r18	; 0x06
    384c:	14 c0       	rjmp	.+40     	; 0x3876 <fputc+0x6e>
    384e:	8b 01       	movw	r16, r22
    3850:	ec 01       	movw	r28, r24
    3852:	fb 01       	movw	r30, r22
    3854:	00 84       	ldd	r0, Z+8	; 0x08
    3856:	f1 85       	ldd	r31, Z+9	; 0x09
    3858:	e0 2d       	mov	r30, r0
    385a:	19 95       	eicall
    385c:	89 2b       	or	r24, r25
    385e:	e1 f6       	brne	.-72     	; 0x3818 <fputc+0x10>
    3860:	d8 01       	movw	r26, r16
    3862:	16 96       	adiw	r26, 0x06	; 6
    3864:	8d 91       	ld	r24, X+
    3866:	9c 91       	ld	r25, X
    3868:	17 97       	sbiw	r26, 0x07	; 7
    386a:	01 96       	adiw	r24, 0x01	; 1
    386c:	17 96       	adiw	r26, 0x07	; 7
    386e:	9c 93       	st	X, r25
    3870:	8e 93       	st	-X, r24
    3872:	16 97       	sbiw	r26, 0x06	; 6
    3874:	ce 01       	movw	r24, r28
    3876:	df 91       	pop	r29
    3878:	cf 91       	pop	r28
    387a:	1f 91       	pop	r17
    387c:	0f 91       	pop	r16
    387e:	08 95       	ret

00003880 <_exit>:
    3880:	f8 94       	cli

00003882 <__stop_program>:
    3882:	ff cf       	rjmp	.-2      	; 0x3882 <__stop_program>
