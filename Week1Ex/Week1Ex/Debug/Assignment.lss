
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  00002f86  0000301a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000acb  00800258  00800258  00003072  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003072  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000638  00000000  00000000  000030e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007dbc  00000000  00000000  0000371c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002052  00000000  00000000  0000b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004025  00000000  00000000  0000d52a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016b4  00000000  00000000  00011550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027c0  00000000  00000000  00012c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000074a3  00000000  00000000  000153c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000618  00000000  00000000  0001c867  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	93 c0       	rjmp	.+294    	; 0x128 <__ctors_end>
       2:	00 00       	nop
       4:	b2 c0       	rjmp	.+356    	; 0x16a <__bad_interrupt>
       6:	00 00       	nop
       8:	b0 c0       	rjmp	.+352    	; 0x16a <__bad_interrupt>
       a:	00 00       	nop
       c:	ae c0       	rjmp	.+348    	; 0x16a <__bad_interrupt>
       e:	00 00       	nop
      10:	ac c0       	rjmp	.+344    	; 0x16a <__bad_interrupt>
      12:	00 00       	nop
      14:	aa c0       	rjmp	.+340    	; 0x16a <__bad_interrupt>
      16:	00 00       	nop
      18:	a8 c0       	rjmp	.+336    	; 0x16a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a6 c0       	rjmp	.+332    	; 0x16a <__bad_interrupt>
      1e:	00 00       	nop
      20:	a4 c0       	rjmp	.+328    	; 0x16a <__bad_interrupt>
      22:	00 00       	nop
      24:	a2 c0       	rjmp	.+324    	; 0x16a <__bad_interrupt>
      26:	00 00       	nop
      28:	a0 c0       	rjmp	.+320    	; 0x16a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9e c0       	rjmp	.+316    	; 0x16a <__bad_interrupt>
      2e:	00 00       	nop
      30:	96 c3       	rjmp	.+1836   	; 0x75e <__vector_12>
      32:	00 00       	nop
      34:	9a c0       	rjmp	.+308    	; 0x16a <__bad_interrupt>
      36:	00 00       	nop
      38:	98 c0       	rjmp	.+304    	; 0x16a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	96 c0       	rjmp	.+300    	; 0x16a <__bad_interrupt>
      3e:	00 00       	nop
      40:	94 c0       	rjmp	.+296    	; 0x16a <__bad_interrupt>
      42:	00 00       	nop
      44:	92 c0       	rjmp	.+292    	; 0x16a <__bad_interrupt>
      46:	00 00       	nop
      48:	90 c0       	rjmp	.+288    	; 0x16a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8e c0       	rjmp	.+284    	; 0x16a <__bad_interrupt>
      4e:	00 00       	nop
      50:	8c c0       	rjmp	.+280    	; 0x16a <__bad_interrupt>
      52:	00 00       	nop
      54:	8a c0       	rjmp	.+276    	; 0x16a <__bad_interrupt>
      56:	00 00       	nop
      58:	88 c0       	rjmp	.+272    	; 0x16a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	86 c0       	rjmp	.+268    	; 0x16a <__bad_interrupt>
      5e:	00 00       	nop
      60:	84 c0       	rjmp	.+264    	; 0x16a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__vector_25>
      68:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__vector_26>
      6c:	7e c0       	rjmp	.+252    	; 0x16a <__bad_interrupt>
      6e:	00 00       	nop
      70:	7c c0       	rjmp	.+248    	; 0x16a <__bad_interrupt>
      72:	00 00       	nop
      74:	7a c0       	rjmp	.+244    	; 0x16a <__bad_interrupt>
      76:	00 00       	nop
      78:	78 c0       	rjmp	.+240    	; 0x16a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	76 c0       	rjmp	.+236    	; 0x16a <__bad_interrupt>
      7e:	00 00       	nop
      80:	74 c0       	rjmp	.+232    	; 0x16a <__bad_interrupt>
      82:	00 00       	nop
      84:	72 c0       	rjmp	.+228    	; 0x16a <__bad_interrupt>
      86:	00 00       	nop
      88:	70 c0       	rjmp	.+224    	; 0x16a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e c0       	rjmp	.+220    	; 0x16a <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__vector_36>
      94:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__vector_37>
      98:	68 c0       	rjmp	.+208    	; 0x16a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	66 c0       	rjmp	.+204    	; 0x16a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	64 c0       	rjmp	.+200    	; 0x16a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	62 c0       	rjmp	.+196    	; 0x16a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	60 c0       	rjmp	.+192    	; 0x16a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5e c0       	rjmp	.+188    	; 0x16a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5c c0       	rjmp	.+184    	; 0x16a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5a c0       	rjmp	.+180    	; 0x16a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	58 c0       	rjmp	.+176    	; 0x16a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	56 c0       	rjmp	.+172    	; 0x16a <__bad_interrupt>
      be:	00 00       	nop
      c0:	54 c0       	rjmp	.+168    	; 0x16a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	52 c0       	rjmp	.+164    	; 0x16a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	50 c0       	rjmp	.+160    	; 0x16a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__vector_51>
      d0:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__vector_52>
      d4:	4a c0       	rjmp	.+148    	; 0x16a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__vector_54>
      dc:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__vector_55>
      e0:	44 c0       	rjmp	.+136    	; 0x16a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fa 0f       	add	r31, r26
      e6:	fa 0f       	add	r31, r26
      e8:	fa 0f       	add	r31, r26
      ea:	31 10       	cpse	r3, r1
      ec:	39 10       	cpse	r3, r9
      ee:	4e 10       	cpse	r4, r14
      f0:	fa 0f       	add	r31, r26
      f2:	fa 0f       	add	r31, r26
      f4:	31 10       	cpse	r3, r1
      f6:	39 10       	cpse	r3, r9

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	23 d7       	rcall	.+3654   	; 0xf40 <prvCheckTasksWaitingTermination>
      fa:	80 91 7d 0c 	lds	r24, 0x0C7D	; 0x800c7d <pxReadyTasksLists>
      fe:	82 30       	cpi	r24, 0x02	; 2
     100:	08 f0       	brcs	.+2      	; 0x104 <prvIdleTask+0xc>
     102:	69 d2       	rcall	.+1234   	; 0x5d6 <vPortYield>
     104:	0e 94 77 10 	call	0x20ee	; 0x20ee <vApplicationIdleHook>
     108:	f7 cf       	rjmp	.-18     	; 0xf8 <prvIdleTask>

0000010a <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	1f 92       	push	r1
     110:	cd b7       	in	r28, 0x3d	; 61
     112:	de b7       	in	r29, 0x3e	; 62
     114:	ce 01       	movw	r24, r28
     116:	01 96       	adiw	r24, 0x01	; 1
     118:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <prvGetNextExpireTime>
     11c:	49 81       	ldd	r20, Y+1	; 0x01
     11e:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <prvProcessTimerOrBlockTask>
     122:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <prvProcessReceivedCommands>
     126:	f6 cf       	rjmp	.-20     	; 0x114 <prvTimerTask+0xa>

00000128 <__ctors_end>:
     128:	11 24       	eor	r1, r1
     12a:	1f be       	out	0x3f, r1	; 63
     12c:	cf ef       	ldi	r28, 0xFF	; 255
     12e:	d1 e2       	ldi	r29, 0x21	; 33
     130:	de bf       	out	0x3e, r29	; 62
     132:	cd bf       	out	0x3d, r28	; 61
     134:	00 e0       	ldi	r16, 0x00	; 0
     136:	0c bf       	out	0x3c, r16	; 60

00000138 <__do_copy_data>:
     138:	12 e0       	ldi	r17, 0x02	; 2
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b2 e0       	ldi	r27, 0x02	; 2
     13e:	e6 e8       	ldi	r30, 0x86	; 134
     140:	ff e2       	ldi	r31, 0x2F	; 47
     142:	00 e0       	ldi	r16, 0x00	; 0
     144:	0b bf       	out	0x3b, r16	; 59
     146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x14>
     148:	07 90       	elpm	r0, Z+
     14a:	0d 92       	st	X+, r0
     14c:	a8 35       	cpi	r26, 0x58	; 88
     14e:	b1 07       	cpc	r27, r17
     150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0x10>

00000152 <__do_clear_bss>:
     152:	2d e0       	ldi	r18, 0x0D	; 13
     154:	a8 e5       	ldi	r26, 0x58	; 88
     156:	b2 e0       	ldi	r27, 0x02	; 2
     158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
     15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
     15c:	a3 32       	cpi	r26, 0x23	; 35
     15e:	b2 07       	cpc	r27, r18
     160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
     162:	0e 94 af 10 	call	0x215e	; 0x215e <main>
     166:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <_exit>

0000016a <__bad_interrupt>:
     16a:	4a cf       	rjmp	.-364    	; 0x0 <__vectors>

0000016c <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     16c:	e8 e0       	ldi	r30, 0x08	; 8
     16e:	f1 e0       	ldi	r31, 0x01	; 1
     170:	90 81       	ld	r25, Z
     172:	90 7f       	andi	r25, 0xF0	; 240
     174:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     176:	90 81       	ld	r25, Z
     178:	8f 70       	andi	r24, 0x0F	; 15
     17a:	98 2b       	or	r25, r24
     17c:	90 83       	st	Z, r25
     17e:	08 95       	ret

00000180 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     180:	e8 e0       	ldi	r30, 0x08	; 8
     182:	f1 e0       	ldi	r31, 0x01	; 1
     184:	80 81       	ld	r24, Z
     186:	80 7f       	andi	r24, 0xF0	; 240
     188:	80 83       	st	Z, r24
     18a:	08 95       	ret

0000018c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     18c:	e4 e6       	ldi	r30, 0x64	; 100
     18e:	f2 e0       	ldi	r31, 0x02	; 2
     190:	a8 e6       	ldi	r26, 0x68	; 104
     192:	b2 e0       	ldi	r27, 0x02	; 2
     194:	b1 83       	std	Z+1, r27	; 0x01
     196:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     198:	13 82       	std	Z+3, r1	; 0x03
     19a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     19c:	e8 e2       	ldi	r30, 0x28	; 40
     19e:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     1a0:	f0 93 63 02 	sts	0x0263, r31	; 0x800263 <pxEnd+0x1>
     1a4:	e0 93 62 02 	sts	0x0262, r30	; 0x800262 <pxEnd>
    pxEnd->xBlockSize = 0;
     1a8:	13 82       	std	Z+3, r1	; 0x03
     1aa:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     1ac:	11 82       	std	Z+1, r1	; 0x01
     1ae:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     1b0:	80 ec       	ldi	r24, 0xC0	; 192
     1b2:	99 e0       	ldi	r25, 0x09	; 9
     1b4:	13 96       	adiw	r26, 0x03	; 3
     1b6:	9c 93       	st	X, r25
     1b8:	8e 93       	st	-X, r24
     1ba:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     1bc:	ed 93       	st	X+, r30
     1be:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1c0:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <xMinimumEverFreeBytesRemaining+0x1>
     1c4:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1c8:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <xFreeBytesRemaining+0x1>
     1cc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e8       	ldi	r25, 0x80	; 128
     1d4:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <__data_end+0x1>
     1d8:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <__data_end>
     1dc:	08 95       	ret

000001de <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1e4:	a4 e6       	ldi	r26, 0x64	; 100
     1e6:	b2 e0       	ldi	r27, 0x02	; 2
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <prvInsertBlockIntoFreeList+0xe>
     1ea:	df 01       	movw	r26, r30
     1ec:	ed 91       	ld	r30, X+
     1ee:	fc 91       	ld	r31, X
     1f0:	11 97       	sbiw	r26, 0x01	; 1
     1f2:	ec 17       	cp	r30, r28
     1f4:	fd 07       	cpc	r31, r29
     1f6:	c8 f3       	brcs	.-14     	; 0x1ea <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     1f8:	12 96       	adiw	r26, 0x02	; 2
     1fa:	8d 91       	ld	r24, X+
     1fc:	9c 91       	ld	r25, X
     1fe:	13 97       	sbiw	r26, 0x03	; 3
     200:	9d 01       	movw	r18, r26
     202:	28 0f       	add	r18, r24
     204:	39 1f       	adc	r19, r25
     206:	c2 17       	cp	r28, r18
     208:	d3 07       	cpc	r29, r19
     20a:	49 f4       	brne	.+18     	; 0x21e <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     20c:	2a 81       	ldd	r18, Y+2	; 0x02
     20e:	3b 81       	ldd	r19, Y+3	; 0x03
     210:	82 0f       	add	r24, r18
     212:	93 1f       	adc	r25, r19
     214:	13 96       	adiw	r26, 0x03	; 3
     216:	9c 93       	st	X, r25
     218:	8e 93       	st	-X, r24
     21a:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     21c:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     21e:	8a 81       	ldd	r24, Y+2	; 0x02
     220:	9b 81       	ldd	r25, Y+3	; 0x03
     222:	9e 01       	movw	r18, r28
     224:	28 0f       	add	r18, r24
     226:	39 1f       	adc	r19, r25
     228:	e2 17       	cp	r30, r18
     22a:	f3 07       	cpc	r31, r19
     22c:	c1 f4       	brne	.+48     	; 0x25e <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     22e:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <pxEnd>
     232:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <pxEnd+0x1>
     236:	e2 17       	cp	r30, r18
     238:	f3 07       	cpc	r31, r19
     23a:	71 f0       	breq	.+28     	; 0x258 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     23c:	22 81       	ldd	r18, Z+2	; 0x02
     23e:	33 81       	ldd	r19, Z+3	; 0x03
     240:	82 0f       	add	r24, r18
     242:	93 1f       	adc	r25, r19
     244:	9b 83       	std	Y+3, r25	; 0x03
     246:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     248:	ed 91       	ld	r30, X+
     24a:	fc 91       	ld	r31, X
     24c:	11 97       	sbiw	r26, 0x01	; 1
     24e:	80 81       	ld	r24, Z
     250:	91 81       	ldd	r25, Z+1	; 0x01
     252:	99 83       	std	Y+1, r25	; 0x01
     254:	88 83       	st	Y, r24
     256:	05 c0       	rjmp	.+10     	; 0x262 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     258:	39 83       	std	Y+1, r19	; 0x01
     25a:	28 83       	st	Y, r18
     25c:	02 c0       	rjmp	.+4      	; 0x262 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     25e:	f9 83       	std	Y+1, r31	; 0x01
     260:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     262:	ca 17       	cp	r28, r26
     264:	db 07       	cpc	r29, r27
     266:	11 f0       	breq	.+4      	; 0x26c <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     268:	cd 93       	st	X+, r28
     26a:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     26c:	df 91       	pop	r29
     26e:	cf 91       	pop	r28
     270:	08 95       	ret

00000272 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     280:	a8 d7       	rcall	.+3920   	; 0x11d2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     282:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <pxEnd>
     286:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <pxEnd+0x1>
     28a:	89 2b       	or	r24, r25
        {
            prvHeapInit();
     28c:	09 f4       	brne	.+2      	; 0x290 <pvPortMalloc+0x1e>
     28e:	7e df       	rcall	.-260    	; 0x18c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     290:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end>
     294:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__data_end+0x1>
     298:	80 23       	and	r24, r16
     29a:	91 23       	and	r25, r17
     29c:	89 2b       	or	r24, r25
     29e:	09 f0       	breq	.+2      	; 0x2a2 <pvPortMalloc+0x30>
     2a0:	76 c0       	rjmp	.+236    	; 0x38e <pvPortMalloc+0x11c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2a2:	01 15       	cp	r16, r1
     2a4:	11 05       	cpc	r17, r1
     2a6:	49 f0       	breq	.+18     	; 0x2ba <pvPortMalloc+0x48>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     2a8:	c8 01       	movw	r24, r16
     2aa:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2ac:	08 17       	cp	r16, r24
     2ae:	19 07       	cpc	r17, r25
     2b0:	18 f0       	brcs	.+6      	; 0x2b8 <pvPortMalloc+0x46>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     2b2:	00 e0       	ldi	r16, 0x00	; 0
     2b4:	10 e0       	ldi	r17, 0x00	; 0
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <pvPortMalloc+0x48>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     2b8:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     2ba:	01 15       	cp	r16, r1
     2bc:	11 05       	cpc	r17, r1
     2be:	09 f4       	brne	.+2      	; 0x2c2 <pvPortMalloc+0x50>
     2c0:	69 c0       	rjmp	.+210    	; 0x394 <pvPortMalloc+0x122>
     2c2:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <xFreeBytesRemaining>
     2c6:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <xFreeBytesRemaining+0x1>
     2ca:	80 17       	cp	r24, r16
     2cc:	91 07       	cpc	r25, r17
     2ce:	08 f4       	brcc	.+2      	; 0x2d2 <pvPortMalloc+0x60>
     2d0:	64 c0       	rjmp	.+200    	; 0x39a <pvPortMalloc+0x128>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2d2:	c0 91 64 02 	lds	r28, 0x0264	; 0x800264 <xStart>
     2d6:	d0 91 65 02 	lds	r29, 0x0265	; 0x800265 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2da:	e4 e6       	ldi	r30, 0x64	; 100
     2dc:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <pvPortMalloc+0x72>
                {
                    pxPreviousBlock = pxBlock;
     2e0:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2e2:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	9b 81       	ldd	r25, Y+3	; 0x03
     2e8:	80 17       	cp	r24, r16
     2ea:	91 07       	cpc	r25, r17
     2ec:	20 f4       	brcc	.+8      	; 0x2f6 <pvPortMalloc+0x84>
     2ee:	88 81       	ld	r24, Y
     2f0:	99 81       	ldd	r25, Y+1	; 0x01
     2f2:	00 97       	sbiw	r24, 0x00	; 0
     2f4:	a9 f7       	brne	.-22     	; 0x2e0 <pvPortMalloc+0x6e>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     2f6:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <pxEnd>
     2fa:	90 91 63 02 	lds	r25, 0x0263	; 0x800263 <pxEnd+0x1>
     2fe:	c8 17       	cp	r28, r24
     300:	d9 07       	cpc	r29, r25
     302:	09 f4       	brne	.+2      	; 0x306 <pvPortMalloc+0x94>
     304:	4d c0       	rjmp	.+154    	; 0x3a0 <pvPortMalloc+0x12e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     306:	e0 80       	ld	r14, Z
     308:	f1 80       	ldd	r15, Z+1	; 0x01
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	e8 0e       	add	r14, r24
     30e:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     310:	88 81       	ld	r24, Y
     312:	99 81       	ldd	r25, Y+1	; 0x01
     314:	91 83       	std	Z+1, r25	; 0x01
     316:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     318:	2a 81       	ldd	r18, Y+2	; 0x02
     31a:	3b 81       	ldd	r19, Y+3	; 0x03
     31c:	20 1b       	sub	r18, r16
     31e:	31 0b       	sbc	r19, r17
     320:	29 30       	cpi	r18, 0x09	; 9
     322:	31 05       	cpc	r19, r1
     324:	48 f0       	brcs	.+18     	; 0x338 <pvPortMalloc+0xc6>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     326:	ce 01       	movw	r24, r28
     328:	80 0f       	add	r24, r16
     32a:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     32c:	fc 01       	movw	r30, r24
     32e:	33 83       	std	Z+3, r19	; 0x03
     330:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     332:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     334:	0a 83       	std	Y+2, r16	; 0x02
     336:	53 df       	rcall	.-346    	; 0x1de <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     338:	2a 81       	ldd	r18, Y+2	; 0x02
     33a:	3b 81       	ldd	r19, Y+3	; 0x03
     33c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <xFreeBytesRemaining>
     340:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <xFreeBytesRemaining+0x1>
     344:	82 1b       	sub	r24, r18
     346:	93 0b       	sbc	r25, r19
     348:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <xFreeBytesRemaining+0x1>
     34c:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     350:	40 91 5e 02 	lds	r20, 0x025E	; 0x80025e <xMinimumEverFreeBytesRemaining>
     354:	50 91 5f 02 	lds	r21, 0x025F	; 0x80025f <xMinimumEverFreeBytesRemaining+0x1>
     358:	84 17       	cp	r24, r20
     35a:	95 07       	cpc	r25, r21
     35c:	20 f4       	brcc	.+8      	; 0x366 <pvPortMalloc+0xf4>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     35e:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <xMinimumEverFreeBytesRemaining+0x1>
     362:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     366:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__data_end>
     36a:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <__data_end+0x1>
     36e:	28 2b       	or	r18, r24
     370:	39 2b       	or	r19, r25
     372:	3b 83       	std	Y+3, r19	; 0x03
     374:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     376:	19 82       	std	Y+1, r1	; 0x01
     378:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     37a:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <xNumberOfSuccessfulAllocations>
     37e:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <xNumberOfSuccessfulAllocations+0x1>
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <xNumberOfSuccessfulAllocations+0x1>
     388:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <xNumberOfSuccessfulAllocations>
     38c:	0b c0       	rjmp	.+22     	; 0x3a4 <pvPortMalloc+0x132>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     38e:	e1 2c       	mov	r14, r1
     390:	f1 2c       	mov	r15, r1
     392:	08 c0       	rjmp	.+16     	; 0x3a4 <pvPortMalloc+0x132>
     394:	e1 2c       	mov	r14, r1
     396:	f1 2c       	mov	r15, r1
     398:	05 c0       	rjmp	.+10     	; 0x3a4 <pvPortMalloc+0x132>
     39a:	e1 2c       	mov	r14, r1
     39c:	f1 2c       	mov	r15, r1
     39e:	02 c0       	rjmp	.+4      	; 0x3a4 <pvPortMalloc+0x132>
     3a0:	e1 2c       	mov	r14, r1
     3a2:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3a4:	0e 94 29 0a 	call	0x1452	; 0x1452 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     3a8:	e1 14       	cp	r14, r1
     3aa:	f1 04       	cpc	r15, r1
     3ac:	11 f4       	brne	.+4      	; 0x3b2 <pvPortMalloc+0x140>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     3ae:	0e 94 83 10 	call	0x2106	; 0x2106 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     3b2:	c7 01       	movw	r24, r14
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	ff 90       	pop	r15
     3be:	ef 90       	pop	r14
     3c0:	08 95       	ret

000003c2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3ca:	00 97       	sbiw	r24, 0x00	; 0
     3cc:	89 f1       	breq	.+98     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3ce:	ec 01       	movw	r28, r24
     3d0:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3d2:	4a 81       	ldd	r20, Y+2	; 0x02
     3d4:	5b 81       	ldd	r21, Y+3	; 0x03
     3d6:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <__data_end>
     3da:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <__data_end+0x1>
     3de:	ba 01       	movw	r22, r20
     3e0:	62 23       	and	r22, r18
     3e2:	73 23       	and	r23, r19
     3e4:	67 2b       	or	r22, r23
     3e6:	21 f1       	breq	.+72     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3e8:	68 81       	ld	r22, Y
     3ea:	79 81       	ldd	r23, Y+1	; 0x01
     3ec:	67 2b       	or	r22, r23
     3ee:	01 f5       	brne	.+64     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     3f0:	20 95       	com	r18
     3f2:	30 95       	com	r19
     3f4:	24 23       	and	r18, r20
     3f6:	35 23       	and	r19, r21
     3f8:	3b 83       	std	Y+3, r19	; 0x03
     3fa:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     3fc:	ea d6       	rcall	.+3540   	; 0x11d2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     3fe:	8a 81       	ldd	r24, Y+2	; 0x02
     400:	9b 81       	ldd	r25, Y+3	; 0x03
     402:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <xFreeBytesRemaining>
     406:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <xFreeBytesRemaining+0x1>
     40a:	82 0f       	add	r24, r18
     40c:	93 1f       	adc	r25, r19
     40e:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <xFreeBytesRemaining+0x1>
     412:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     416:	ce 01       	movw	r24, r28
     418:	e2 de       	rcall	.-572    	; 0x1de <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     41a:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <xNumberOfSuccessfulFrees>
     41e:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <xNumberOfSuccessfulFrees+0x1>
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <xNumberOfSuccessfulFrees+0x1>
     428:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     42c:	0e 94 29 0a 	call	0x1452	; 0x1452 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     43a:	fc 01       	movw	r30, r24
     43c:	03 96       	adiw	r24, 0x03	; 3
     43e:	92 83       	std	Z+2, r25	; 0x02
     440:	81 83       	std	Z+1, r24	; 0x01
     442:	4f ef       	ldi	r20, 0xFF	; 255
     444:	5f ef       	ldi	r21, 0xFF	; 255
     446:	ba 01       	movw	r22, r20
     448:	43 83       	std	Z+3, r20	; 0x03
     44a:	54 83       	std	Z+4, r21	; 0x04
     44c:	65 83       	std	Z+5, r22	; 0x05
     44e:	76 83       	std	Z+6, r23	; 0x06
     450:	90 87       	std	Z+8, r25	; 0x08
     452:	87 83       	std	Z+7, r24	; 0x07
     454:	92 87       	std	Z+10, r25	; 0x0a
     456:	81 87       	std	Z+9, r24	; 0x09
     458:	10 82       	st	Z, r1
     45a:	08 95       	ret

0000045c <vListInitialiseItem>:
     45c:	fc 01       	movw	r30, r24
     45e:	13 86       	std	Z+11, r1	; 0x0b
     460:	12 86       	std	Z+10, r1	; 0x0a
     462:	08 95       	ret

00000464 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     46e:	08 81       	ld	r16, Y
     470:	19 81       	ldd	r17, Y+1	; 0x01
     472:	2a 81       	ldd	r18, Y+2	; 0x02
     474:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     476:	0f 3f       	cpi	r16, 0xFF	; 255
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	14 07       	cpc	r17, r20
     47c:	24 07       	cpc	r18, r20
     47e:	34 07       	cpc	r19, r20
     480:	21 f4       	brne	.+8      	; 0x48a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     482:	fc 01       	movw	r30, r24
     484:	a1 85       	ldd	r26, Z+9	; 0x09
     486:	b2 85       	ldd	r27, Z+10	; 0x0a
     488:	11 c0       	rjmp	.+34     	; 0x4ac <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     48a:	dc 01       	movw	r26, r24
     48c:	13 96       	adiw	r26, 0x03	; 3
     48e:	01 c0       	rjmp	.+2      	; 0x492 <vListInsert+0x2e>
     490:	df 01       	movw	r26, r30
     492:	14 96       	adiw	r26, 0x04	; 4
     494:	ed 91       	ld	r30, X+
     496:	fc 91       	ld	r31, X
     498:	15 97       	sbiw	r26, 0x05	; 5
     49a:	40 81       	ld	r20, Z
     49c:	51 81       	ldd	r21, Z+1	; 0x01
     49e:	62 81       	ldd	r22, Z+2	; 0x02
     4a0:	73 81       	ldd	r23, Z+3	; 0x03
     4a2:	04 17       	cp	r16, r20
     4a4:	15 07       	cpc	r17, r21
     4a6:	26 07       	cpc	r18, r22
     4a8:	37 07       	cpc	r19, r23
     4aa:	90 f7       	brcc	.-28     	; 0x490 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4ac:	14 96       	adiw	r26, 0x04	; 4
     4ae:	ed 91       	ld	r30, X+
     4b0:	fc 91       	ld	r31, X
     4b2:	15 97       	sbiw	r26, 0x05	; 5
     4b4:	fd 83       	std	Y+5, r31	; 0x05
     4b6:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4b8:	d7 83       	std	Z+7, r29	; 0x07
     4ba:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     4bc:	bf 83       	std	Y+7, r27	; 0x07
     4be:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4c0:	15 96       	adiw	r26, 0x05	; 5
     4c2:	dc 93       	st	X, r29
     4c4:	ce 93       	st	-X, r28
     4c6:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4c8:	9b 87       	std	Y+11, r25	; 0x0b
     4ca:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 81       	ld	r18, Z
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	20 83       	st	Z, r18
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	08 95       	ret

000004de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4e4:	a2 85       	ldd	r26, Z+10	; 0x0a
     4e6:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4e8:	c4 81       	ldd	r28, Z+4	; 0x04
     4ea:	d5 81       	ldd	r29, Z+5	; 0x05
     4ec:	86 81       	ldd	r24, Z+6	; 0x06
     4ee:	97 81       	ldd	r25, Z+7	; 0x07
     4f0:	9f 83       	std	Y+7, r25	; 0x07
     4f2:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4f4:	c6 81       	ldd	r28, Z+6	; 0x06
     4f6:	d7 81       	ldd	r29, Z+7	; 0x07
     4f8:	84 81       	ldd	r24, Z+4	; 0x04
     4fa:	95 81       	ldd	r25, Z+5	; 0x05
     4fc:	9d 83       	std	Y+5, r25	; 0x05
     4fe:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     500:	11 96       	adiw	r26, 0x01	; 1
     502:	8d 91       	ld	r24, X+
     504:	9c 91       	ld	r25, X
     506:	12 97       	sbiw	r26, 0x02	; 2
     508:	e8 17       	cp	r30, r24
     50a:	f9 07       	cpc	r31, r25
     50c:	31 f4       	brne	.+12     	; 0x51a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     50e:	86 81       	ldd	r24, Z+6	; 0x06
     510:	97 81       	ldd	r25, Z+7	; 0x07
     512:	12 96       	adiw	r26, 0x02	; 2
     514:	9c 93       	st	X, r25
     516:	8e 93       	st	-X, r24
     518:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     51a:	13 86       	std	Z+11, r1	; 0x0b
     51c:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     51e:	8c 91       	ld	r24, X
     520:	81 50       	subi	r24, 0x01	; 1
     522:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     524:	8c 91       	ld	r24, X
}
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	08 95       	ret

0000052c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     52c:	a8 95       	wdr
     52e:	90 ec       	ldi	r25, 0xC0	; 192
     530:	88 e1       	ldi	r24, 0x18	; 24
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	a8 95       	wdr
     538:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     542:	08 95       	ret

00000544 <pxPortInitialiseStack>:
     544:	fc 01       	movw	r30, r24
     546:	60 83       	st	Z, r22
     548:	31 97       	sbiw	r30, 0x01	; 1
     54a:	70 83       	st	Z, r23
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	10 82       	st	Z, r1
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	10 82       	st	Z, r1
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	20 e8       	ldi	r18, 0x80	; 128
     558:	20 83       	st	Z, r18
     55a:	31 97       	sbiw	r30, 0x01	; 1
     55c:	10 82       	st	Z, r1
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	10 82       	st	Z, r1
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	10 82       	st	Z, r1
     566:	77 97       	sbiw	r30, 0x17	; 23
     568:	40 83       	st	Z, r20
     56a:	31 97       	sbiw	r30, 0x01	; 1
     56c:	50 83       	st	Z, r21
     56e:	86 97       	sbiw	r24, 0x26	; 38
     570:	08 95       	ret

00000572 <xPortStartScheduler>:
     572:	dc df       	rcall	.-72     	; 0x52c <prvSetupTimerInterrupt>
     574:	a0 91 eb 0c 	lds	r26, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     578:	b0 91 ec 0c 	lds	r27, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     57c:	cd 91       	ld	r28, X+
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	dd 91       	ld	r29, X+
     582:	de bf       	out	0x3e, r29	; 62
     584:	ff 91       	pop	r31
     586:	ef 91       	pop	r30
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
     58c:	bf 91       	pop	r27
     58e:	af 91       	pop	r26
     590:	9f 91       	pop	r25
     592:	8f 91       	pop	r24
     594:	7f 91       	pop	r23
     596:	6f 91       	pop	r22
     598:	5f 91       	pop	r21
     59a:	4f 91       	pop	r20
     59c:	3f 91       	pop	r19
     59e:	2f 91       	pop	r18
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	bf 90       	pop	r11
     5ae:	af 90       	pop	r10
     5b0:	9f 90       	pop	r9
     5b2:	8f 90       	pop	r8
     5b4:	7f 90       	pop	r7
     5b6:	6f 90       	pop	r6
     5b8:	5f 90       	pop	r5
     5ba:	4f 90       	pop	r4
     5bc:	3f 90       	pop	r3
     5be:	2f 90       	pop	r2
     5c0:	1f 90       	pop	r1
     5c2:	0f 90       	pop	r0
     5c4:	0c be       	out	0x3c, r0	; 60
     5c6:	0f 90       	pop	r0
     5c8:	0b be       	out	0x3b, r0	; 59
     5ca:	0f 90       	pop	r0
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	0f 90       	pop	r0
     5d0:	08 95       	ret
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	08 95       	ret

000005d6 <vPortYield>:
     5d6:	0f 92       	push	r0
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	0f 92       	push	r0
     5de:	0b b6       	in	r0, 0x3b	; 59
     5e0:	0f 92       	push	r0
     5e2:	0c b6       	in	r0, 0x3c	; 60
     5e4:	0f 92       	push	r0
     5e6:	1f 92       	push	r1
     5e8:	11 24       	eor	r1, r1
     5ea:	2f 92       	push	r2
     5ec:	3f 92       	push	r3
     5ee:	4f 92       	push	r4
     5f0:	5f 92       	push	r5
     5f2:	6f 92       	push	r6
     5f4:	7f 92       	push	r7
     5f6:	8f 92       	push	r8
     5f8:	9f 92       	push	r9
     5fa:	af 92       	push	r10
     5fc:	bf 92       	push	r11
     5fe:	cf 92       	push	r12
     600:	df 92       	push	r13
     602:	ef 92       	push	r14
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	4f 93       	push	r20
     610:	5f 93       	push	r21
     612:	6f 93       	push	r22
     614:	7f 93       	push	r23
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ef 93       	push	r30
     624:	ff 93       	push	r31
     626:	a0 91 eb 0c 	lds	r26, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     62a:	b0 91 ec 0c 	lds	r27, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     62e:	0d b6       	in	r0, 0x3d	; 61
     630:	0d 92       	st	X+, r0
     632:	0e b6       	in	r0, 0x3e	; 62
     634:	0d 92       	st	X+, r0
     636:	0e 94 20 0b 	call	0x1640	; 0x1640 <vTaskSwitchContext>
     63a:	a0 91 eb 0c 	lds	r26, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     63e:	b0 91 ec 0c 	lds	r27, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     642:	cd 91       	ld	r28, X+
     644:	cd bf       	out	0x3d, r28	; 61
     646:	dd 91       	ld	r29, X+
     648:	de bf       	out	0x3e, r29	; 62
     64a:	ff 91       	pop	r31
     64c:	ef 91       	pop	r30
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	bf 91       	pop	r27
     654:	af 91       	pop	r26
     656:	9f 91       	pop	r25
     658:	8f 91       	pop	r24
     65a:	7f 91       	pop	r23
     65c:	6f 91       	pop	r22
     65e:	5f 91       	pop	r21
     660:	4f 91       	pop	r20
     662:	3f 91       	pop	r19
     664:	2f 91       	pop	r18
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	9f 90       	pop	r9
     678:	8f 90       	pop	r8
     67a:	7f 90       	pop	r7
     67c:	6f 90       	pop	r6
     67e:	5f 90       	pop	r5
     680:	4f 90       	pop	r4
     682:	3f 90       	pop	r3
     684:	2f 90       	pop	r2
     686:	1f 90       	pop	r1
     688:	0f 90       	pop	r0
     68a:	0c be       	out	0x3c, r0	; 60
     68c:	0f 90       	pop	r0
     68e:	0b be       	out	0x3b, r0	; 59
     690:	0f 90       	pop	r0
     692:	0f be       	out	0x3f, r0	; 63
     694:	0f 90       	pop	r0
     696:	08 95       	ret

00000698 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	0f 92       	push	r0
     6a0:	0b b6       	in	r0, 0x3b	; 59
     6a2:	0f 92       	push	r0
     6a4:	0c b6       	in	r0, 0x3c	; 60
     6a6:	0f 92       	push	r0
     6a8:	1f 92       	push	r1
     6aa:	11 24       	eor	r1, r1
     6ac:	2f 92       	push	r2
     6ae:	3f 92       	push	r3
     6b0:	4f 92       	push	r4
     6b2:	5f 92       	push	r5
     6b4:	6f 92       	push	r6
     6b6:	7f 92       	push	r7
     6b8:	8f 92       	push	r8
     6ba:	9f 92       	push	r9
     6bc:	af 92       	push	r10
     6be:	bf 92       	push	r11
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	ef 93       	push	r30
     6e6:	ff 93       	push	r31
     6e8:	a0 91 eb 0c 	lds	r26, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     6ec:	b0 91 ec 0c 	lds	r27, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     6f0:	0d b6       	in	r0, 0x3d	; 61
     6f2:	0d 92       	st	X+, r0
     6f4:	0e b6       	in	r0, 0x3e	; 62
     6f6:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     6f8:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     6fa:	7f d5       	rcall	.+2814   	; 0x11fa <xTaskIncrementTick>
     6fc:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     6fe:	a0 d7       	rcall	.+3904   	; 0x1640 <vTaskSwitchContext>
     700:	a0 91 eb 0c 	lds	r26, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    }
    portRESTORE_CONTEXT();
     704:	b0 91 ec 0c 	lds	r27, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     708:	cd 91       	ld	r28, X+
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	dd 91       	ld	r29, X+
     70e:	de bf       	out	0x3e, r29	; 62
     710:	ff 91       	pop	r31
     712:	ef 91       	pop	r30
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	bf 91       	pop	r27
     71a:	af 91       	pop	r26
     71c:	9f 91       	pop	r25
     71e:	8f 91       	pop	r24
     720:	7f 91       	pop	r23
     722:	6f 91       	pop	r22
     724:	5f 91       	pop	r21
     726:	4f 91       	pop	r20
     728:	3f 91       	pop	r19
     72a:	2f 91       	pop	r18
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	df 90       	pop	r13
     736:	cf 90       	pop	r12
     738:	bf 90       	pop	r11
     73a:	af 90       	pop	r10
     73c:	9f 90       	pop	r9
     73e:	8f 90       	pop	r8
     740:	7f 90       	pop	r7
     742:	6f 90       	pop	r6
     744:	5f 90       	pop	r5
     746:	4f 90       	pop	r4
     748:	3f 90       	pop	r3
     74a:	2f 90       	pop	r2
     74c:	1f 90       	pop	r1
     74e:	0f 90       	pop	r0
     750:	0c be       	out	0x3c, r0	; 60
     752:	0f 90       	pop	r0
     754:	0b be       	out	0x3b, r0	; 59
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	08 95       	ret

0000075e <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     75e:	9c df       	rcall	.-200    	; 0x698 <vPortYieldFromTick>
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     760:	18 95       	reti

00000762 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	0f 92       	push	r0
     768:	fc 01       	movw	r30, r24
     76a:	86 8d       	ldd	r24, Z+30	; 0x1e
     76c:	81 11       	cpse	r24, r1
     76e:	02 c0       	rjmp	.+4      	; 0x774 <prvIsQueueEmpty+0x12>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	01 c0       	rjmp	.+2      	; 0x776 <prvIsQueueEmpty+0x14>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	08 95       	ret

0000077c <prvIsQueueFull>:
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	0f 92       	push	r0
     782:	fc 01       	movw	r30, r24
     784:	26 8d       	ldd	r18, Z+30	; 0x1e
     786:	87 8d       	ldd	r24, Z+31	; 0x1f
     788:	28 13       	cpse	r18, r24
     78a:	02 c0       	rjmp	.+4      	; 0x790 <prvIsQueueFull+0x14>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	01 c0       	rjmp	.+2      	; 0x792 <prvIsQueueFull+0x16>
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0f 90       	pop	r0
     794:	0f be       	out	0x3f, r0	; 63
     796:	08 95       	ret

00000798 <prvCopyDataToQueue>:
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ec 01       	movw	r28, r24
     7a2:	04 2f       	mov	r16, r20
     7a4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     7a6:	48 a1       	ldd	r20, Y+32	; 0x20
     7a8:	41 11       	cpse	r20, r1
     7aa:	0c c0       	rjmp	.+24     	; 0x7c4 <prvCopyDataToQueue+0x2c>
     7ac:	88 81       	ld	r24, Y
     7ae:	99 81       	ldd	r25, Y+1	; 0x01
     7b0:	89 2b       	or	r24, r25
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <prvCopyDataToQueue+0x1e>
     7b4:	42 c0       	rjmp	.+132    	; 0x83a <prvCopyDataToQueue+0xa2>
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ba:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <xTaskPriorityDisinherit>
     7be:	1d 82       	std	Y+5, r1	; 0x05
     7c0:	1c 82       	std	Y+4, r1	; 0x04
     7c2:	42 c0       	rjmp	.+132    	; 0x848 <prvCopyDataToQueue+0xb0>
     7c4:	01 11       	cpse	r16, r1
     7c6:	17 c0       	rjmp	.+46     	; 0x7f6 <prvCopyDataToQueue+0x5e>
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	9b 81       	ldd	r25, Y+3	; 0x03
     7ce:	0e 94 81 17 	call	0x2f02	; 0x2f02 <memcpy>
     7d2:	28 a1       	ldd	r18, Y+32	; 0x20
     7d4:	8a 81       	ldd	r24, Y+2	; 0x02
     7d6:	9b 81       	ldd	r25, Y+3	; 0x03
     7d8:	82 0f       	add	r24, r18
     7da:	91 1d       	adc	r25, r1
     7dc:	9b 83       	std	Y+3, r25	; 0x03
     7de:	8a 83       	std	Y+2, r24	; 0x02
     7e0:	2c 81       	ldd	r18, Y+4	; 0x04
     7e2:	3d 81       	ldd	r19, Y+5	; 0x05
     7e4:	82 17       	cp	r24, r18
     7e6:	93 07       	cpc	r25, r19
     7e8:	50 f1       	brcs	.+84     	; 0x83e <prvCopyDataToQueue+0xa6>
     7ea:	88 81       	ld	r24, Y
     7ec:	99 81       	ldd	r25, Y+1	; 0x01
     7ee:	9b 83       	std	Y+3, r25	; 0x03
     7f0:	8a 83       	std	Y+2, r24	; 0x02
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	29 c0       	rjmp	.+82     	; 0x848 <prvCopyDataToQueue+0xb0>
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	8e 81       	ldd	r24, Y+6	; 0x06
     7fa:	9f 81       	ldd	r25, Y+7	; 0x07
     7fc:	0e 94 81 17 	call	0x2f02	; 0x2f02 <memcpy>
     800:	88 a1       	ldd	r24, Y+32	; 0x20
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	91 95       	neg	r25
     806:	81 95       	neg	r24
     808:	91 09       	sbc	r25, r1
     80a:	2e 81       	ldd	r18, Y+6	; 0x06
     80c:	3f 81       	ldd	r19, Y+7	; 0x07
     80e:	28 0f       	add	r18, r24
     810:	39 1f       	adc	r19, r25
     812:	3f 83       	std	Y+7, r19	; 0x07
     814:	2e 83       	std	Y+6, r18	; 0x06
     816:	48 81       	ld	r20, Y
     818:	59 81       	ldd	r21, Y+1	; 0x01
     81a:	24 17       	cp	r18, r20
     81c:	35 07       	cpc	r19, r21
     81e:	30 f4       	brcc	.+12     	; 0x82c <prvCopyDataToQueue+0x94>
     820:	2c 81       	ldd	r18, Y+4	; 0x04
     822:	3d 81       	ldd	r19, Y+5	; 0x05
     824:	82 0f       	add	r24, r18
     826:	93 1f       	adc	r25, r19
     828:	9f 83       	std	Y+7, r25	; 0x07
     82a:	8e 83       	std	Y+6, r24	; 0x06
     82c:	02 30       	cpi	r16, 0x02	; 2
     82e:	49 f4       	brne	.+18     	; 0x842 <prvCopyDataToQueue+0xaa>
     830:	11 23       	and	r17, r17
     832:	49 f0       	breq	.+18     	; 0x846 <prvCopyDataToQueue+0xae>
     834:	11 50       	subi	r17, 0x01	; 1
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	07 c0       	rjmp	.+14     	; 0x848 <prvCopyDataToQueue+0xb0>
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	05 c0       	rjmp	.+10     	; 0x848 <prvCopyDataToQueue+0xb0>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	03 c0       	rjmp	.+6      	; 0x848 <prvCopyDataToQueue+0xb0>
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	01 c0       	rjmp	.+2      	; 0x848 <prvCopyDataToQueue+0xb0>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	1f 5f       	subi	r17, 0xFF	; 255
     84a:	1e 8f       	std	Y+30, r17	; 0x1e
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	08 95       	ret

00000856 <prvCopyDataFromQueue>:
     856:	fc 01       	movw	r30, r24
     858:	40 a1       	ldd	r20, Z+32	; 0x20
     85a:	44 23       	and	r20, r20
     85c:	a9 f0       	breq	.+42     	; 0x888 <prvCopyDataFromQueue+0x32>
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	26 81       	ldd	r18, Z+6	; 0x06
     862:	37 81       	ldd	r19, Z+7	; 0x07
     864:	24 0f       	add	r18, r20
     866:	35 1f       	adc	r19, r21
     868:	37 83       	std	Z+7, r19	; 0x07
     86a:	26 83       	std	Z+6, r18	; 0x06
     86c:	84 81       	ldd	r24, Z+4	; 0x04
     86e:	95 81       	ldd	r25, Z+5	; 0x05
     870:	28 17       	cp	r18, r24
     872:	39 07       	cpc	r19, r25
     874:	20 f0       	brcs	.+8      	; 0x87e <prvCopyDataFromQueue+0x28>
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	97 83       	std	Z+7, r25	; 0x07
     87c:	86 83       	std	Z+6, r24	; 0x06
     87e:	cb 01       	movw	r24, r22
     880:	66 81       	ldd	r22, Z+6	; 0x06
     882:	77 81       	ldd	r23, Z+7	; 0x07
     884:	0c 94 81 17 	jmp	0x2f02	; 0x2f02 <memcpy>
     888:	08 95       	ret

0000088a <prvUnlockQueue>:
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
     892:	0f b6       	in	r0, 0x3f	; 63
     894:	f8 94       	cli
     896:	0f 92       	push	r0
     898:	1a a1       	ldd	r17, Y+34	; 0x22
     89a:	0a c0       	rjmp	.+20     	; 0x8b0 <prvUnlockQueue+0x26>
     89c:	8b 89       	ldd	r24, Y+19	; 0x13
     89e:	88 23       	and	r24, r24
     8a0:	49 f0       	breq	.+18     	; 0x8b4 <prvUnlockQueue+0x2a>
     8a2:	ce 01       	movw	r24, r28
     8a4:	43 96       	adiw	r24, 0x13	; 19
     8a6:	97 d7       	rcall	.+3886   	; 0x17d6 <xTaskRemoveFromEventList>
     8a8:	81 11       	cpse	r24, r1
     8aa:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <vTaskMissedYield>
     8ae:	11 50       	subi	r17, 0x01	; 1
     8b0:	11 16       	cp	r1, r17
     8b2:	a4 f3       	brlt	.-24     	; 0x89c <prvUnlockQueue+0x12>
     8b4:	8f ef       	ldi	r24, 0xFF	; 255
     8b6:	8a a3       	std	Y+34, r24	; 0x22
     8b8:	0f 90       	pop	r0
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	0f 92       	push	r0
     8c2:	19 a1       	ldd	r17, Y+33	; 0x21
     8c4:	0a c0       	rjmp	.+20     	; 0x8da <prvUnlockQueue+0x50>
     8c6:	88 85       	ldd	r24, Y+8	; 0x08
     8c8:	88 23       	and	r24, r24
     8ca:	49 f0       	breq	.+18     	; 0x8de <prvUnlockQueue+0x54>
     8cc:	ce 01       	movw	r24, r28
     8ce:	08 96       	adiw	r24, 0x08	; 8
     8d0:	82 d7       	rcall	.+3844   	; 0x17d6 <xTaskRemoveFromEventList>
     8d2:	81 11       	cpse	r24, r1
     8d4:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <vTaskMissedYield>
     8d8:	11 50       	subi	r17, 0x01	; 1
     8da:	11 16       	cp	r1, r17
     8dc:	a4 f3       	brlt	.-24     	; 0x8c6 <prvUnlockQueue+0x3c>
     8de:	8f ef       	ldi	r24, 0xFF	; 255
     8e0:	89 a3       	std	Y+33, r24	; 0x21
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	08 95       	ret

000008ee <xQueueGenericReset>:
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ec 01       	movw	r28, r24
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	f8 94       	cli
     8f8:	0f 92       	push	r0
     8fa:	e8 81       	ld	r30, Y
     8fc:	f9 81       	ldd	r31, Y+1	; 0x01
     8fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
     900:	28 a1       	ldd	r18, Y+32	; 0x20
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	82 9f       	mul	r24, r18
     908:	a0 01       	movw	r20, r0
     90a:	83 9f       	mul	r24, r19
     90c:	50 0d       	add	r21, r0
     90e:	92 9f       	mul	r25, r18
     910:	50 0d       	add	r21, r0
     912:	11 24       	eor	r1, r1
     914:	4e 0f       	add	r20, r30
     916:	5f 1f       	adc	r21, r31
     918:	5d 83       	std	Y+5, r21	; 0x05
     91a:	4c 83       	std	Y+4, r20	; 0x04
     91c:	1e 8e       	std	Y+30, r1	; 0x1e
     91e:	fb 83       	std	Y+3, r31	; 0x03
     920:	ea 83       	std	Y+2, r30	; 0x02
     922:	01 97       	sbiw	r24, 0x01	; 1
     924:	28 9f       	mul	r18, r24
     926:	a0 01       	movw	r20, r0
     928:	29 9f       	mul	r18, r25
     92a:	50 0d       	add	r21, r0
     92c:	38 9f       	mul	r19, r24
     92e:	50 0d       	add	r21, r0
     930:	11 24       	eor	r1, r1
     932:	cf 01       	movw	r24, r30
     934:	84 0f       	add	r24, r20
     936:	95 1f       	adc	r25, r21
     938:	9f 83       	std	Y+7, r25	; 0x07
     93a:	8e 83       	std	Y+6, r24	; 0x06
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	89 a3       	std	Y+33, r24	; 0x21
     940:	8a a3       	std	Y+34, r24	; 0x22
     942:	61 11       	cpse	r22, r1
     944:	0a c0       	rjmp	.+20     	; 0x95a <xQueueGenericReset+0x6c>
     946:	88 85       	ldd	r24, Y+8	; 0x08
     948:	88 23       	and	r24, r24
     94a:	69 f0       	breq	.+26     	; 0x966 <xQueueGenericReset+0x78>
     94c:	ce 01       	movw	r24, r28
     94e:	08 96       	adiw	r24, 0x08	; 8
     950:	42 d7       	rcall	.+3716   	; 0x17d6 <xTaskRemoveFromEventList>
     952:	88 23       	and	r24, r24
     954:	41 f0       	breq	.+16     	; 0x966 <xQueueGenericReset+0x78>
     956:	3f de       	rcall	.-898    	; 0x5d6 <vPortYield>
     958:	06 c0       	rjmp	.+12     	; 0x966 <xQueueGenericReset+0x78>
     95a:	ce 01       	movw	r24, r28
     95c:	08 96       	adiw	r24, 0x08	; 8
     95e:	6d dd       	rcall	.-1318   	; 0x43a <vListInitialise>
     960:	ce 01       	movw	r24, r28
     962:	43 96       	adiw	r24, 0x13	; 19
     964:	6a dd       	rcall	.-1324   	; 0x43a <vListInitialise>
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <prvInitialiseNewQueue>:
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	f8 01       	movw	r30, r16
     978:	61 11       	cpse	r22, r1
     97a:	03 c0       	rjmp	.+6      	; 0x982 <prvInitialiseNewQueue+0x10>
     97c:	11 83       	std	Z+1, r17	; 0x01
     97e:	00 83       	st	Z, r16
     980:	02 c0       	rjmp	.+4      	; 0x986 <prvInitialiseNewQueue+0x14>
     982:	51 83       	std	Z+1, r21	; 0x01
     984:	40 83       	st	Z, r20
     986:	87 8f       	std	Z+31, r24	; 0x1f
     988:	60 a3       	std	Z+32, r22	; 0x20
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	cf 01       	movw	r24, r30
     98e:	af df       	rcall	.-162    	; 0x8ee <xQueueGenericReset>
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <xQueueGenericCreate>:
     996:	df 92       	push	r13
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	f8 2e       	mov	r15, r24
     9a6:	e6 2e       	mov	r14, r22
     9a8:	d4 2e       	mov	r13, r20
     9aa:	86 9f       	mul	r24, r22
     9ac:	c0 01       	movw	r24, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	83 96       	adiw	r24, 0x23	; 35
     9b2:	5f dc       	rcall	.-1858   	; 0x272 <pvPortMalloc>
     9b4:	ec 01       	movw	r28, r24
     9b6:	00 97       	sbiw	r24, 0x00	; 0
     9b8:	41 f0       	breq	.+16     	; 0x9ca <xQueueGenericCreate+0x34>
     9ba:	8c 01       	movw	r16, r24
     9bc:	2d 2d       	mov	r18, r13
     9be:	ac 01       	movw	r20, r24
     9c0:	4d 5d       	subi	r20, 0xDD	; 221
     9c2:	5f 4f       	sbci	r21, 0xFF	; 255
     9c4:	6e 2d       	mov	r22, r14
     9c6:	8f 2d       	mov	r24, r15
     9c8:	d4 df       	rcall	.-88     	; 0x972 <prvInitialiseNewQueue>
     9ca:	ce 01       	movw	r24, r28
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	08 95       	ret

000009dc <xQueueGenericSend>:
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	29 97       	sbiw	r28, 0x09	; 9
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	de bf       	out	0x3e, r29	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	cd bf       	out	0x3d, r28	; 61
     9fc:	7c 01       	movw	r14, r24
     9fe:	6b 01       	movw	r12, r22
     a00:	2e 83       	std	Y+6, r18	; 0x06
     a02:	3f 83       	std	Y+7, r19	; 0x07
     a04:	48 87       	std	Y+8, r20	; 0x08
     a06:	59 87       	std	Y+9, r21	; 0x09
     a08:	10 e0       	ldi	r17, 0x00	; 0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	0f 92       	push	r0
     a10:	f7 01       	movw	r30, r14
     a12:	96 8d       	ldd	r25, Z+30	; 0x1e
     a14:	87 8d       	ldd	r24, Z+31	; 0x1f
     a16:	98 17       	cp	r25, r24
     a18:	10 f0       	brcs	.+4      	; 0xa1e <xQueueGenericSend+0x42>
     a1a:	02 30       	cpi	r16, 0x02	; 2
     a1c:	a9 f4       	brne	.+42     	; 0xa48 <xQueueGenericSend+0x6c>
     a1e:	40 2f       	mov	r20, r16
     a20:	b6 01       	movw	r22, r12
     a22:	c7 01       	movw	r24, r14
     a24:	b9 de       	rcall	.-654    	; 0x798 <prvCopyDataToQueue>
     a26:	f7 01       	movw	r30, r14
     a28:	93 89       	ldd	r25, Z+19	; 0x13
     a2a:	99 23       	and	r25, r25
     a2c:	39 f0       	breq	.+14     	; 0xa3c <xQueueGenericSend+0x60>
     a2e:	c7 01       	movw	r24, r14
     a30:	43 96       	adiw	r24, 0x13	; 19
     a32:	d1 d6       	rcall	.+3490   	; 0x17d6 <xTaskRemoveFromEventList>
     a34:	88 23       	and	r24, r24
     a36:	21 f0       	breq	.+8      	; 0xa40 <xQueueGenericSend+0x64>
     a38:	ce dd       	rcall	.-1124   	; 0x5d6 <vPortYield>
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <xQueueGenericSend+0x64>
     a3c:	81 11       	cpse	r24, r1
     a3e:	cb dd       	rcall	.-1130   	; 0x5d6 <vPortYield>
     a40:	0f 90       	pop	r0
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	46 c0       	rjmp	.+140    	; 0xad4 <xQueueGenericSend+0xf8>
     a48:	8e 81       	ldd	r24, Y+6	; 0x06
     a4a:	9f 81       	ldd	r25, Y+7	; 0x07
     a4c:	a8 85       	ldd	r26, Y+8	; 0x08
     a4e:	b9 85       	ldd	r27, Y+9	; 0x09
     a50:	89 2b       	or	r24, r25
     a52:	8a 2b       	or	r24, r26
     a54:	8b 2b       	or	r24, r27
     a56:	21 f4       	brne	.+8      	; 0xa60 <xQueueGenericSend+0x84>
     a58:	0f 90       	pop	r0
     a5a:	0f be       	out	0x3f, r0	; 63
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	3a c0       	rjmp	.+116    	; 0xad4 <xQueueGenericSend+0xf8>
     a60:	11 11       	cpse	r17, r1
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <xQueueGenericSend+0x90>
     a64:	ce 01       	movw	r24, r28
     a66:	01 96       	adiw	r24, 0x01	; 1
     a68:	65 d7       	rcall	.+3786   	; 0x1934 <vTaskInternalSetTimeOutState>
     a6a:	11 e0       	ldi	r17, 0x01	; 1
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	b0 d3       	rcall	.+1888   	; 0x11d2 <vTaskSuspendAll>
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	0f 92       	push	r0
     a78:	f7 01       	movw	r30, r14
     a7a:	81 a1       	ldd	r24, Z+33	; 0x21
     a7c:	8f 3f       	cpi	r24, 0xFF	; 255
     a7e:	09 f4       	brne	.+2      	; 0xa82 <xQueueGenericSend+0xa6>
     a80:	11 a2       	std	Z+33, r1	; 0x21
     a82:	f7 01       	movw	r30, r14
     a84:	82 a1       	ldd	r24, Z+34	; 0x22
     a86:	8f 3f       	cpi	r24, 0xFF	; 255
     a88:	09 f4       	brne	.+2      	; 0xa8c <xQueueGenericSend+0xb0>
     a8a:	12 a2       	std	Z+34, r1	; 0x22
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	be 01       	movw	r22, r28
     a92:	6a 5f       	subi	r22, 0xFA	; 250
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	5d d7       	rcall	.+3770   	; 0x1956 <xTaskCheckForTimeOut>
     a9c:	81 11       	cpse	r24, r1
     a9e:	16 c0       	rjmp	.+44     	; 0xacc <xQueueGenericSend+0xf0>
     aa0:	c7 01       	movw	r24, r14
     aa2:	6c de       	rcall	.-808    	; 0x77c <prvIsQueueFull>
     aa4:	88 23       	and	r24, r24
     aa6:	71 f0       	breq	.+28     	; 0xac4 <xQueueGenericSend+0xe8>
     aa8:	4e 81       	ldd	r20, Y+6	; 0x06
     aaa:	5f 81       	ldd	r21, Y+7	; 0x07
     aac:	68 85       	ldd	r22, Y+8	; 0x08
     aae:	79 85       	ldd	r23, Y+9	; 0x09
     ab0:	c7 01       	movw	r24, r14
     ab2:	08 96       	adiw	r24, 0x08	; 8
     ab4:	37 d6       	rcall	.+3182   	; 0x1724 <vTaskPlaceOnEventList>
     ab6:	c7 01       	movw	r24, r14
     ab8:	e8 de       	rcall	.-560    	; 0x88a <prvUnlockQueue>
     aba:	cb d4       	rcall	.+2454   	; 0x1452 <xTaskResumeAll>
     abc:	81 11       	cpse	r24, r1
     abe:	a5 cf       	rjmp	.-182    	; 0xa0a <xQueueGenericSend+0x2e>
     ac0:	8a dd       	rcall	.-1260   	; 0x5d6 <vPortYield>
     ac2:	a3 cf       	rjmp	.-186    	; 0xa0a <xQueueGenericSend+0x2e>
     ac4:	c7 01       	movw	r24, r14
     ac6:	e1 de       	rcall	.-574    	; 0x88a <prvUnlockQueue>
     ac8:	c4 d4       	rcall	.+2440   	; 0x1452 <xTaskResumeAll>
     aca:	9f cf       	rjmp	.-194    	; 0xa0a <xQueueGenericSend+0x2e>
     acc:	c7 01       	movw	r24, r14
     ace:	dd de       	rcall	.-582    	; 0x88a <prvUnlockQueue>
     ad0:	c0 d4       	rcall	.+2432   	; 0x1452 <xTaskResumeAll>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	29 96       	adiw	r28, 0x09	; 9
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	f8 94       	cli
     ada:	de bf       	out	0x3e, r29	; 62
     adc:	0f be       	out	0x3f, r0	; 63
     ade:	cd bf       	out	0x3d, r28	; 61
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	cf 90       	pop	r12
     af0:	08 95       	ret

00000af2 <xQueueGenericSendFromISR>:
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	8a 01       	movw	r16, r20
     b00:	fc 01       	movw	r30, r24
     b02:	56 8d       	ldd	r21, Z+30	; 0x1e
     b04:	37 8d       	ldd	r19, Z+31	; 0x1f
     b06:	53 17       	cp	r21, r19
     b08:	10 f0       	brcs	.+4      	; 0xb0e <xQueueGenericSendFromISR+0x1c>
     b0a:	22 30       	cpi	r18, 0x02	; 2
     b0c:	f1 f4       	brne	.+60     	; 0xb4a <xQueueGenericSendFromISR+0x58>
     b0e:	42 2f       	mov	r20, r18
     b10:	78 01       	movw	r14, r16
     b12:	ec 01       	movw	r28, r24
     b14:	1a a1       	ldd	r17, Y+34	; 0x22
     b16:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b18:	ce 01       	movw	r24, r28
     b1a:	3e de       	rcall	.-900    	; 0x798 <prvCopyDataToQueue>
     b1c:	1f 3f       	cpi	r17, 0xFF	; 255
     b1e:	79 f4       	brne	.+30     	; 0xb3e <xQueueGenericSendFromISR+0x4c>
     b20:	8b 89       	ldd	r24, Y+19	; 0x13
     b22:	88 23       	and	r24, r24
     b24:	a1 f0       	breq	.+40     	; 0xb4e <xQueueGenericSendFromISR+0x5c>
     b26:	ce 01       	movw	r24, r28
     b28:	43 96       	adiw	r24, 0x13	; 19
     b2a:	55 d6       	rcall	.+3242   	; 0x17d6 <xTaskRemoveFromEventList>
     b2c:	88 23       	and	r24, r24
     b2e:	89 f0       	breq	.+34     	; 0xb52 <xQueueGenericSendFromISR+0x60>
     b30:	e1 14       	cp	r14, r1
     b32:	f1 04       	cpc	r15, r1
     b34:	81 f0       	breq	.+32     	; 0xb56 <xQueueGenericSendFromISR+0x64>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	f7 01       	movw	r30, r14
     b3a:	80 83       	st	Z, r24
     b3c:	0d c0       	rjmp	.+26     	; 0xb58 <xQueueGenericSendFromISR+0x66>
     b3e:	ff 24       	eor	r15, r15
     b40:	f3 94       	inc	r15
     b42:	f1 0e       	add	r15, r17
     b44:	fa a2       	std	Y+34, r15	; 0x22
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	07 c0       	rjmp	.+14     	; 0xb58 <xQueueGenericSendFromISR+0x66>
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	05 c0       	rjmp	.+10     	; 0xb58 <xQueueGenericSendFromISR+0x66>
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <xQueueGenericSendFromISR+0x66>
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <xQueueGenericSendFromISR+0x66>
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	08 95       	ret

00000b66 <xQueueReceive>:
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	29 97       	sbiw	r28, 0x09	; 9
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
     b86:	8c 01       	movw	r16, r24
     b88:	6b 01       	movw	r12, r22
     b8a:	2e 83       	std	Y+6, r18	; 0x06
     b8c:	3f 83       	std	Y+7, r19	; 0x07
     b8e:	48 87       	std	Y+8, r20	; 0x08
     b90:	59 87       	std	Y+9, r21	; 0x09
     b92:	e1 2c       	mov	r14, r1
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	0f 92       	push	r0
     b9a:	f8 01       	movw	r30, r16
     b9c:	f6 8c       	ldd	r15, Z+30	; 0x1e
     b9e:	ff 20       	and	r15, r15
     ba0:	91 f0       	breq	.+36     	; 0xbc6 <xQueueReceive+0x60>
     ba2:	b6 01       	movw	r22, r12
     ba4:	c8 01       	movw	r24, r16
     ba6:	57 de       	rcall	.-850    	; 0x856 <prvCopyDataFromQueue>
     ba8:	fa 94       	dec	r15
     baa:	f8 01       	movw	r30, r16
     bac:	f6 8e       	std	Z+30, r15	; 0x1e
     bae:	80 85       	ldd	r24, Z+8	; 0x08
     bb0:	88 23       	and	r24, r24
     bb2:	29 f0       	breq	.+10     	; 0xbbe <xQueueReceive+0x58>
     bb4:	c8 01       	movw	r24, r16
     bb6:	08 96       	adiw	r24, 0x08	; 8
     bb8:	0e d6       	rcall	.+3100   	; 0x17d6 <xTaskRemoveFromEventList>
     bba:	81 11       	cpse	r24, r1
     bbc:	0c dd       	rcall	.-1512   	; 0x5d6 <vPortYield>
     bbe:	0f 90       	pop	r0
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	4c c0       	rjmp	.+152    	; 0xc5e <xQueueReceive+0xf8>
     bc6:	8e 81       	ldd	r24, Y+6	; 0x06
     bc8:	9f 81       	ldd	r25, Y+7	; 0x07
     bca:	a8 85       	ldd	r26, Y+8	; 0x08
     bcc:	b9 85       	ldd	r27, Y+9	; 0x09
     bce:	89 2b       	or	r24, r25
     bd0:	8a 2b       	or	r24, r26
     bd2:	8b 2b       	or	r24, r27
     bd4:	21 f4       	brne	.+8      	; 0xbde <xQueueReceive+0x78>
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	40 c0       	rjmp	.+128    	; 0xc5e <xQueueReceive+0xf8>
     bde:	e1 10       	cpse	r14, r1
     be0:	05 c0       	rjmp	.+10     	; 0xbec <xQueueReceive+0x86>
     be2:	ce 01       	movw	r24, r28
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	a6 d6       	rcall	.+3404   	; 0x1934 <vTaskInternalSetTimeOutState>
     be8:	ee 24       	eor	r14, r14
     bea:	e3 94       	inc	r14
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	f0 d2       	rcall	.+1504   	; 0x11d2 <vTaskSuspendAll>
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	0f 92       	push	r0
     bf8:	f8 01       	movw	r30, r16
     bfa:	81 a1       	ldd	r24, Z+33	; 0x21
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	09 f4       	brne	.+2      	; 0xc02 <xQueueReceive+0x9c>
     c00:	11 a2       	std	Z+33, r1	; 0x21
     c02:	f8 01       	movw	r30, r16
     c04:	82 a1       	ldd	r24, Z+34	; 0x22
     c06:	8f 3f       	cpi	r24, 0xFF	; 255
     c08:	09 f4       	brne	.+2      	; 0xc0c <xQueueReceive+0xa6>
     c0a:	12 a2       	std	Z+34, r1	; 0x22
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	be 01       	movw	r22, r28
     c12:	6a 5f       	subi	r22, 0xFA	; 250
     c14:	7f 4f       	sbci	r23, 0xFF	; 255
     c16:	ce 01       	movw	r24, r28
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	9d d6       	rcall	.+3386   	; 0x1956 <xTaskCheckForTimeOut>
     c1c:	81 11       	cpse	r24, r1
     c1e:	16 c0       	rjmp	.+44     	; 0xc4c <xQueueReceive+0xe6>
     c20:	c8 01       	movw	r24, r16
     c22:	9f dd       	rcall	.-1218   	; 0x762 <prvIsQueueEmpty>
     c24:	88 23       	and	r24, r24
     c26:	71 f0       	breq	.+28     	; 0xc44 <xQueueReceive+0xde>
     c28:	4e 81       	ldd	r20, Y+6	; 0x06
     c2a:	5f 81       	ldd	r21, Y+7	; 0x07
     c2c:	68 85       	ldd	r22, Y+8	; 0x08
     c2e:	79 85       	ldd	r23, Y+9	; 0x09
     c30:	c8 01       	movw	r24, r16
     c32:	43 96       	adiw	r24, 0x13	; 19
     c34:	77 d5       	rcall	.+2798   	; 0x1724 <vTaskPlaceOnEventList>
     c36:	c8 01       	movw	r24, r16
     c38:	28 de       	rcall	.-944    	; 0x88a <prvUnlockQueue>
     c3a:	0b d4       	rcall	.+2070   	; 0x1452 <xTaskResumeAll>
     c3c:	81 11       	cpse	r24, r1
     c3e:	aa cf       	rjmp	.-172    	; 0xb94 <xQueueReceive+0x2e>
     c40:	ca dc       	rcall	.-1644   	; 0x5d6 <vPortYield>
     c42:	a8 cf       	rjmp	.-176    	; 0xb94 <xQueueReceive+0x2e>
     c44:	c8 01       	movw	r24, r16
     c46:	21 de       	rcall	.-958    	; 0x88a <prvUnlockQueue>
     c48:	04 d4       	rcall	.+2056   	; 0x1452 <xTaskResumeAll>
     c4a:	a4 cf       	rjmp	.-184    	; 0xb94 <xQueueReceive+0x2e>
     c4c:	c8 01       	movw	r24, r16
     c4e:	1d de       	rcall	.-966    	; 0x88a <prvUnlockQueue>
     c50:	00 d4       	rcall	.+2048   	; 0x1452 <xTaskResumeAll>
     c52:	c8 01       	movw	r24, r16
     c54:	86 dd       	rcall	.-1268   	; 0x762 <prvIsQueueEmpty>
     c56:	88 23       	and	r24, r24
     c58:	09 f4       	brne	.+2      	; 0xc5c <xQueueReceive+0xf6>
     c5a:	9c cf       	rjmp	.-200    	; 0xb94 <xQueueReceive+0x2e>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	29 96       	adiw	r28, 0x09	; 9
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	08 95       	ret

00000c7c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	0f 92       	push	r0
     c88:	89 a1       	ldd	r24, Y+33	; 0x21
     c8a:	8f 3f       	cpi	r24, 0xFF	; 255
     c8c:	09 f4       	brne	.+2      	; 0xc90 <vQueueWaitForMessageRestricted+0x14>
     c8e:	19 a2       	std	Y+33, r1	; 0x21
     c90:	8a a1       	ldd	r24, Y+34	; 0x22
     c92:	8f 3f       	cpi	r24, 0xFF	; 255
     c94:	09 f4       	brne	.+2      	; 0xc98 <vQueueWaitForMessageRestricted+0x1c>
     c96:	1a a2       	std	Y+34, r1	; 0x22
     c98:	0f 90       	pop	r0
     c9a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     c9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c9e:	81 11       	cpse	r24, r1
     ca0:	03 c0       	rjmp	.+6      	; 0xca8 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     ca2:	ce 01       	movw	r24, r28
     ca4:	43 96       	adiw	r24, 0x13	; 19
     ca6:	55 d5       	rcall	.+2730   	; 0x1752 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     ca8:	ce 01       	movw	r24, r28
     caa:	ef dd       	rcall	.-1058   	; 0x88a <prvUnlockQueue>
    }
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <prvResetNextTaskUnblockTime>:
     cb2:	e0 91 65 0c 	lds	r30, 0x0C65	; 0x800c65 <pxDelayedTaskList>
     cb6:	f0 91 66 0c 	lds	r31, 0x0C66	; 0x800c66 <pxDelayedTaskList+0x1>
     cba:	80 81       	ld	r24, Z
     cbc:	81 11       	cpse	r24, r1
     cbe:	0c c0       	rjmp	.+24     	; 0xcd8 <prvResetNextTaskUnblockTime+0x26>
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f ef       	ldi	r25, 0xFF	; 255
     cc4:	dc 01       	movw	r26, r24
     cc6:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <xNextTaskUnblockTime>
     cca:	90 93 30 0c 	sts	0x0C30, r25	; 0x800c30 <xNextTaskUnblockTime+0x1>
     cce:	a0 93 31 0c 	sts	0x0C31, r26	; 0x800c31 <xNextTaskUnblockTime+0x2>
     cd2:	b0 93 32 0c 	sts	0x0C32, r27	; 0x800c32 <xNextTaskUnblockTime+0x3>
     cd6:	08 95       	ret
     cd8:	e0 91 65 0c 	lds	r30, 0x0C65	; 0x800c65 <pxDelayedTaskList>
     cdc:	f0 91 66 0c 	lds	r31, 0x0C66	; 0x800c66 <pxDelayedTaskList+0x1>
     ce0:	07 80       	ldd	r0, Z+7	; 0x07
     ce2:	f0 85       	ldd	r31, Z+8	; 0x08
     ce4:	e0 2d       	mov	r30, r0
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	a2 81       	ldd	r26, Z+2	; 0x02
     cec:	b3 81       	ldd	r27, Z+3	; 0x03
     cee:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <xNextTaskUnblockTime>
     cf2:	90 93 30 0c 	sts	0x0C30, r25	; 0x800c30 <xNextTaskUnblockTime+0x1>
     cf6:	a0 93 31 0c 	sts	0x0C31, r26	; 0x800c31 <xNextTaskUnblockTime+0x2>
     cfa:	b0 93 32 0c 	sts	0x0C32, r27	; 0x800c32 <xNextTaskUnblockTime+0x3>
     cfe:	08 95       	ret

00000d00 <prvDeleteTCB>:
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
     d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d0a:	5b db       	rcall	.-2378   	; 0x3c2 <vPortFree>
     d0c:	ce 01       	movw	r24, r28
     d0e:	59 db       	rcall	.-2382   	; 0x3c2 <vPortFree>
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <prvInitialiseNewTask>:
     d16:	4f 92       	push	r4
     d18:	5f 92       	push	r5
     d1a:	6f 92       	push	r6
     d1c:	7f 92       	push	r7
     d1e:	8f 92       	push	r8
     d20:	9f 92       	push	r9
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	2c 01       	movw	r4, r24
     d36:	5b 01       	movw	r10, r22
     d38:	4a 01       	movw	r8, r20
     d3a:	39 01       	movw	r6, r18
     d3c:	e6 01       	movw	r28, r12
     d3e:	65 ea       	ldi	r22, 0xA5	; 165
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d46:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <memset>
     d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d4e:	21 e0       	ldi	r18, 0x01	; 1
     d50:	82 1a       	sub	r8, r18
     d52:	91 08       	sbc	r9, r1
     d54:	88 0e       	add	r8, r24
     d56:	99 1e       	adc	r9, r25
     d58:	a1 14       	cp	r10, r1
     d5a:	b1 04       	cpc	r11, r1
     d5c:	89 f4       	brne	.+34     	; 0xd80 <prvInitialiseNewTask+0x6a>
     d5e:	15 c0       	rjmp	.+42     	; 0xd8a <prvInitialiseNewTask+0x74>
     d60:	82 2f       	mov	r24, r18
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	f5 01       	movw	r30, r10
     d66:	e8 0f       	add	r30, r24
     d68:	f9 1f       	adc	r31, r25
     d6a:	30 81       	ld	r19, Z
     d6c:	de 01       	movw	r26, r28
     d6e:	a8 0f       	add	r26, r24
     d70:	b9 1f       	adc	r27, r25
     d72:	5d 96       	adiw	r26, 0x1d	; 29
     d74:	3c 93       	st	X, r19
     d76:	80 81       	ld	r24, Z
     d78:	88 23       	and	r24, r24
     d7a:	29 f0       	breq	.+10     	; 0xd86 <prvInitialiseNewTask+0x70>
     d7c:	2f 5f       	subi	r18, 0xFF	; 255
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <prvInitialiseNewTask+0x6c>
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	20 31       	cpi	r18, 0x10	; 16
     d84:	68 f3       	brcs	.-38     	; 0xd60 <prvInitialiseNewTask+0x4a>
     d86:	1c a6       	std	Y+44, r1	; 0x2c
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <prvInitialiseNewTask+0x76>
     d8a:	1d 8e       	std	Y+29, r1	; 0x1d
     d8c:	0a 30       	cpi	r16, 0x0A	; 10
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <prvInitialiseNewTask+0x7c>
     d90:	09 e0       	ldi	r16, 0x09	; 9
     d92:	0a 8f       	std	Y+26, r16	; 0x1a
     d94:	0d a7       	std	Y+45, r16	; 0x2d
     d96:	1e a6       	std	Y+46, r1	; 0x2e
     d98:	ce 01       	movw	r24, r28
     d9a:	02 96       	adiw	r24, 0x02	; 2
     d9c:	5f db       	rcall	.-2370   	; 0x45c <vListInitialiseItem>
     d9e:	ce 01       	movw	r24, r28
     da0:	0e 96       	adiw	r24, 0x0e	; 14
     da2:	5c db       	rcall	.-2376   	; 0x45c <vListInitialiseItem>
     da4:	db 87       	std	Y+11, r29	; 0x0b
     da6:	ca 87       	std	Y+10, r28	; 0x0a
     da8:	8a e0       	ldi	r24, 0x0A	; 10
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	a0 e0       	ldi	r26, 0x00	; 0
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	80 1b       	sub	r24, r16
     db2:	91 09       	sbc	r25, r1
     db4:	a1 09       	sbc	r26, r1
     db6:	b1 09       	sbc	r27, r1
     db8:	8e 87       	std	Y+14, r24	; 0x0e
     dba:	9f 87       	std	Y+15, r25	; 0x0f
     dbc:	a8 8b       	std	Y+16, r26	; 0x10
     dbe:	b9 8b       	std	Y+17, r27	; 0x11
     dc0:	df 8b       	std	Y+23, r29	; 0x17
     dc2:	ce 8b       	std	Y+22, r28	; 0x16
     dc4:	18 aa       	std	Y+48, r1	; 0x30
     dc6:	1f a6       	std	Y+47, r1	; 0x2f
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	fe 01       	movw	r30, r28
     dcc:	f1 96       	adiw	r30, 0x31	; 49
     dce:	df 01       	movw	r26, r30
     dd0:	1d 92       	st	X+, r1
     dd2:	8a 95       	dec	r24
     dd4:	e9 f7       	brne	.-6      	; 0xdd0 <prvInitialiseNewTask+0xba>
     dd6:	1d aa       	std	Y+53, r1	; 0x35
     dd8:	a3 01       	movw	r20, r6
     dda:	b2 01       	movw	r22, r4
     ddc:	c4 01       	movw	r24, r8
     dde:	b2 db       	rcall	.-2204   	; 0x544 <pxPortInitialiseStack>
     de0:	99 83       	std	Y+1, r25	; 0x01
     de2:	88 83       	st	Y, r24
     de4:	e1 14       	cp	r14, r1
     de6:	f1 04       	cpc	r15, r1
     de8:	19 f0       	breq	.+6      	; 0xdf0 <prvInitialiseNewTask+0xda>
     dea:	f7 01       	movw	r30, r14
     dec:	d1 83       	std	Z+1, r29	; 0x01
     dee:	c0 83       	st	Z, r28
     df0:	df 91       	pop	r29
     df2:	cf 91       	pop	r28
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	4f 90       	pop	r4
     e0e:	08 95       	ret

00000e10 <prvInitialiseTaskLists>:
     e10:	cf 93       	push	r28
     e12:	c0 e0       	ldi	r28, 0x00	; 0
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <prvInitialiseTaskLists+0x16>
     e16:	2b e0       	ldi	r18, 0x0B	; 11
     e18:	c2 9f       	mul	r28, r18
     e1a:	c0 01       	movw	r24, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	83 58       	subi	r24, 0x83	; 131
     e20:	93 4f       	sbci	r25, 0xF3	; 243
     e22:	0b db       	rcall	.-2538   	; 0x43a <vListInitialise>
     e24:	cf 5f       	subi	r28, 0xFF	; 255
     e26:	ca 30       	cpi	r28, 0x0A	; 10
     e28:	b0 f3       	brcs	.-20     	; 0xe16 <prvInitialiseTaskLists+0x6>
     e2a:	82 e7       	ldi	r24, 0x72	; 114
     e2c:	9c e0       	ldi	r25, 0x0C	; 12
     e2e:	05 db       	rcall	.-2550   	; 0x43a <vListInitialise>
     e30:	87 e6       	ldi	r24, 0x67	; 103
     e32:	9c e0       	ldi	r25, 0x0C	; 12
     e34:	02 db       	rcall	.-2556   	; 0x43a <vListInitialise>
     e36:	88 e5       	ldi	r24, 0x58	; 88
     e38:	9c e0       	ldi	r25, 0x0C	; 12
     e3a:	ff da       	rcall	.-2562   	; 0x43a <vListInitialise>
     e3c:	8d e4       	ldi	r24, 0x4D	; 77
     e3e:	9c e0       	ldi	r25, 0x0C	; 12
     e40:	fc da       	rcall	.-2568   	; 0x43a <vListInitialise>
     e42:	81 e4       	ldi	r24, 0x41	; 65
     e44:	9c e0       	ldi	r25, 0x0C	; 12
     e46:	f9 da       	rcall	.-2574   	; 0x43a <vListInitialise>
     e48:	82 e7       	ldi	r24, 0x72	; 114
     e4a:	9c e0       	ldi	r25, 0x0C	; 12
     e4c:	90 93 66 0c 	sts	0x0C66, r25	; 0x800c66 <pxDelayedTaskList+0x1>
     e50:	80 93 65 0c 	sts	0x0C65, r24	; 0x800c65 <pxDelayedTaskList>
     e54:	87 e6       	ldi	r24, 0x67	; 103
     e56:	9c e0       	ldi	r25, 0x0C	; 12
     e58:	90 93 64 0c 	sts	0x0C64, r25	; 0x800c64 <pxOverflowDelayedTaskList+0x1>
     e5c:	80 93 63 0c 	sts	0x0C63, r24	; 0x800c63 <pxOverflowDelayedTaskList>
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <prvAddNewTaskToReadyList>:
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	ec 01       	movw	r28, r24
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	0f 92       	push	r0
     e70:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <uxCurrentNumberOfTasks>
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <uxCurrentNumberOfTasks>
     e7a:	80 91 eb 0c 	lds	r24, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     e7e:	90 91 ec 0c 	lds	r25, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     e82:	89 2b       	or	r24, r25
     e84:	51 f4       	brne	.+20     	; 0xe9a <prvAddNewTaskToReadyList+0x36>
     e86:	d0 93 ec 0c 	sts	0x0CEC, r29	; 0x800cec <pxCurrentTCB+0x1>
     e8a:	c0 93 eb 0c 	sts	0x0CEB, r28	; 0x800ceb <pxCurrentTCB>
     e8e:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <uxCurrentNumberOfTasks>
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 f4       	brne	.+36     	; 0xeba <prvAddNewTaskToReadyList+0x56>
     e96:	bc df       	rcall	.-136    	; 0xe10 <prvInitialiseTaskLists>
     e98:	10 c0       	rjmp	.+32     	; 0xeba <prvAddNewTaskToReadyList+0x56>
     e9a:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <xSchedulerRunning>
     e9e:	81 11       	cpse	r24, r1
     ea0:	0c c0       	rjmp	.+24     	; 0xeba <prvAddNewTaskToReadyList+0x56>
     ea2:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     ea6:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     eaa:	92 8d       	ldd	r25, Z+26	; 0x1a
     eac:	8a 8d       	ldd	r24, Y+26	; 0x1a
     eae:	89 17       	cp	r24, r25
     eb0:	20 f0       	brcs	.+8      	; 0xeba <prvAddNewTaskToReadyList+0x56>
     eb2:	d0 93 ec 0c 	sts	0x0CEC, r29	; 0x800cec <pxCurrentTCB+0x1>
     eb6:	c0 93 eb 0c 	sts	0x0CEB, r28	; 0x800ceb <pxCurrentTCB>
     eba:	80 91 33 0c 	lds	r24, 0x0C33	; 0x800c33 <uxTaskNumber>
     ebe:	8f 5f       	subi	r24, 0xFF	; 255
     ec0:	80 93 33 0c 	sts	0x0C33, r24	; 0x800c33 <uxTaskNumber>
     ec4:	ea 8d       	ldd	r30, Y+26	; 0x1a
     ec6:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <uxTopReadyPriority>
     eca:	8e 17       	cp	r24, r30
     ecc:	10 f4       	brcc	.+4      	; 0xed2 <prvAddNewTaskToReadyList+0x6e>
     ece:	e0 93 3b 0c 	sts	0x0C3B, r30	; 0x800c3b <uxTopReadyPriority>
     ed2:	8b e0       	ldi	r24, 0x0B	; 11
     ed4:	8e 9f       	mul	r24, r30
     ed6:	f0 01       	movw	r30, r0
     ed8:	11 24       	eor	r1, r1
     eda:	e3 58       	subi	r30, 0x83	; 131
     edc:	f3 4f       	sbci	r31, 0xF3	; 243
     ede:	01 80       	ldd	r0, Z+1	; 0x01
     ee0:	f2 81       	ldd	r31, Z+2	; 0x02
     ee2:	e0 2d       	mov	r30, r0
     ee4:	ff 83       	std	Y+7, r31	; 0x07
     ee6:	ee 83       	std	Y+6, r30	; 0x06
     ee8:	26 81       	ldd	r18, Z+6	; 0x06
     eea:	37 81       	ldd	r19, Z+7	; 0x07
     eec:	39 87       	std	Y+9, r19	; 0x09
     eee:	28 87       	std	Y+8, r18	; 0x08
     ef0:	a6 81       	ldd	r26, Z+6	; 0x06
     ef2:	b7 81       	ldd	r27, Z+7	; 0x07
     ef4:	9e 01       	movw	r18, r28
     ef6:	2e 5f       	subi	r18, 0xFE	; 254
     ef8:	3f 4f       	sbci	r19, 0xFF	; 255
     efa:	15 96       	adiw	r26, 0x05	; 5
     efc:	3c 93       	st	X, r19
     efe:	2e 93       	st	-X, r18
     f00:	14 97       	sbiw	r26, 0x04	; 4
     f02:	37 83       	std	Z+7, r19	; 0x07
     f04:	26 83       	std	Z+6, r18	; 0x06
     f06:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f08:	8e 9f       	mul	r24, r30
     f0a:	f0 01       	movw	r30, r0
     f0c:	11 24       	eor	r1, r1
     f0e:	e3 58       	subi	r30, 0x83	; 131
     f10:	f3 4f       	sbci	r31, 0xF3	; 243
     f12:	fd 87       	std	Y+13, r31	; 0x0d
     f14:	ec 87       	std	Y+12, r30	; 0x0c
     f16:	80 81       	ld	r24, Z
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 83       	st	Z, r24
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <xSchedulerRunning>
     f24:	88 23       	and	r24, r24
     f26:	49 f0       	breq	.+18     	; 0xf3a <prvAddNewTaskToReadyList+0xd6>
     f28:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     f2c:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     f30:	92 8d       	ldd	r25, Z+26	; 0x1a
     f32:	8a 8d       	ldd	r24, Y+26	; 0x1a
     f34:	98 17       	cp	r25, r24
     f36:	08 f4       	brcc	.+2      	; 0xf3a <prvAddNewTaskToReadyList+0xd6>
     f38:	4e db       	rcall	.-2404   	; 0x5d6 <vPortYield>
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <prvCheckTasksWaitingTermination>:
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	1a c0       	rjmp	.+52     	; 0xf7a <prvCheckTasksWaitingTermination+0x3a>
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	0f 92       	push	r0
     f4c:	e0 91 54 0c 	lds	r30, 0x0C54	; 0x800c54 <xTasksWaitingTermination+0x7>
     f50:	f0 91 55 0c 	lds	r31, 0x0C55	; 0x800c55 <xTasksWaitingTermination+0x8>
     f54:	c0 85       	ldd	r28, Z+8	; 0x08
     f56:	d1 85       	ldd	r29, Z+9	; 0x09
     f58:	ce 01       	movw	r24, r28
     f5a:	02 96       	adiw	r24, 0x02	; 2
     f5c:	c0 da       	rcall	.-2688   	; 0x4de <uxListRemove>
     f5e:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <uxCurrentNumberOfTasks>
     f62:	81 50       	subi	r24, 0x01	; 1
     f64:	80 93 40 0c 	sts	0x0C40, r24	; 0x800c40 <uxCurrentNumberOfTasks>
     f68:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxDeletedTasksWaitingCleanUp>
     f6c:	81 50       	subi	r24, 0x01	; 1
     f6e:	80 93 4c 0c 	sts	0x0C4C, r24	; 0x800c4c <uxDeletedTasksWaitingCleanUp>
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	ce 01       	movw	r24, r28
     f78:	c3 de       	rcall	.-634    	; 0xd00 <prvDeleteTCB>
     f7a:	80 91 4c 0c 	lds	r24, 0x0C4C	; 0x800c4c <uxDeletedTasksWaitingCleanUp>
     f7e:	81 11       	cpse	r24, r1
     f80:	e2 cf       	rjmp	.-60     	; 0xf46 <prvCheckTasksWaitingTermination+0x6>
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <prvAddCurrentTaskToDelayedList>:
     f88:	8f 92       	push	r8
     f8a:	9f 92       	push	r9
     f8c:	af 92       	push	r10
     f8e:	bf 92       	push	r11
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	6b 01       	movw	r12, r22
     f9e:	7c 01       	movw	r14, r24
     fa0:	c4 2f       	mov	r28, r20
     fa2:	80 90 3c 0c 	lds	r8, 0x0C3C	; 0x800c3c <xTickCount>
     fa6:	90 90 3d 0c 	lds	r9, 0x0C3D	; 0x800c3d <xTickCount+0x1>
     faa:	a0 90 3e 0c 	lds	r10, 0x0C3E	; 0x800c3e <xTickCount+0x2>
     fae:	b0 90 3f 0c 	lds	r11, 0x0C3F	; 0x800c3f <xTickCount+0x3>
     fb2:	80 91 eb 0c 	lds	r24, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     fb6:	90 91 ec 0c 	lds	r25, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     fba:	02 96       	adiw	r24, 0x02	; 2
     fbc:	90 da       	rcall	.-2784   	; 0x4de <uxListRemove>
     fbe:	8f ef       	ldi	r24, 0xFF	; 255
     fc0:	c8 16       	cp	r12, r24
     fc2:	d8 06       	cpc	r13, r24
     fc4:	e8 06       	cpc	r14, r24
     fc6:	f8 06       	cpc	r15, r24
     fc8:	b1 f5       	brne	.+108    	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
     fca:	cc 23       	and	r28, r28
     fcc:	a1 f1       	breq	.+104    	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
     fce:	e1 e4       	ldi	r30, 0x41	; 65
     fd0:	fc e0       	ldi	r31, 0x0C	; 12
     fd2:	a1 81       	ldd	r26, Z+1	; 0x01
     fd4:	b2 81       	ldd	r27, Z+2	; 0x02
     fd6:	c0 91 eb 0c 	lds	r28, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     fda:	d0 91 ec 0c 	lds	r29, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     fde:	bf 83       	std	Y+7, r27	; 0x07
     fe0:	ae 83       	std	Y+6, r26	; 0x06
     fe2:	c0 91 eb 0c 	lds	r28, 0x0CEB	; 0x800ceb <pxCurrentTCB>
     fe6:	d0 91 ec 0c 	lds	r29, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
     fea:	16 96       	adiw	r26, 0x06	; 6
     fec:	8d 91       	ld	r24, X+
     fee:	9c 91       	ld	r25, X
     ff0:	17 97       	sbiw	r26, 0x07	; 7
     ff2:	99 87       	std	Y+9, r25	; 0x09
     ff4:	88 87       	std	Y+8, r24	; 0x08
     ff6:	16 96       	adiw	r26, 0x06	; 6
     ff8:	cd 91       	ld	r28, X+
     ffa:	dc 91       	ld	r29, X
     ffc:	17 97       	sbiw	r26, 0x07	; 7
     ffe:	80 91 eb 0c 	lds	r24, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1002:	90 91 ec 0c 	lds	r25, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1006:	02 96       	adiw	r24, 0x02	; 2
    1008:	9d 83       	std	Y+5, r25	; 0x05
    100a:	8c 83       	std	Y+4, r24	; 0x04
    100c:	80 91 eb 0c 	lds	r24, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1010:	90 91 ec 0c 	lds	r25, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1014:	02 96       	adiw	r24, 0x02	; 2
    1016:	17 96       	adiw	r26, 0x07	; 7
    1018:	9c 93       	st	X, r25
    101a:	8e 93       	st	-X, r24
    101c:	16 97       	sbiw	r26, 0x06	; 6
    101e:	a0 91 eb 0c 	lds	r26, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1022:	b0 91 ec 0c 	lds	r27, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1026:	1d 96       	adiw	r26, 0x0d	; 13
    1028:	fc 93       	st	X, r31
    102a:	ee 93       	st	-X, r30
    102c:	1c 97       	sbiw	r26, 0x0c	; 12
    102e:	80 81       	ld	r24, Z
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	80 83       	st	Z, r24
    1034:	3d c0       	rjmp	.+122    	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
    1036:	c8 0c       	add	r12, r8
    1038:	d9 1c       	adc	r13, r9
    103a:	ea 1c       	adc	r14, r10
    103c:	fb 1c       	adc	r15, r11
    103e:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1042:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1046:	c2 82       	std	Z+2, r12	; 0x02
    1048:	d3 82       	std	Z+3, r13	; 0x03
    104a:	e4 82       	std	Z+4, r14	; 0x04
    104c:	f5 82       	std	Z+5, r15	; 0x05
    104e:	c8 14       	cp	r12, r8
    1050:	d9 04       	cpc	r13, r9
    1052:	ea 04       	cpc	r14, r10
    1054:	fb 04       	cpc	r15, r11
    1056:	60 f4       	brcc	.+24     	; 0x1070 <__EEPROM_REGION_LENGTH__+0x70>
    1058:	60 91 eb 0c 	lds	r22, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    105c:	70 91 ec 0c 	lds	r23, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1060:	80 91 63 0c 	lds	r24, 0x0C63	; 0x800c63 <pxOverflowDelayedTaskList>
    1064:	90 91 64 0c 	lds	r25, 0x0C64	; 0x800c64 <pxOverflowDelayedTaskList+0x1>
    1068:	6e 5f       	subi	r22, 0xFE	; 254
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	fb d9       	rcall	.-3082   	; 0x464 <vListInsert>
    106e:	20 c0       	rjmp	.+64     	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
    1070:	60 91 eb 0c 	lds	r22, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1074:	70 91 ec 0c 	lds	r23, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1078:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <pxDelayedTaskList>
    107c:	90 91 66 0c 	lds	r25, 0x0C66	; 0x800c66 <pxDelayedTaskList+0x1>
    1080:	6e 5f       	subi	r22, 0xFE	; 254
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	ef d9       	rcall	.-3106   	; 0x464 <vListInsert>
    1086:	80 91 2f 0c 	lds	r24, 0x0C2F	; 0x800c2f <xNextTaskUnblockTime>
    108a:	90 91 30 0c 	lds	r25, 0x0C30	; 0x800c30 <xNextTaskUnblockTime+0x1>
    108e:	a0 91 31 0c 	lds	r26, 0x0C31	; 0x800c31 <xNextTaskUnblockTime+0x2>
    1092:	b0 91 32 0c 	lds	r27, 0x0C32	; 0x800c32 <xNextTaskUnblockTime+0x3>
    1096:	c8 16       	cp	r12, r24
    1098:	d9 06       	cpc	r13, r25
    109a:	ea 06       	cpc	r14, r26
    109c:	fb 06       	cpc	r15, r27
    109e:	40 f4       	brcc	.+16     	; 0x10b0 <__EEPROM_REGION_LENGTH__+0xb0>
    10a0:	c0 92 2f 0c 	sts	0x0C2F, r12	; 0x800c2f <xNextTaskUnblockTime>
    10a4:	d0 92 30 0c 	sts	0x0C30, r13	; 0x800c30 <xNextTaskUnblockTime+0x1>
    10a8:	e0 92 31 0c 	sts	0x0C31, r14	; 0x800c31 <xNextTaskUnblockTime+0x2>
    10ac:	f0 92 32 0c 	sts	0x0C32, r15	; 0x800c32 <xNextTaskUnblockTime+0x3>
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	9f 90       	pop	r9
    10c2:	8f 90       	pop	r8
    10c4:	08 95       	ret

000010c6 <xTaskCreate>:
    10c6:	2f 92       	push	r2
    10c8:	3f 92       	push	r3
    10ca:	4f 92       	push	r4
    10cc:	5f 92       	push	r5
    10ce:	6f 92       	push	r6
    10d0:	7f 92       	push	r7
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	3c 01       	movw	r6, r24
    10ea:	1b 01       	movw	r2, r22
    10ec:	4a 01       	movw	r8, r20
    10ee:	29 01       	movw	r4, r18
    10f0:	ca 01       	movw	r24, r20
    10f2:	bf d8       	rcall	.-3714   	; 0x272 <pvPortMalloc>
    10f4:	6c 01       	movw	r12, r24
    10f6:	89 2b       	or	r24, r25
    10f8:	61 f0       	breq	.+24     	; 0x1112 <xTaskCreate+0x4c>
    10fa:	86 e3       	ldi	r24, 0x36	; 54
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	b9 d8       	rcall	.-3726   	; 0x272 <pvPortMalloc>
    1100:	ec 01       	movw	r28, r24
    1102:	89 2b       	or	r24, r25
    1104:	19 f0       	breq	.+6      	; 0x110c <xTaskCreate+0x46>
    1106:	dc 8e       	std	Y+28, r13	; 0x1c
    1108:	cb 8e       	std	Y+27, r12	; 0x1b
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <xTaskCreate+0x50>
    110c:	c6 01       	movw	r24, r12
    110e:	59 d9       	rcall	.-3406   	; 0x3c2 <vPortFree>
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <xTaskCreate+0x50>
    1112:	c0 e0       	ldi	r28, 0x00	; 0
    1114:	d0 e0       	ldi	r29, 0x00	; 0
    1116:	20 97       	sbiw	r28, 0x00	; 0
    1118:	61 f0       	breq	.+24     	; 0x1132 <xTaskCreate+0x6c>
    111a:	a1 2c       	mov	r10, r1
    111c:	b1 2c       	mov	r11, r1
    111e:	6e 01       	movw	r12, r28
    1120:	92 01       	movw	r18, r4
    1122:	a4 01       	movw	r20, r8
    1124:	b1 01       	movw	r22, r2
    1126:	c3 01       	movw	r24, r6
    1128:	f6 dd       	rcall	.-1044   	; 0xd16 <prvInitialiseNewTask>
    112a:	ce 01       	movw	r24, r28
    112c:	9b de       	rcall	.-714    	; 0xe64 <prvAddNewTaskToReadyList>
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <xTaskCreate+0x6e>
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	0f 91       	pop	r16
    113a:	ff 90       	pop	r15
    113c:	ef 90       	pop	r14
    113e:	df 90       	pop	r13
    1140:	cf 90       	pop	r12
    1142:	bf 90       	pop	r11
    1144:	af 90       	pop	r10
    1146:	9f 90       	pop	r9
    1148:	8f 90       	pop	r8
    114a:	7f 90       	pop	r7
    114c:	6f 90       	pop	r6
    114e:	5f 90       	pop	r5
    1150:	4f 90       	pop	r4
    1152:	3f 90       	pop	r3
    1154:	2f 90       	pop	r2
    1156:	08 95       	ret

00001158 <vTaskStartScheduler>:
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	0f 2e       	mov	r0, r31
    1160:	fd e2       	ldi	r31, 0x2D	; 45
    1162:	ef 2e       	mov	r14, r31
    1164:	fc e0       	ldi	r31, 0x0C	; 12
    1166:	ff 2e       	mov	r15, r31
    1168:	f0 2d       	mov	r31, r0
    116a:	00 e0       	ldi	r16, 0x00	; 0
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 ec       	ldi	r20, 0xC0	; 192
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	6d e1       	ldi	r22, 0x1D	; 29
    1176:	72 e0       	ldi	r23, 0x02	; 2
    1178:	8c e7       	ldi	r24, 0x7C	; 124
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a4 df       	rcall	.-184    	; 0x10c6 <xTaskCreate>
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	09 f4       	brne	.+2      	; 0x1184 <vTaskStartScheduler+0x2c>
    1182:	46 d5       	rcall	.+2700   	; 0x1c10 <xTimerCreateTimerTask>
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	f9 f4       	brne	.+62     	; 0x11c6 <vTaskStartScheduler+0x6e>
    1188:	f8 94       	cli
    118a:	8f ef       	ldi	r24, 0xFF	; 255
    118c:	9f ef       	ldi	r25, 0xFF	; 255
    118e:	dc 01       	movw	r26, r24
    1190:	80 93 2f 0c 	sts	0x0C2F, r24	; 0x800c2f <xNextTaskUnblockTime>
    1194:	90 93 30 0c 	sts	0x0C30, r25	; 0x800c30 <xNextTaskUnblockTime+0x1>
    1198:	a0 93 31 0c 	sts	0x0C31, r26	; 0x800c31 <xNextTaskUnblockTime+0x2>
    119c:	b0 93 32 0c 	sts	0x0C32, r27	; 0x800c32 <xNextTaskUnblockTime+0x3>
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <xSchedulerRunning>
    11a6:	10 92 3c 0c 	sts	0x0C3C, r1	; 0x800c3c <xTickCount>
    11aa:	10 92 3d 0c 	sts	0x0C3D, r1	; 0x800c3d <xTickCount+0x1>
    11ae:	10 92 3e 0c 	sts	0x0C3E, r1	; 0x800c3e <xTickCount+0x2>
    11b2:	10 92 3f 0c 	sts	0x0C3F, r1	; 0x800c3f <xTickCount+0x3>
    11b6:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    11ba:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    11be:	87 a5       	ldd	r24, Z+47	; 0x2f
    11c0:	0e 94 b6 00 	call	0x16c	; 0x16c <task_switch_in>
    11c4:	d6 d9       	rcall	.-3156   	; 0x572 <xPortStartScheduler>
    11c6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    11ca:	0f 91       	pop	r16
    11cc:	ff 90       	pop	r15
    11ce:	ef 90       	pop	r14
    11d0:	08 95       	ret

000011d2 <vTaskSuspendAll>:
    11d2:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <uxSchedulerSuspended>
    11d6:	8f 5f       	subi	r24, 0xFF	; 255
    11d8:	80 93 2c 0c 	sts	0x0C2C, r24	; 0x800c2c <uxSchedulerSuspended>
    11dc:	08 95       	ret

000011de <xTaskGetTickCount>:
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	0f 92       	push	r0
    11e4:	60 91 3c 0c 	lds	r22, 0x0C3C	; 0x800c3c <xTickCount>
    11e8:	70 91 3d 0c 	lds	r23, 0x0C3D	; 0x800c3d <xTickCount+0x1>
    11ec:	80 91 3e 0c 	lds	r24, 0x0C3E	; 0x800c3e <xTickCount+0x2>
    11f0:	90 91 3f 0c 	lds	r25, 0x0C3F	; 0x800c3f <xTickCount+0x3>
    11f4:	0f 90       	pop	r0
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	08 95       	ret

000011fa <xTaskIncrementTick>:
    11fa:	cf 92       	push	r12
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <uxSchedulerSuspended>
    120a:	81 11       	cpse	r24, r1
    120c:	05 c1       	rjmp	.+522    	; 0x1418 <xTaskIncrementTick+0x21e>
    120e:	c0 90 3c 0c 	lds	r12, 0x0C3C	; 0x800c3c <xTickCount>
    1212:	d0 90 3d 0c 	lds	r13, 0x0C3D	; 0x800c3d <xTickCount+0x1>
    1216:	e0 90 3e 0c 	lds	r14, 0x0C3E	; 0x800c3e <xTickCount+0x2>
    121a:	f0 90 3f 0c 	lds	r15, 0x0C3F	; 0x800c3f <xTickCount+0x3>
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	c8 1a       	sub	r12, r24
    1222:	d8 0a       	sbc	r13, r24
    1224:	e8 0a       	sbc	r14, r24
    1226:	f8 0a       	sbc	r15, r24
    1228:	c0 92 3c 0c 	sts	0x0C3C, r12	; 0x800c3c <xTickCount>
    122c:	d0 92 3d 0c 	sts	0x0C3D, r13	; 0x800c3d <xTickCount+0x1>
    1230:	e0 92 3e 0c 	sts	0x0C3E, r14	; 0x800c3e <xTickCount+0x2>
    1234:	f0 92 3f 0c 	sts	0x0C3F, r15	; 0x800c3f <xTickCount+0x3>
    1238:	c1 14       	cp	r12, r1
    123a:	d1 04       	cpc	r13, r1
    123c:	e1 04       	cpc	r14, r1
    123e:	f1 04       	cpc	r15, r1
    1240:	b1 f4       	brne	.+44     	; 0x126e <xTaskIncrementTick+0x74>
    1242:	80 91 65 0c 	lds	r24, 0x0C65	; 0x800c65 <pxDelayedTaskList>
    1246:	90 91 66 0c 	lds	r25, 0x0C66	; 0x800c66 <pxDelayedTaskList+0x1>
    124a:	20 91 63 0c 	lds	r18, 0x0C63	; 0x800c63 <pxOverflowDelayedTaskList>
    124e:	30 91 64 0c 	lds	r19, 0x0C64	; 0x800c64 <pxOverflowDelayedTaskList+0x1>
    1252:	30 93 66 0c 	sts	0x0C66, r19	; 0x800c66 <pxDelayedTaskList+0x1>
    1256:	20 93 65 0c 	sts	0x0C65, r18	; 0x800c65 <pxDelayedTaskList>
    125a:	90 93 64 0c 	sts	0x0C64, r25	; 0x800c64 <pxOverflowDelayedTaskList+0x1>
    125e:	80 93 63 0c 	sts	0x0C63, r24	; 0x800c63 <pxOverflowDelayedTaskList>
    1262:	80 91 34 0c 	lds	r24, 0x0C34	; 0x800c34 <xNumOfOverflows>
    1266:	8f 5f       	subi	r24, 0xFF	; 255
    1268:	80 93 34 0c 	sts	0x0C34, r24	; 0x800c34 <xNumOfOverflows>
    126c:	22 dd       	rcall	.-1468   	; 0xcb2 <prvResetNextTaskUnblockTime>
    126e:	80 91 2f 0c 	lds	r24, 0x0C2F	; 0x800c2f <xNextTaskUnblockTime>
    1272:	90 91 30 0c 	lds	r25, 0x0C30	; 0x800c30 <xNextTaskUnblockTime+0x1>
    1276:	a0 91 31 0c 	lds	r26, 0x0C31	; 0x800c31 <xNextTaskUnblockTime+0x2>
    127a:	b0 91 32 0c 	lds	r27, 0x0C32	; 0x800c32 <xNextTaskUnblockTime+0x3>
    127e:	c8 16       	cp	r12, r24
    1280:	d9 06       	cpc	r13, r25
    1282:	ea 06       	cpc	r14, r26
    1284:	fb 06       	cpc	r15, r27
    1286:	20 f4       	brcc	.+8      	; 0x1290 <xTaskIncrementTick+0x96>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	b2 c0       	rjmp	.+356    	; 0x13f0 <xTaskIncrementTick+0x1f6>
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <xTaskIncrementTick+0x98>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	e0 91 65 0c 	lds	r30, 0x0C65	; 0x800c65 <pxDelayedTaskList>
    1296:	f0 91 66 0c 	lds	r31, 0x0C66	; 0x800c66 <pxDelayedTaskList+0x1>
    129a:	90 81       	ld	r25, Z
    129c:	91 11       	cpse	r25, r1
    129e:	0c c0       	rjmp	.+24     	; 0x12b8 <xTaskIncrementTick+0xbe>
    12a0:	4f ef       	ldi	r20, 0xFF	; 255
    12a2:	5f ef       	ldi	r21, 0xFF	; 255
    12a4:	ba 01       	movw	r22, r20
    12a6:	40 93 2f 0c 	sts	0x0C2F, r20	; 0x800c2f <xNextTaskUnblockTime>
    12aa:	50 93 30 0c 	sts	0x0C30, r21	; 0x800c30 <xNextTaskUnblockTime+0x1>
    12ae:	60 93 31 0c 	sts	0x0C31, r22	; 0x800c31 <xNextTaskUnblockTime+0x2>
    12b2:	70 93 32 0c 	sts	0x0C32, r23	; 0x800c32 <xNextTaskUnblockTime+0x3>
    12b6:	9c c0       	rjmp	.+312    	; 0x13f0 <xTaskIncrementTick+0x1f6>
    12b8:	e0 91 65 0c 	lds	r30, 0x0C65	; 0x800c65 <pxDelayedTaskList>
    12bc:	f0 91 66 0c 	lds	r31, 0x0C66	; 0x800c66 <pxDelayedTaskList+0x1>
    12c0:	07 80       	ldd	r0, Z+7	; 0x07
    12c2:	f0 85       	ldd	r31, Z+8	; 0x08
    12c4:	e0 2d       	mov	r30, r0
    12c6:	00 84       	ldd	r0, Z+8	; 0x08
    12c8:	f1 85       	ldd	r31, Z+9	; 0x09
    12ca:	e0 2d       	mov	r30, r0
    12cc:	42 81       	ldd	r20, Z+2	; 0x02
    12ce:	53 81       	ldd	r21, Z+3	; 0x03
    12d0:	64 81       	ldd	r22, Z+4	; 0x04
    12d2:	75 81       	ldd	r23, Z+5	; 0x05
    12d4:	c4 16       	cp	r12, r20
    12d6:	d5 06       	cpc	r13, r21
    12d8:	e6 06       	cpc	r14, r22
    12da:	f7 06       	cpc	r15, r23
    12dc:	48 f4       	brcc	.+18     	; 0x12f0 <xTaskIncrementTick+0xf6>
    12de:	40 93 2f 0c 	sts	0x0C2F, r20	; 0x800c2f <xNextTaskUnblockTime>
    12e2:	50 93 30 0c 	sts	0x0C30, r21	; 0x800c30 <xNextTaskUnblockTime+0x1>
    12e6:	60 93 31 0c 	sts	0x0C31, r22	; 0x800c31 <xNextTaskUnblockTime+0x2>
    12ea:	70 93 32 0c 	sts	0x0C32, r23	; 0x800c32 <xNextTaskUnblockTime+0x3>
    12ee:	80 c0       	rjmp	.+256    	; 0x13f0 <xTaskIncrementTick+0x1f6>
    12f0:	a4 85       	ldd	r26, Z+12	; 0x0c
    12f2:	b5 85       	ldd	r27, Z+13	; 0x0d
    12f4:	c6 81       	ldd	r28, Z+6	; 0x06
    12f6:	d7 81       	ldd	r29, Z+7	; 0x07
    12f8:	20 85       	ldd	r18, Z+8	; 0x08
    12fa:	31 85       	ldd	r19, Z+9	; 0x09
    12fc:	3f 83       	std	Y+7, r19	; 0x07
    12fe:	2e 83       	std	Y+6, r18	; 0x06
    1300:	c0 85       	ldd	r28, Z+8	; 0x08
    1302:	d1 85       	ldd	r29, Z+9	; 0x09
    1304:	26 81       	ldd	r18, Z+6	; 0x06
    1306:	37 81       	ldd	r19, Z+7	; 0x07
    1308:	3d 83       	std	Y+5, r19	; 0x05
    130a:	2c 83       	std	Y+4, r18	; 0x04
    130c:	11 96       	adiw	r26, 0x01	; 1
    130e:	4d 91       	ld	r20, X+
    1310:	5c 91       	ld	r21, X
    1312:	12 97       	sbiw	r26, 0x02	; 2
    1314:	9f 01       	movw	r18, r30
    1316:	2e 5f       	subi	r18, 0xFE	; 254
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	42 17       	cp	r20, r18
    131c:	53 07       	cpc	r21, r19
    131e:	31 f4       	brne	.+12     	; 0x132c <xTaskIncrementTick+0x132>
    1320:	40 85       	ldd	r20, Z+8	; 0x08
    1322:	51 85       	ldd	r21, Z+9	; 0x09
    1324:	12 96       	adiw	r26, 0x02	; 2
    1326:	5c 93       	st	X, r21
    1328:	4e 93       	st	-X, r20
    132a:	11 97       	sbiw	r26, 0x01	; 1
    132c:	15 86       	std	Z+13, r1	; 0x0d
    132e:	14 86       	std	Z+12, r1	; 0x0c
    1330:	9c 91       	ld	r25, X
    1332:	91 50       	subi	r25, 0x01	; 1
    1334:	9c 93       	st	X, r25
    1336:	a0 8d       	ldd	r26, Z+24	; 0x18
    1338:	b1 8d       	ldd	r27, Z+25	; 0x19
    133a:	10 97       	sbiw	r26, 0x00	; 0
    133c:	09 f1       	breq	.+66     	; 0x1380 <xTaskIncrementTick+0x186>
    133e:	c2 89       	ldd	r28, Z+18	; 0x12
    1340:	d3 89       	ldd	r29, Z+19	; 0x13
    1342:	44 89       	ldd	r20, Z+20	; 0x14
    1344:	55 89       	ldd	r21, Z+21	; 0x15
    1346:	5f 83       	std	Y+7, r21	; 0x07
    1348:	4e 83       	std	Y+6, r20	; 0x06
    134a:	c4 89       	ldd	r28, Z+20	; 0x14
    134c:	d5 89       	ldd	r29, Z+21	; 0x15
    134e:	42 89       	ldd	r20, Z+18	; 0x12
    1350:	53 89       	ldd	r21, Z+19	; 0x13
    1352:	5d 83       	std	Y+5, r21	; 0x05
    1354:	4c 83       	std	Y+4, r20	; 0x04
    1356:	11 96       	adiw	r26, 0x01	; 1
    1358:	6d 91       	ld	r22, X+
    135a:	7c 91       	ld	r23, X
    135c:	12 97       	sbiw	r26, 0x02	; 2
    135e:	af 01       	movw	r20, r30
    1360:	42 5f       	subi	r20, 0xF2	; 242
    1362:	5f 4f       	sbci	r21, 0xFF	; 255
    1364:	64 17       	cp	r22, r20
    1366:	75 07       	cpc	r23, r21
    1368:	31 f4       	brne	.+12     	; 0x1376 <xTaskIncrementTick+0x17c>
    136a:	44 89       	ldd	r20, Z+20	; 0x14
    136c:	55 89       	ldd	r21, Z+21	; 0x15
    136e:	12 96       	adiw	r26, 0x02	; 2
    1370:	5c 93       	st	X, r21
    1372:	4e 93       	st	-X, r20
    1374:	11 97       	sbiw	r26, 0x01	; 1
    1376:	11 8e       	std	Z+25, r1	; 0x19
    1378:	10 8e       	std	Z+24, r1	; 0x18
    137a:	9c 91       	ld	r25, X
    137c:	91 50       	subi	r25, 0x01	; 1
    137e:	9c 93       	st	X, r25
    1380:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1382:	90 91 3b 0c 	lds	r25, 0x0C3B	; 0x800c3b <uxTopReadyPriority>
    1386:	9a 17       	cp	r25, r26
    1388:	10 f4       	brcc	.+4      	; 0x138e <xTaskIncrementTick+0x194>
    138a:	a0 93 3b 0c 	sts	0x0C3B, r26	; 0x800c3b <uxTopReadyPriority>
    138e:	9b e0       	ldi	r25, 0x0B	; 11
    1390:	9a 9f       	mul	r25, r26
    1392:	d0 01       	movw	r26, r0
    1394:	11 24       	eor	r1, r1
    1396:	a3 58       	subi	r26, 0x83	; 131
    1398:	b3 4f       	sbci	r27, 0xF3	; 243
    139a:	11 96       	adiw	r26, 0x01	; 1
    139c:	0d 90       	ld	r0, X+
    139e:	bc 91       	ld	r27, X
    13a0:	a0 2d       	mov	r26, r0
    13a2:	b7 83       	std	Z+7, r27	; 0x07
    13a4:	a6 83       	std	Z+6, r26	; 0x06
    13a6:	16 96       	adiw	r26, 0x06	; 6
    13a8:	4d 91       	ld	r20, X+
    13aa:	5c 91       	ld	r21, X
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	51 87       	std	Z+9, r21	; 0x09
    13b0:	40 87       	std	Z+8, r20	; 0x08
    13b2:	16 96       	adiw	r26, 0x06	; 6
    13b4:	cd 91       	ld	r28, X+
    13b6:	dc 91       	ld	r29, X
    13b8:	17 97       	sbiw	r26, 0x07	; 7
    13ba:	3d 83       	std	Y+5, r19	; 0x05
    13bc:	2c 83       	std	Y+4, r18	; 0x04
    13be:	17 96       	adiw	r26, 0x07	; 7
    13c0:	3c 93       	st	X, r19
    13c2:	2e 93       	st	-X, r18
    13c4:	16 97       	sbiw	r26, 0x06	; 6
    13c6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13c8:	9a 9f       	mul	r25, r26
    13ca:	d0 01       	movw	r26, r0
    13cc:	11 24       	eor	r1, r1
    13ce:	a3 58       	subi	r26, 0x83	; 131
    13d0:	b3 4f       	sbci	r27, 0xF3	; 243
    13d2:	b5 87       	std	Z+13, r27	; 0x0d
    13d4:	a4 87       	std	Z+12, r26	; 0x0c
    13d6:	9c 91       	ld	r25, X
    13d8:	9f 5f       	subi	r25, 0xFF	; 255
    13da:	9c 93       	st	X, r25
    13dc:	22 8d       	ldd	r18, Z+26	; 0x1a
    13de:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    13e2:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    13e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    13e8:	29 17       	cp	r18, r25
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <xTaskIncrementTick+0x1f4>
    13ec:	4f cf       	rjmp	.-354    	; 0x128c <xTaskIncrementTick+0x92>
    13ee:	51 cf       	rjmp	.-350    	; 0x1292 <xTaskIncrementTick+0x98>
    13f0:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    13f4:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    13f8:	e2 8d       	ldd	r30, Z+26	; 0x1a
    13fa:	9b e0       	ldi	r25, 0x0B	; 11
    13fc:	e9 9f       	mul	r30, r25
    13fe:	f0 01       	movw	r30, r0
    1400:	11 24       	eor	r1, r1
    1402:	e3 58       	subi	r30, 0x83	; 131
    1404:	f3 4f       	sbci	r31, 0xF3	; 243
    1406:	90 81       	ld	r25, Z
    1408:	92 30       	cpi	r25, 0x02	; 2
    140a:	08 f0       	brcs	.+2      	; 0x140e <xTaskIncrementTick+0x214>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 91 35 0c 	lds	r25, 0x0C35	; 0x800c35 <xYieldPending>
    1412:	91 11       	cpse	r25, r1
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <xTaskIncrementTick+0x248>
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <xTaskIncrementTick+0x24a>
    1418:	80 91 36 0c 	lds	r24, 0x0C36	; 0x800c36 <xPendedTicks>
    141c:	90 91 37 0c 	lds	r25, 0x0C37	; 0x800c37 <xPendedTicks+0x1>
    1420:	a0 91 38 0c 	lds	r26, 0x0C38	; 0x800c38 <xPendedTicks+0x2>
    1424:	b0 91 39 0c 	lds	r27, 0x0C39	; 0x800c39 <xPendedTicks+0x3>
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	a1 1d       	adc	r26, r1
    142c:	b1 1d       	adc	r27, r1
    142e:	80 93 36 0c 	sts	0x0C36, r24	; 0x800c36 <xPendedTicks>
    1432:	90 93 37 0c 	sts	0x0C37, r25	; 0x800c37 <xPendedTicks+0x1>
    1436:	a0 93 38 0c 	sts	0x0C38, r26	; 0x800c38 <xPendedTicks+0x2>
    143a:	b0 93 39 0c 	sts	0x0C39, r27	; 0x800c39 <xPendedTicks+0x3>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <xTaskIncrementTick+0x24a>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	08 95       	ret

00001452 <xTaskResumeAll>:
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	0f 92       	push	r0
    1464:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <uxSchedulerSuspended>
    1468:	81 50       	subi	r24, 0x01	; 1
    146a:	80 93 2c 0c 	sts	0x0C2C, r24	; 0x800c2c <uxSchedulerSuspended>
    146e:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <uxSchedulerSuspended>
    1472:	81 11       	cpse	r24, r1
    1474:	be c0       	rjmp	.+380    	; 0x15f2 <xTaskResumeAll+0x1a0>
    1476:	80 91 40 0c 	lds	r24, 0x0C40	; 0x800c40 <uxCurrentNumberOfTasks>
    147a:	81 11       	cpse	r24, r1
    147c:	88 c0       	rjmp	.+272    	; 0x158e <xTaskResumeAll+0x13c>
    147e:	bc c0       	rjmp	.+376    	; 0x15f8 <xTaskResumeAll+0x1a6>
    1480:	e0 91 5f 0c 	lds	r30, 0x0C5F	; 0x800c5f <xPendingReadyList+0x7>
    1484:	f0 91 60 0c 	lds	r31, 0x0C60	; 0x800c60 <xPendingReadyList+0x8>
    1488:	00 84       	ldd	r0, Z+8	; 0x08
    148a:	f1 85       	ldd	r31, Z+9	; 0x09
    148c:	e0 2d       	mov	r30, r0
    148e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1490:	b1 8d       	ldd	r27, Z+25	; 0x19
    1492:	c2 89       	ldd	r28, Z+18	; 0x12
    1494:	d3 89       	ldd	r29, Z+19	; 0x13
    1496:	84 89       	ldd	r24, Z+20	; 0x14
    1498:	95 89       	ldd	r25, Z+21	; 0x15
    149a:	9f 83       	std	Y+7, r25	; 0x07
    149c:	8e 83       	std	Y+6, r24	; 0x06
    149e:	c4 89       	ldd	r28, Z+20	; 0x14
    14a0:	d5 89       	ldd	r29, Z+21	; 0x15
    14a2:	82 89       	ldd	r24, Z+18	; 0x12
    14a4:	93 89       	ldd	r25, Z+19	; 0x13
    14a6:	9d 83       	std	Y+5, r25	; 0x05
    14a8:	8c 83       	std	Y+4, r24	; 0x04
    14aa:	11 96       	adiw	r26, 0x01	; 1
    14ac:	2d 91       	ld	r18, X+
    14ae:	3c 91       	ld	r19, X
    14b0:	12 97       	sbiw	r26, 0x02	; 2
    14b2:	cf 01       	movw	r24, r30
    14b4:	0e 96       	adiw	r24, 0x0e	; 14
    14b6:	28 17       	cp	r18, r24
    14b8:	39 07       	cpc	r19, r25
    14ba:	31 f4       	brne	.+12     	; 0x14c8 <xTaskResumeAll+0x76>
    14bc:	84 89       	ldd	r24, Z+20	; 0x14
    14be:	95 89       	ldd	r25, Z+21	; 0x15
    14c0:	12 96       	adiw	r26, 0x02	; 2
    14c2:	9c 93       	st	X, r25
    14c4:	8e 93       	st	-X, r24
    14c6:	11 97       	sbiw	r26, 0x01	; 1
    14c8:	11 8e       	std	Z+25, r1	; 0x19
    14ca:	10 8e       	std	Z+24, r1	; 0x18
    14cc:	8c 91       	ld	r24, X
    14ce:	81 50       	subi	r24, 0x01	; 1
    14d0:	8c 93       	st	X, r24
    14d2:	a4 85       	ldd	r26, Z+12	; 0x0c
    14d4:	b5 85       	ldd	r27, Z+13	; 0x0d
    14d6:	c6 81       	ldd	r28, Z+6	; 0x06
    14d8:	d7 81       	ldd	r29, Z+7	; 0x07
    14da:	80 85       	ldd	r24, Z+8	; 0x08
    14dc:	91 85       	ldd	r25, Z+9	; 0x09
    14de:	9f 83       	std	Y+7, r25	; 0x07
    14e0:	8e 83       	std	Y+6, r24	; 0x06
    14e2:	c0 85       	ldd	r28, Z+8	; 0x08
    14e4:	d1 85       	ldd	r29, Z+9	; 0x09
    14e6:	86 81       	ldd	r24, Z+6	; 0x06
    14e8:	97 81       	ldd	r25, Z+7	; 0x07
    14ea:	9d 83       	std	Y+5, r25	; 0x05
    14ec:	8c 83       	std	Y+4, r24	; 0x04
    14ee:	11 96       	adiw	r26, 0x01	; 1
    14f0:	8d 91       	ld	r24, X+
    14f2:	9c 91       	ld	r25, X
    14f4:	12 97       	sbiw	r26, 0x02	; 2
    14f6:	9f 01       	movw	r18, r30
    14f8:	2e 5f       	subi	r18, 0xFE	; 254
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	82 17       	cp	r24, r18
    14fe:	93 07       	cpc	r25, r19
    1500:	31 f4       	brne	.+12     	; 0x150e <xTaskResumeAll+0xbc>
    1502:	80 85       	ldd	r24, Z+8	; 0x08
    1504:	91 85       	ldd	r25, Z+9	; 0x09
    1506:	12 96       	adiw	r26, 0x02	; 2
    1508:	9c 93       	st	X, r25
    150a:	8e 93       	st	-X, r24
    150c:	11 97       	sbiw	r26, 0x01	; 1
    150e:	15 86       	std	Z+13, r1	; 0x0d
    1510:	14 86       	std	Z+12, r1	; 0x0c
    1512:	8c 91       	ld	r24, X
    1514:	81 50       	subi	r24, 0x01	; 1
    1516:	8c 93       	st	X, r24
    1518:	a2 8d       	ldd	r26, Z+26	; 0x1a
    151a:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <uxTopReadyPriority>
    151e:	8a 17       	cp	r24, r26
    1520:	10 f4       	brcc	.+4      	; 0x1526 <xTaskResumeAll+0xd4>
    1522:	a0 93 3b 0c 	sts	0x0C3B, r26	; 0x800c3b <uxTopReadyPriority>
    1526:	8b e0       	ldi	r24, 0x0B	; 11
    1528:	8a 9f       	mul	r24, r26
    152a:	d0 01       	movw	r26, r0
    152c:	11 24       	eor	r1, r1
    152e:	a3 58       	subi	r26, 0x83	; 131
    1530:	b3 4f       	sbci	r27, 0xF3	; 243
    1532:	11 96       	adiw	r26, 0x01	; 1
    1534:	0d 90       	ld	r0, X+
    1536:	bc 91       	ld	r27, X
    1538:	a0 2d       	mov	r26, r0
    153a:	b7 83       	std	Z+7, r27	; 0x07
    153c:	a6 83       	std	Z+6, r26	; 0x06
    153e:	16 96       	adiw	r26, 0x06	; 6
    1540:	4d 91       	ld	r20, X+
    1542:	5c 91       	ld	r21, X
    1544:	17 97       	sbiw	r26, 0x07	; 7
    1546:	51 87       	std	Z+9, r21	; 0x09
    1548:	40 87       	std	Z+8, r20	; 0x08
    154a:	16 96       	adiw	r26, 0x06	; 6
    154c:	cd 91       	ld	r28, X+
    154e:	dc 91       	ld	r29, X
    1550:	17 97       	sbiw	r26, 0x07	; 7
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	17 96       	adiw	r26, 0x07	; 7
    1558:	3c 93       	st	X, r19
    155a:	2e 93       	st	-X, r18
    155c:	16 97       	sbiw	r26, 0x06	; 6
    155e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1560:	8a 9f       	mul	r24, r26
    1562:	d0 01       	movw	r26, r0
    1564:	11 24       	eor	r1, r1
    1566:	a3 58       	subi	r26, 0x83	; 131
    1568:	b3 4f       	sbci	r27, 0xF3	; 243
    156a:	b5 87       	std	Z+13, r27	; 0x0d
    156c:	a4 87       	std	Z+12, r26	; 0x0c
    156e:	8c 91       	ld	r24, X
    1570:	8f 5f       	subi	r24, 0xFF	; 255
    1572:	8c 93       	st	X, r24
    1574:	92 8d       	ldd	r25, Z+26	; 0x1a
    1576:	a0 91 eb 0c 	lds	r26, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    157a:	b0 91 ec 0c 	lds	r27, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    157e:	5a 96       	adiw	r26, 0x1a	; 26
    1580:	8c 91       	ld	r24, X
    1582:	98 17       	cp	r25, r24
    1584:	30 f0       	brcs	.+12     	; 0x1592 <xTaskResumeAll+0x140>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <xYieldPending>
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <xTaskResumeAll+0x140>
    158e:	e0 e0       	ldi	r30, 0x00	; 0
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 91 58 0c 	lds	r24, 0x0C58	; 0x800c58 <xPendingReadyList>
    1596:	81 11       	cpse	r24, r1
    1598:	73 cf       	rjmp	.-282    	; 0x1480 <xTaskResumeAll+0x2e>
    159a:	ef 2b       	or	r30, r31
    159c:	09 f0       	breq	.+2      	; 0x15a0 <xTaskResumeAll+0x14e>
    159e:	89 db       	rcall	.-2286   	; 0xcb2 <prvResetNextTaskUnblockTime>
    15a0:	c0 90 36 0c 	lds	r12, 0x0C36	; 0x800c36 <xPendedTicks>
    15a4:	d0 90 37 0c 	lds	r13, 0x0C37	; 0x800c37 <xPendedTicks+0x1>
    15a8:	e0 90 38 0c 	lds	r14, 0x0C38	; 0x800c38 <xPendedTicks+0x2>
    15ac:	f0 90 39 0c 	lds	r15, 0x0C39	; 0x800c39 <xPendedTicks+0x3>
    15b0:	c1 14       	cp	r12, r1
    15b2:	d1 04       	cpc	r13, r1
    15b4:	e1 04       	cpc	r14, r1
    15b6:	f1 04       	cpc	r15, r1
    15b8:	a1 f0       	breq	.+40     	; 0x15e2 <xTaskResumeAll+0x190>
    15ba:	1f de       	rcall	.-962    	; 0x11fa <xTaskIncrementTick>
    15bc:	88 23       	and	r24, r24
    15be:	19 f0       	breq	.+6      	; 0x15c6 <xTaskResumeAll+0x174>
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <xYieldPending>
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	c8 1a       	sub	r12, r24
    15ca:	d1 08       	sbc	r13, r1
    15cc:	e1 08       	sbc	r14, r1
    15ce:	f1 08       	sbc	r15, r1
    15d0:	a1 f7       	brne	.-24     	; 0x15ba <xTaskResumeAll+0x168>
    15d2:	10 92 36 0c 	sts	0x0C36, r1	; 0x800c36 <xPendedTicks>
    15d6:	10 92 37 0c 	sts	0x0C37, r1	; 0x800c37 <xPendedTicks+0x1>
    15da:	10 92 38 0c 	sts	0x0C38, r1	; 0x800c38 <xPendedTicks+0x2>
    15de:	10 92 39 0c 	sts	0x0C39, r1	; 0x800c39 <xPendedTicks+0x3>
    15e2:	80 91 35 0c 	lds	r24, 0x0C35	; 0x800c35 <xYieldPending>
    15e6:	88 23       	and	r24, r24
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <xTaskResumeAll+0x1a4>
    15ea:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vPortYield>
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	03 c0       	rjmp	.+6      	; 0x15f8 <xTaskResumeAll+0x1a6>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <xTaskResumeAll+0x1a6>
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	0f 90       	pop	r0
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	08 95       	ret

0000160a <vTaskDelay>:
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	6b 01       	movw	r12, r22
    1614:	7c 01       	movw	r14, r24
    1616:	67 2b       	or	r22, r23
    1618:	68 2b       	or	r22, r24
    161a:	69 2b       	or	r22, r25
    161c:	39 f0       	breq	.+14     	; 0x162c <vTaskDelay+0x22>
    161e:	d9 dd       	rcall	.-1102   	; 0x11d2 <vTaskSuspendAll>
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	c7 01       	movw	r24, r14
    1624:	b6 01       	movw	r22, r12
    1626:	b0 dc       	rcall	.-1696   	; 0xf88 <prvAddCurrentTaskToDelayedList>
    1628:	14 df       	rcall	.-472    	; 0x1452 <xTaskResumeAll>
    162a:	01 c0       	rjmp	.+2      	; 0x162e <vTaskDelay+0x24>
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	81 11       	cpse	r24, r1
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <vTaskDelay+0x2c>
    1632:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vPortYield>
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	08 95       	ret

00001640 <vTaskSwitchContext>:
    1640:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <uxSchedulerSuspended>
    1644:	88 23       	and	r24, r24
    1646:	21 f0       	breq	.+8      	; 0x1650 <vTaskSwitchContext+0x10>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <xYieldPending>
    164e:	08 95       	ret
    1650:	10 92 35 0c 	sts	0x0C35, r1	; 0x800c35 <xYieldPending>
    1654:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1658:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    165c:	87 a5       	ldd	r24, Z+47	; 0x2f
    165e:	0e 94 c0 00 	call	0x180	; 0x180 <task_switch_out>
    1662:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1666:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    166a:	20 81       	ld	r18, Z
    166c:	31 81       	ldd	r19, Z+1	; 0x01
    166e:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1672:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1676:	83 8d       	ldd	r24, Z+27	; 0x1b
    1678:	94 8d       	ldd	r25, Z+28	; 0x1c
    167a:	82 17       	cp	r24, r18
    167c:	93 07       	cpc	r25, r19
    167e:	58 f0       	brcs	.+22     	; 0x1696 <vTaskSwitchContext+0x56>
    1680:	60 91 eb 0c 	lds	r22, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1684:	70 91 ec 0c 	lds	r23, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1688:	63 5e       	subi	r22, 0xE3	; 227
    168a:	7f 4f       	sbci	r23, 0xFF	; 255
    168c:	80 91 eb 0c 	lds	r24, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1690:	90 91 ec 0c 	lds	r25, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1694:	44 d5       	rcall	.+2696   	; 0x211e <vApplicationStackOverflowHook>
    1696:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <uxTopReadyPriority>
    169a:	01 c0       	rjmp	.+2      	; 0x169e <vTaskSwitchContext+0x5e>
    169c:	81 50       	subi	r24, 0x01	; 1
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	9b e0       	ldi	r25, 0x0B	; 11
    16a4:	92 9f       	mul	r25, r18
    16a6:	f0 01       	movw	r30, r0
    16a8:	93 9f       	mul	r25, r19
    16aa:	f0 0d       	add	r31, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	e3 58       	subi	r30, 0x83	; 131
    16b0:	f3 4f       	sbci	r31, 0xF3	; 243
    16b2:	90 81       	ld	r25, Z
    16b4:	99 23       	and	r25, r25
    16b6:	91 f3       	breq	.-28     	; 0x169c <vTaskSwitchContext+0x5c>
    16b8:	9b e0       	ldi	r25, 0x0B	; 11
    16ba:	92 9f       	mul	r25, r18
    16bc:	a0 01       	movw	r20, r0
    16be:	93 9f       	mul	r25, r19
    16c0:	50 0d       	add	r21, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	df 01       	movw	r26, r30
    16c6:	01 80       	ldd	r0, Z+1	; 0x01
    16c8:	f2 81       	ldd	r31, Z+2	; 0x02
    16ca:	e0 2d       	mov	r30, r0
    16cc:	04 80       	ldd	r0, Z+4	; 0x04
    16ce:	f5 81       	ldd	r31, Z+5	; 0x05
    16d0:	e0 2d       	mov	r30, r0
    16d2:	12 96       	adiw	r26, 0x02	; 2
    16d4:	fc 93       	st	X, r31
    16d6:	ee 93       	st	-X, r30
    16d8:	11 97       	sbiw	r26, 0x01	; 1
    16da:	40 58       	subi	r20, 0x80	; 128
    16dc:	53 4f       	sbci	r21, 0xF3	; 243
    16de:	e4 17       	cp	r30, r20
    16e0:	f5 07       	cpc	r31, r21
    16e2:	29 f4       	brne	.+10     	; 0x16ee <vTaskSwitchContext+0xae>
    16e4:	44 81       	ldd	r20, Z+4	; 0x04
    16e6:	55 81       	ldd	r21, Z+5	; 0x05
    16e8:	fd 01       	movw	r30, r26
    16ea:	52 83       	std	Z+2, r21	; 0x02
    16ec:	41 83       	std	Z+1, r20	; 0x01
    16ee:	9b e0       	ldi	r25, 0x0B	; 11
    16f0:	92 9f       	mul	r25, r18
    16f2:	f0 01       	movw	r30, r0
    16f4:	93 9f       	mul	r25, r19
    16f6:	f0 0d       	add	r31, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	e3 58       	subi	r30, 0x83	; 131
    16fc:	f3 4f       	sbci	r31, 0xF3	; 243
    16fe:	01 80       	ldd	r0, Z+1	; 0x01
    1700:	f2 81       	ldd	r31, Z+2	; 0x02
    1702:	e0 2d       	mov	r30, r0
    1704:	20 85       	ldd	r18, Z+8	; 0x08
    1706:	31 85       	ldd	r19, Z+9	; 0x09
    1708:	30 93 ec 0c 	sts	0x0CEC, r19	; 0x800cec <pxCurrentTCB+0x1>
    170c:	20 93 eb 0c 	sts	0x0CEB, r18	; 0x800ceb <pxCurrentTCB>
    1710:	80 93 3b 0c 	sts	0x0C3B, r24	; 0x800c3b <uxTopReadyPriority>
    1714:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1718:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    171c:	87 a5       	ldd	r24, Z+47	; 0x2f
    171e:	0c 94 b6 00 	jmp	0x16c	; 0x16c <task_switch_in>
    1722:	08 95       	ret

00001724 <vTaskPlaceOnEventList>:
    1724:	cf 92       	push	r12
    1726:	df 92       	push	r13
    1728:	ef 92       	push	r14
    172a:	ff 92       	push	r15
    172c:	6a 01       	movw	r12, r20
    172e:	7b 01       	movw	r14, r22
    1730:	60 91 eb 0c 	lds	r22, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1734:	70 91 ec 0c 	lds	r23, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1738:	62 5f       	subi	r22, 0xF2	; 242
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	0e 94 32 02 	call	0x464	; 0x464 <vListInsert>
    1740:	41 e0       	ldi	r20, 0x01	; 1
    1742:	c7 01       	movw	r24, r14
    1744:	b6 01       	movw	r22, r12
    1746:	20 dc       	rcall	.-1984   	; 0xf88 <prvAddCurrentTaskToDelayedList>
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	08 95       	ret

00001752 <vTaskPlaceOnEventListRestricted>:
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	fc 01       	movw	r30, r24
    1758:	cb 01       	movw	r24, r22
    175a:	ba 01       	movw	r22, r20
    175c:	a1 81       	ldd	r26, Z+1	; 0x01
    175e:	b2 81       	ldd	r27, Z+2	; 0x02
    1760:	c0 91 eb 0c 	lds	r28, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1764:	d0 91 ec 0c 	lds	r29, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1768:	bb 8b       	std	Y+19, r27	; 0x13
    176a:	aa 8b       	std	Y+18, r26	; 0x12
    176c:	c0 91 eb 0c 	lds	r28, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    1770:	d0 91 ec 0c 	lds	r29, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1774:	16 96       	adiw	r26, 0x06	; 6
    1776:	4d 91       	ld	r20, X+
    1778:	5c 91       	ld	r21, X
    177a:	17 97       	sbiw	r26, 0x07	; 7
    177c:	5d 8b       	std	Y+21, r21	; 0x15
    177e:	4c 8b       	std	Y+20, r20	; 0x14
    1780:	16 96       	adiw	r26, 0x06	; 6
    1782:	cd 91       	ld	r28, X+
    1784:	dc 91       	ld	r29, X
    1786:	17 97       	sbiw	r26, 0x07	; 7
    1788:	40 91 eb 0c 	lds	r20, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    178c:	50 91 ec 0c 	lds	r21, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    1790:	42 5f       	subi	r20, 0xF2	; 242
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	5d 83       	std	Y+5, r21	; 0x05
    1796:	4c 83       	std	Y+4, r20	; 0x04
    1798:	40 91 eb 0c 	lds	r20, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    179c:	50 91 ec 0c 	lds	r21, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    17a0:	42 5f       	subi	r20, 0xF2	; 242
    17a2:	5f 4f       	sbci	r21, 0xFF	; 255
    17a4:	17 96       	adiw	r26, 0x07	; 7
    17a6:	5c 93       	st	X, r21
    17a8:	4e 93       	st	-X, r20
    17aa:	16 97       	sbiw	r26, 0x06	; 6
    17ac:	a0 91 eb 0c 	lds	r26, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    17b0:	b0 91 ec 0c 	lds	r27, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    17b4:	59 96       	adiw	r26, 0x19	; 25
    17b6:	fc 93       	st	X, r31
    17b8:	ee 93       	st	-X, r30
    17ba:	58 97       	sbiw	r26, 0x18	; 24
    17bc:	30 81       	ld	r19, Z
    17be:	3f 5f       	subi	r19, 0xFF	; 255
    17c0:	30 83       	st	Z, r19
    17c2:	22 23       	and	r18, r18
    17c4:	19 f0       	breq	.+6      	; 0x17cc <vTaskPlaceOnEventListRestricted+0x7a>
    17c6:	6f ef       	ldi	r22, 0xFF	; 255
    17c8:	7f ef       	ldi	r23, 0xFF	; 255
    17ca:	cb 01       	movw	r24, r22
    17cc:	42 2f       	mov	r20, r18
    17ce:	dc db       	rcall	.-2120   	; 0xf88 <prvAddCurrentTaskToDelayedList>
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <xTaskRemoveFromEventList>:
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	dc 01       	movw	r26, r24
    17dc:	17 96       	adiw	r26, 0x07	; 7
    17de:	ed 91       	ld	r30, X+
    17e0:	fc 91       	ld	r31, X
    17e2:	18 97       	sbiw	r26, 0x08	; 8
    17e4:	00 84       	ldd	r0, Z+8	; 0x08
    17e6:	f1 85       	ldd	r31, Z+9	; 0x09
    17e8:	e0 2d       	mov	r30, r0
    17ea:	a0 8d       	ldd	r26, Z+24	; 0x18
    17ec:	b1 8d       	ldd	r27, Z+25	; 0x19
    17ee:	c2 89       	ldd	r28, Z+18	; 0x12
    17f0:	d3 89       	ldd	r29, Z+19	; 0x13
    17f2:	84 89       	ldd	r24, Z+20	; 0x14
    17f4:	95 89       	ldd	r25, Z+21	; 0x15
    17f6:	9f 83       	std	Y+7, r25	; 0x07
    17f8:	8e 83       	std	Y+6, r24	; 0x06
    17fa:	c4 89       	ldd	r28, Z+20	; 0x14
    17fc:	d5 89       	ldd	r29, Z+21	; 0x15
    17fe:	82 89       	ldd	r24, Z+18	; 0x12
    1800:	93 89       	ldd	r25, Z+19	; 0x13
    1802:	9d 83       	std	Y+5, r25	; 0x05
    1804:	8c 83       	std	Y+4, r24	; 0x04
    1806:	11 96       	adiw	r26, 0x01	; 1
    1808:	8d 91       	ld	r24, X+
    180a:	9c 91       	ld	r25, X
    180c:	12 97       	sbiw	r26, 0x02	; 2
    180e:	9f 01       	movw	r18, r30
    1810:	22 5f       	subi	r18, 0xF2	; 242
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	82 17       	cp	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	31 f4       	brne	.+12     	; 0x1826 <xTaskRemoveFromEventList+0x50>
    181a:	84 89       	ldd	r24, Z+20	; 0x14
    181c:	95 89       	ldd	r25, Z+21	; 0x15
    181e:	12 96       	adiw	r26, 0x02	; 2
    1820:	9c 93       	st	X, r25
    1822:	8e 93       	st	-X, r24
    1824:	11 97       	sbiw	r26, 0x01	; 1
    1826:	11 8e       	std	Z+25, r1	; 0x19
    1828:	10 8e       	std	Z+24, r1	; 0x18
    182a:	8c 91       	ld	r24, X
    182c:	81 50       	subi	r24, 0x01	; 1
    182e:	8c 93       	st	X, r24
    1830:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <uxSchedulerSuspended>
    1834:	81 11       	cpse	r24, r1
    1836:	52 c0       	rjmp	.+164    	; 0x18dc <xTaskRemoveFromEventList+0x106>
    1838:	a4 85       	ldd	r26, Z+12	; 0x0c
    183a:	b5 85       	ldd	r27, Z+13	; 0x0d
    183c:	c6 81       	ldd	r28, Z+6	; 0x06
    183e:	d7 81       	ldd	r29, Z+7	; 0x07
    1840:	80 85       	ldd	r24, Z+8	; 0x08
    1842:	91 85       	ldd	r25, Z+9	; 0x09
    1844:	9f 83       	std	Y+7, r25	; 0x07
    1846:	8e 83       	std	Y+6, r24	; 0x06
    1848:	c0 85       	ldd	r28, Z+8	; 0x08
    184a:	d1 85       	ldd	r29, Z+9	; 0x09
    184c:	86 81       	ldd	r24, Z+6	; 0x06
    184e:	97 81       	ldd	r25, Z+7	; 0x07
    1850:	9d 83       	std	Y+5, r25	; 0x05
    1852:	8c 83       	std	Y+4, r24	; 0x04
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	8d 91       	ld	r24, X+
    1858:	9c 91       	ld	r25, X
    185a:	12 97       	sbiw	r26, 0x02	; 2
    185c:	9f 01       	movw	r18, r30
    185e:	2e 5f       	subi	r18, 0xFE	; 254
    1860:	3f 4f       	sbci	r19, 0xFF	; 255
    1862:	82 17       	cp	r24, r18
    1864:	93 07       	cpc	r25, r19
    1866:	31 f4       	brne	.+12     	; 0x1874 <xTaskRemoveFromEventList+0x9e>
    1868:	80 85       	ldd	r24, Z+8	; 0x08
    186a:	91 85       	ldd	r25, Z+9	; 0x09
    186c:	12 96       	adiw	r26, 0x02	; 2
    186e:	9c 93       	st	X, r25
    1870:	8e 93       	st	-X, r24
    1872:	11 97       	sbiw	r26, 0x01	; 1
    1874:	15 86       	std	Z+13, r1	; 0x0d
    1876:	14 86       	std	Z+12, r1	; 0x0c
    1878:	8c 91       	ld	r24, X
    187a:	81 50       	subi	r24, 0x01	; 1
    187c:	8c 93       	st	X, r24
    187e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1880:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <uxTopReadyPriority>
    1884:	8a 17       	cp	r24, r26
    1886:	10 f4       	brcc	.+4      	; 0x188c <xTaskRemoveFromEventList+0xb6>
    1888:	a0 93 3b 0c 	sts	0x0C3B, r26	; 0x800c3b <uxTopReadyPriority>
    188c:	8b e0       	ldi	r24, 0x0B	; 11
    188e:	8a 9f       	mul	r24, r26
    1890:	d0 01       	movw	r26, r0
    1892:	11 24       	eor	r1, r1
    1894:	a3 58       	subi	r26, 0x83	; 131
    1896:	b3 4f       	sbci	r27, 0xF3	; 243
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	0d 90       	ld	r0, X+
    189c:	bc 91       	ld	r27, X
    189e:	a0 2d       	mov	r26, r0
    18a0:	b7 83       	std	Z+7, r27	; 0x07
    18a2:	a6 83       	std	Z+6, r26	; 0x06
    18a4:	16 96       	adiw	r26, 0x06	; 6
    18a6:	4d 91       	ld	r20, X+
    18a8:	5c 91       	ld	r21, X
    18aa:	17 97       	sbiw	r26, 0x07	; 7
    18ac:	51 87       	std	Z+9, r21	; 0x09
    18ae:	40 87       	std	Z+8, r20	; 0x08
    18b0:	16 96       	adiw	r26, 0x06	; 6
    18b2:	cd 91       	ld	r28, X+
    18b4:	dc 91       	ld	r29, X
    18b6:	17 97       	sbiw	r26, 0x07	; 7
    18b8:	3d 83       	std	Y+5, r19	; 0x05
    18ba:	2c 83       	std	Y+4, r18	; 0x04
    18bc:	17 96       	adiw	r26, 0x07	; 7
    18be:	3c 93       	st	X, r19
    18c0:	2e 93       	st	-X, r18
    18c2:	16 97       	sbiw	r26, 0x06	; 6
    18c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    18c6:	8a 9f       	mul	r24, r26
    18c8:	d0 01       	movw	r26, r0
    18ca:	11 24       	eor	r1, r1
    18cc:	a3 58       	subi	r26, 0x83	; 131
    18ce:	b3 4f       	sbci	r27, 0xF3	; 243
    18d0:	b5 87       	std	Z+13, r27	; 0x0d
    18d2:	a4 87       	std	Z+12, r26	; 0x0c
    18d4:	8c 91       	ld	r24, X
    18d6:	8f 5f       	subi	r24, 0xFF	; 255
    18d8:	8c 93       	st	X, r24
    18da:	1c c0       	rjmp	.+56     	; 0x1914 <xTaskRemoveFromEventList+0x13e>
    18dc:	48 e5       	ldi	r20, 0x58	; 88
    18de:	5c e0       	ldi	r21, 0x0C	; 12
    18e0:	da 01       	movw	r26, r20
    18e2:	11 96       	adiw	r26, 0x01	; 1
    18e4:	cd 91       	ld	r28, X+
    18e6:	dc 91       	ld	r29, X
    18e8:	12 97       	sbiw	r26, 0x02	; 2
    18ea:	d3 8b       	std	Z+19, r29	; 0x13
    18ec:	c2 8b       	std	Z+18, r28	; 0x12
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
    18f0:	9f 81       	ldd	r25, Y+7	; 0x07
    18f2:	95 8b       	std	Z+21, r25	; 0x15
    18f4:	84 8b       	std	Z+20, r24	; 0x14
    18f6:	8e 81       	ldd	r24, Y+6	; 0x06
    18f8:	9f 81       	ldd	r25, Y+7	; 0x07
    18fa:	dc 01       	movw	r26, r24
    18fc:	15 96       	adiw	r26, 0x05	; 5
    18fe:	3c 93       	st	X, r19
    1900:	2e 93       	st	-X, r18
    1902:	14 97       	sbiw	r26, 0x04	; 4
    1904:	3f 83       	std	Y+7, r19	; 0x07
    1906:	2e 83       	std	Y+6, r18	; 0x06
    1908:	51 8f       	std	Z+25, r21	; 0x19
    190a:	40 8f       	std	Z+24, r20	; 0x18
    190c:	da 01       	movw	r26, r20
    190e:	8c 91       	ld	r24, X
    1910:	8f 5f       	subi	r24, 0xFF	; 255
    1912:	8c 93       	st	X, r24
    1914:	92 8d       	ldd	r25, Z+26	; 0x1a
    1916:	e0 91 eb 0c 	lds	r30, 0x0CEB	; 0x800ceb <pxCurrentTCB>
    191a:	f0 91 ec 0c 	lds	r31, 0x0CEC	; 0x800cec <pxCurrentTCB+0x1>
    191e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1920:	89 17       	cp	r24, r25
    1922:	20 f4       	brcc	.+8      	; 0x192c <xTaskRemoveFromEventList+0x156>
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <xYieldPending>
    192a:	01 c0       	rjmp	.+2      	; 0x192e <xTaskRemoveFromEventList+0x158>
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	08 95       	ret

00001934 <vTaskInternalSetTimeOutState>:
    1934:	20 91 34 0c 	lds	r18, 0x0C34	; 0x800c34 <xNumOfOverflows>
    1938:	fc 01       	movw	r30, r24
    193a:	20 83       	st	Z, r18
    193c:	40 91 3c 0c 	lds	r20, 0x0C3C	; 0x800c3c <xTickCount>
    1940:	50 91 3d 0c 	lds	r21, 0x0C3D	; 0x800c3d <xTickCount+0x1>
    1944:	60 91 3e 0c 	lds	r22, 0x0C3E	; 0x800c3e <xTickCount+0x2>
    1948:	70 91 3f 0c 	lds	r23, 0x0C3F	; 0x800c3f <xTickCount+0x3>
    194c:	41 83       	std	Z+1, r20	; 0x01
    194e:	52 83       	std	Z+2, r21	; 0x02
    1950:	63 83       	std	Z+3, r22	; 0x03
    1952:	74 83       	std	Z+4, r23	; 0x04
    1954:	08 95       	ret

00001956 <xTaskCheckForTimeOut>:
    1956:	8f 92       	push	r8
    1958:	9f 92       	push	r9
    195a:	af 92       	push	r10
    195c:	bf 92       	push	r11
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	fb 01       	movw	r30, r22
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	0f 92       	push	r0
    1976:	c0 90 3c 0c 	lds	r12, 0x0C3C	; 0x800c3c <xTickCount>
    197a:	d0 90 3d 0c 	lds	r13, 0x0C3D	; 0x800c3d <xTickCount+0x1>
    197e:	e0 90 3e 0c 	lds	r14, 0x0C3E	; 0x800c3e <xTickCount+0x2>
    1982:	f0 90 3f 0c 	lds	r15, 0x0C3F	; 0x800c3f <xTickCount+0x3>
    1986:	dc 01       	movw	r26, r24
    1988:	11 96       	adiw	r26, 0x01	; 1
    198a:	0d 91       	ld	r16, X+
    198c:	1d 91       	ld	r17, X+
    198e:	2d 91       	ld	r18, X+
    1990:	3c 91       	ld	r19, X
    1992:	14 97       	sbiw	r26, 0x04	; 4
    1994:	46 01       	movw	r8, r12
    1996:	57 01       	movw	r10, r14
    1998:	80 1a       	sub	r8, r16
    199a:	91 0a       	sbc	r9, r17
    199c:	a2 0a       	sbc	r10, r18
    199e:	b3 0a       	sbc	r11, r19
    19a0:	40 81       	ld	r20, Z
    19a2:	51 81       	ldd	r21, Z+1	; 0x01
    19a4:	62 81       	ldd	r22, Z+2	; 0x02
    19a6:	73 81       	ldd	r23, Z+3	; 0x03
    19a8:	4f 3f       	cpi	r20, 0xFF	; 255
    19aa:	bf ef       	ldi	r27, 0xFF	; 255
    19ac:	5b 07       	cpc	r21, r27
    19ae:	6b 07       	cpc	r22, r27
    19b0:	7b 07       	cpc	r23, r27
    19b2:	39 f1       	breq	.+78     	; 0x1a02 <xTaskCheckForTimeOut+0xac>
    19b4:	ec 01       	movw	r28, r24
    19b6:	b8 81       	ld	r27, Y
    19b8:	a0 91 34 0c 	lds	r26, 0x0C34	; 0x800c34 <xNumOfOverflows>
    19bc:	ba 17       	cp	r27, r26
    19be:	59 f0       	breq	.+22     	; 0x19d6 <xTaskCheckForTimeOut+0x80>
    19c0:	c0 16       	cp	r12, r16
    19c2:	d1 06       	cpc	r13, r17
    19c4:	e2 06       	cpc	r14, r18
    19c6:	f3 06       	cpc	r15, r19
    19c8:	30 f0       	brcs	.+12     	; 0x19d6 <xTaskCheckForTimeOut+0x80>
    19ca:	10 82       	st	Z, r1
    19cc:	11 82       	std	Z+1, r1	; 0x01
    19ce:	12 82       	std	Z+2, r1	; 0x02
    19d0:	13 82       	std	Z+3, r1	; 0x03
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	17 c0       	rjmp	.+46     	; 0x1a04 <xTaskCheckForTimeOut+0xae>
    19d6:	84 16       	cp	r8, r20
    19d8:	95 06       	cpc	r9, r21
    19da:	a6 06       	cpc	r10, r22
    19dc:	b7 06       	cpc	r11, r23
    19de:	58 f4       	brcc	.+22     	; 0x19f6 <xTaskCheckForTimeOut+0xa0>
    19e0:	48 19       	sub	r20, r8
    19e2:	59 09       	sbc	r21, r9
    19e4:	6a 09       	sbc	r22, r10
    19e6:	7b 09       	sbc	r23, r11
    19e8:	40 83       	st	Z, r20
    19ea:	51 83       	std	Z+1, r21	; 0x01
    19ec:	62 83       	std	Z+2, r22	; 0x02
    19ee:	73 83       	std	Z+3, r23	; 0x03
    19f0:	a1 df       	rcall	.-190    	; 0x1934 <vTaskInternalSetTimeOutState>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <xTaskCheckForTimeOut+0xae>
    19f6:	10 82       	st	Z, r1
    19f8:	11 82       	std	Z+1, r1	; 0x01
    19fa:	12 82       	std	Z+2, r1	; 0x02
    19fc:	13 82       	std	Z+3, r1	; 0x03
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	01 c0       	rjmp	.+2      	; 0x1a04 <xTaskCheckForTimeOut+0xae>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	9f 90       	pop	r9
    1a1e:	8f 90       	pop	r8
    1a20:	08 95       	ret

00001a22 <vTaskMissedYield>:
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <xYieldPending>
    1a28:	08 95       	ret

00001a2a <xTaskGetSchedulerState>:
    1a2a:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <xSchedulerRunning>
    1a2e:	88 23       	and	r24, r24
    1a30:	31 f0       	breq	.+12     	; 0x1a3e <xTaskGetSchedulerState+0x14>
    1a32:	80 91 2c 0c 	lds	r24, 0x0C2C	; 0x800c2c <uxSchedulerSuspended>
    1a36:	81 11       	cpse	r24, r1
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <xTaskGetSchedulerState+0x18>
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	08 95       	ret
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	08 95       	ret
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	08 95       	ret

00001a46 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	fc 01       	movw	r30, r24
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    1a50:	89 2b       	or	r24, r25
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <xTaskPriorityDisinherit+0x10>
    1a54:	49 c0       	rjmp	.+146    	; 0x1ae8 <xTaskPriorityDisinherit+0xa2>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    1a56:	86 a5       	ldd	r24, Z+46	; 0x2e
    1a58:	81 50       	subi	r24, 0x01	; 1
    1a5a:	86 a7       	std	Z+46, r24	; 0x2e

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1a5c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a5e:	95 a5       	ldd	r25, Z+45	; 0x2d
    1a60:	29 17       	cp	r18, r25
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <xTaskPriorityDisinherit+0x20>
    1a64:	43 c0       	rjmp	.+134    	; 0x1aec <xTaskPriorityDisinherit+0xa6>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    1a66:	81 11       	cpse	r24, r1
    1a68:	43 c0       	rjmp	.+134    	; 0x1af0 <xTaskPriorityDisinherit+0xaa>
    1a6a:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1a6c:	8f 01       	movw	r16, r30
    1a6e:	0e 5f       	subi	r16, 0xFE	; 254
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	c8 01       	movw	r24, r16
    1a74:	0e 94 6f 02 	call	0x4de	; 0x4de <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    1a78:	ed a5       	ldd	r30, Y+45	; 0x2d
    1a7a:	ea 8f       	std	Y+26, r30	; 0x1a

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1a7c:	8a e0       	ldi	r24, 0x0A	; 10
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a0 e0       	ldi	r26, 0x00	; 0
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	8e 1b       	sub	r24, r30
    1a86:	91 09       	sbc	r25, r1
    1a88:	a1 09       	sbc	r26, r1
    1a8a:	b1 09       	sbc	r27, r1
    1a8c:	8e 87       	std	Y+14, r24	; 0x0e
    1a8e:	9f 87       	std	Y+15, r25	; 0x0f
    1a90:	a8 8b       	std	Y+16, r26	; 0x10
    1a92:	b9 8b       	std	Y+17, r27	; 0x11
                    prvAddTaskToReadyList( pxTCB );
    1a94:	80 91 3b 0c 	lds	r24, 0x0C3B	; 0x800c3b <uxTopReadyPriority>
    1a98:	8e 17       	cp	r24, r30
    1a9a:	10 f4       	brcc	.+4      	; 0x1aa0 <xTaskPriorityDisinherit+0x5a>
    1a9c:	e0 93 3b 0c 	sts	0x0C3B, r30	; 0x800c3b <uxTopReadyPriority>
    1aa0:	8b e0       	ldi	r24, 0x0B	; 11
    1aa2:	8e 9f       	mul	r24, r30
    1aa4:	f0 01       	movw	r30, r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	e3 58       	subi	r30, 0x83	; 131
    1aaa:	f3 4f       	sbci	r31, 0xF3	; 243
    1aac:	01 80       	ldd	r0, Z+1	; 0x01
    1aae:	f2 81       	ldd	r31, Z+2	; 0x02
    1ab0:	e0 2d       	mov	r30, r0
    1ab2:	ff 83       	std	Y+7, r31	; 0x07
    1ab4:	ee 83       	std	Y+6, r30	; 0x06
    1ab6:	26 81       	ldd	r18, Z+6	; 0x06
    1ab8:	37 81       	ldd	r19, Z+7	; 0x07
    1aba:	39 87       	std	Y+9, r19	; 0x09
    1abc:	28 87       	std	Y+8, r18	; 0x08
    1abe:	a6 81       	ldd	r26, Z+6	; 0x06
    1ac0:	b7 81       	ldd	r27, Z+7	; 0x07
    1ac2:	15 96       	adiw	r26, 0x05	; 5
    1ac4:	1c 93       	st	X, r17
    1ac6:	0e 93       	st	-X, r16
    1ac8:	14 97       	sbiw	r26, 0x04	; 4
    1aca:	17 83       	std	Z+7, r17	; 0x07
    1acc:	06 83       	std	Z+6, r16	; 0x06
    1ace:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ad0:	8e 9f       	mul	r24, r30
    1ad2:	f0 01       	movw	r30, r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	e3 58       	subi	r30, 0x83	; 131
    1ad8:	f3 4f       	sbci	r31, 0xF3	; 243
    1ada:	fd 87       	std	Y+13, r31	; 0x0d
    1adc:	ec 87       	std	Y+12, r30	; 0x0c
    1ade:	80 81       	ld	r24, Z
    1ae0:	8f 5f       	subi	r24, 0xFF	; 255
    1ae2:	80 83       	st	Z, r24
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	05 c0       	rjmp	.+10     	; 0x1af2 <xTaskPriorityDisinherit+0xac>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
        TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
        BaseType_t xReturn = pdFALSE;
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <xTaskPriorityDisinherit+0xac>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	01 c0       	rjmp	.+2      	; 0x1af2 <xTaskPriorityDisinherit+0xac>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	1f 91       	pop	r17
    1af8:	0f 91       	pop	r16
    1afa:	08 95       	ret

00001afc <prvGetNextExpireTime>:
    1afc:	dc 01       	movw	r26, r24
    1afe:	e0 91 f7 0c 	lds	r30, 0x0CF7	; 0x800cf7 <pxCurrentTimerList>
    1b02:	f0 91 f8 0c 	lds	r31, 0x0CF8	; 0x800cf8 <pxCurrentTimerList+0x1>
    1b06:	80 81       	ld	r24, Z
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9c 93       	st	X, r25
    1b10:	91 11       	cpse	r25, r1
    1b12:	08 c0       	rjmp	.+16     	; 0x1b24 <prvGetNextExpireTime+0x28>
    1b14:	07 80       	ldd	r0, Z+7	; 0x07
    1b16:	f0 85       	ldd	r31, Z+8	; 0x08
    1b18:	e0 2d       	mov	r30, r0
    1b1a:	60 81       	ld	r22, Z
    1b1c:	71 81       	ldd	r23, Z+1	; 0x01
    1b1e:	82 81       	ldd	r24, Z+2	; 0x02
    1b20:	93 81       	ldd	r25, Z+3	; 0x03
    1b22:	08 95       	ret
    1b24:	60 e0       	ldi	r22, 0x00	; 0
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	cb 01       	movw	r24, r22
    1b2a:	08 95       	ret

00001b2c <prvInsertTimerInActiveList>:
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	fc 01       	movw	r30, r24
    1b3a:	42 83       	std	Z+2, r20	; 0x02
    1b3c:	53 83       	std	Z+3, r21	; 0x03
    1b3e:	64 83       	std	Z+4, r22	; 0x04
    1b40:	75 83       	std	Z+5, r23	; 0x05
    1b42:	93 87       	std	Z+11, r25	; 0x0b
    1b44:	82 87       	std	Z+10, r24	; 0x0a
    1b46:	04 17       	cp	r16, r20
    1b48:	15 07       	cpc	r17, r21
    1b4a:	26 07       	cpc	r18, r22
    1b4c:	37 07       	cpc	r19, r23
    1b4e:	c0 f0       	brcs	.+48     	; 0x1b80 <prvInsertTimerInActiveList+0x54>
    1b50:	0c 19       	sub	r16, r12
    1b52:	1d 09       	sbc	r17, r13
    1b54:	2e 09       	sbc	r18, r14
    1b56:	3f 09       	sbc	r19, r15
    1b58:	86 85       	ldd	r24, Z+14	; 0x0e
    1b5a:	97 85       	ldd	r25, Z+15	; 0x0f
    1b5c:	a0 89       	ldd	r26, Z+16	; 0x10
    1b5e:	b1 89       	ldd	r27, Z+17	; 0x11
    1b60:	08 17       	cp	r16, r24
    1b62:	19 07       	cpc	r17, r25
    1b64:	2a 07       	cpc	r18, r26
    1b66:	3b 07       	cpc	r19, r27
    1b68:	00 f5       	brcc	.+64     	; 0x1baa <prvInsertTimerInActiveList+0x7e>
    1b6a:	bf 01       	movw	r22, r30
    1b6c:	6e 5f       	subi	r22, 0xFE	; 254
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <pxOverflowTimerList>
    1b74:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <pxOverflowTimerList+0x1>
    1b78:	0e 94 32 02 	call	0x464	; 0x464 <vListInsert>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	18 c0       	rjmp	.+48     	; 0x1bb0 <prvInsertTimerInActiveList+0x84>
    1b80:	0c 15       	cp	r16, r12
    1b82:	1d 05       	cpc	r17, r13
    1b84:	2e 05       	cpc	r18, r14
    1b86:	3f 05       	cpc	r19, r15
    1b88:	28 f4       	brcc	.+10     	; 0x1b94 <prvInsertTimerInActiveList+0x68>
    1b8a:	4c 15       	cp	r20, r12
    1b8c:	5d 05       	cpc	r21, r13
    1b8e:	6e 05       	cpc	r22, r14
    1b90:	7f 05       	cpc	r23, r15
    1b92:	68 f4       	brcc	.+26     	; 0x1bae <prvInsertTimerInActiveList+0x82>
    1b94:	bf 01       	movw	r22, r30
    1b96:	6e 5f       	subi	r22, 0xFE	; 254
    1b98:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9a:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <pxCurrentTimerList>
    1b9e:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <pxCurrentTimerList+0x1>
    1ba2:	0e 94 32 02 	call	0x464	; 0x464 <vListInsert>
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	03 c0       	rjmp	.+6      	; 0x1bb0 <prvInsertTimerInActiveList+0x84>
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <prvInsertTimerInActiveList+0x84>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	08 95       	ret

00001bbe <prvCheckForValidListAndQueue>:
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	0f 92       	push	r0
    1bc4:	80 91 f3 0c 	lds	r24, 0x0CF3	; 0x800cf3 <xTimerQueue>
    1bc8:	90 91 f4 0c 	lds	r25, 0x0CF4	; 0x800cf4 <xTimerQueue+0x1>
    1bcc:	89 2b       	or	r24, r25
    1bce:	e9 f4       	brne	.+58     	; 0x1c0a <prvCheckForValidListAndQueue+0x4c>
    1bd0:	84 e0       	ldi	r24, 0x04	; 4
    1bd2:	9d e0       	ldi	r25, 0x0D	; 13
    1bd4:	0e 94 1d 02 	call	0x43a	; 0x43a <vListInitialise>
    1bd8:	89 ef       	ldi	r24, 0xF9	; 249
    1bda:	9c e0       	ldi	r25, 0x0C	; 12
    1bdc:	0e 94 1d 02 	call	0x43a	; 0x43a <vListInitialise>
    1be0:	84 e0       	ldi	r24, 0x04	; 4
    1be2:	9d e0       	ldi	r25, 0x0D	; 13
    1be4:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <pxCurrentTimerList+0x1>
    1be8:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <pxCurrentTimerList>
    1bec:	89 ef       	ldi	r24, 0xF9	; 249
    1bee:	9c e0       	ldi	r25, 0x0C	; 12
    1bf0:	90 93 f6 0c 	sts	0x0CF6, r25	; 0x800cf6 <pxOverflowTimerList+0x1>
    1bf4:	80 93 f5 0c 	sts	0x0CF5, r24	; 0x800cf5 <pxOverflowTimerList>
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	67 e0       	ldi	r22, 0x07	; 7
    1bfc:	8a e0       	ldi	r24, 0x0A	; 10
    1bfe:	0e 94 cb 04 	call	0x996	; 0x996 <xQueueGenericCreate>
    1c02:	90 93 f4 0c 	sts	0x0CF4, r25	; 0x800cf4 <xTimerQueue+0x1>
    1c06:	80 93 f3 0c 	sts	0x0CF3, r24	; 0x800cf3 <xTimerQueue>
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	08 95       	ret

00001c10 <xTimerCreateTimerTask>:
    1c10:	ef 92       	push	r14
    1c12:	ff 92       	push	r15
    1c14:	0f 93       	push	r16
    1c16:	d3 df       	rcall	.-90     	; 0x1bbe <prvCheckForValidListAndQueue>
    1c18:	80 91 f3 0c 	lds	r24, 0x0CF3	; 0x800cf3 <xTimerQueue>
    1c1c:	90 91 f4 0c 	lds	r25, 0x0CF4	; 0x800cf4 <xTimerQueue+0x1>
    1c20:	89 2b       	or	r24, r25
    1c22:	89 f0       	breq	.+34     	; 0x1c46 <xTimerCreateTimerTask+0x36>
    1c24:	0f 2e       	mov	r0, r31
    1c26:	f1 ef       	ldi	r31, 0xF1	; 241
    1c28:	ef 2e       	mov	r14, r31
    1c2a:	fc e0       	ldi	r31, 0x0C	; 12
    1c2c:	ff 2e       	mov	r15, r31
    1c2e:	f0 2d       	mov	r31, r0
    1c30:	03 e0       	ldi	r16, 0x03	; 3
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 ec       	ldi	r20, 0xC0	; 192
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	62 e2       	ldi	r22, 0x22	; 34
    1c3c:	72 e0       	ldi	r23, 0x02	; 2
    1c3e:	85 e8       	ldi	r24, 0x85	; 133
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	41 da       	rcall	.-2942   	; 0x10c6 <xTaskCreate>
    1c44:	01 c0       	rjmp	.+2      	; 0x1c48 <xTimerCreateTimerTask+0x38>
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	08 95       	ret

00001c50 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1c50:	8f 92       	push	r8
    1c52:	9f 92       	push	r9
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	27 97       	sbiw	r28, 0x07	; 7
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1c78:	e0 91 f3 0c 	lds	r30, 0x0CF3	; 0x800cf3 <xTimerQueue>
    1c7c:	f0 91 f4 0c 	lds	r31, 0x0CF4	; 0x800cf4 <xTimerQueue+0x1>
    1c80:	30 97       	sbiw	r30, 0x00	; 0
    1c82:	81 f1       	breq	.+96     	; 0x1ce4 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1c84:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1c86:	2a 83       	std	Y+2, r18	; 0x02
    1c88:	3b 83       	std	Y+3, r19	; 0x03
    1c8a:	4c 83       	std	Y+4, r20	; 0x04
    1c8c:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1c8e:	9f 83       	std	Y+7, r25	; 0x07
    1c90:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1c92:	66 30       	cpi	r22, 0x06	; 6
    1c94:	f4 f4       	brge	.+60     	; 0x1cd2 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1c96:	c9 de       	rcall	.-622    	; 0x1a2a <xTaskGetSchedulerState>
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	69 f4       	brne	.+26     	; 0x1cb6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1c9c:	00 e0       	ldi	r16, 0x00	; 0
    1c9e:	a7 01       	movw	r20, r14
    1ca0:	96 01       	movw	r18, r12
    1ca2:	be 01       	movw	r22, r28
    1ca4:	6f 5f       	subi	r22, 0xFF	; 255
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	80 91 f3 0c 	lds	r24, 0x0CF3	; 0x800cf3 <xTimerQueue>
    1cac:	90 91 f4 0c 	lds	r25, 0x0CF4	; 0x800cf4 <xTimerQueue+0x1>
    1cb0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <xQueueGenericSend>
    1cb4:	18 c0       	rjmp	.+48     	; 0x1ce6 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1cb6:	00 e0       	ldi	r16, 0x00	; 0
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	be 01       	movw	r22, r28
    1cc0:	6f 5f       	subi	r22, 0xFF	; 255
    1cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc4:	80 91 f3 0c 	lds	r24, 0x0CF3	; 0x800cf3 <xTimerQueue>
    1cc8:	90 91 f4 0c 	lds	r25, 0x0CF4	; 0x800cf4 <xTimerQueue+0x1>
    1ccc:	0e 94 ee 04 	call	0x9dc	; 0x9dc <xQueueGenericSend>
    1cd0:	0a c0       	rjmp	.+20     	; 0x1ce6 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	a8 01       	movw	r20, r16
    1cd6:	be 01       	movw	r22, r28
    1cd8:	6f 5f       	subi	r22, 0xFF	; 255
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	cf 01       	movw	r24, r30
    1cde:	0e 94 79 05 	call	0xaf2	; 0xaf2 <xQueueGenericSendFromISR>
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1ce6:	27 96       	adiw	r28, 0x07	; 7
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	df 90       	pop	r13
    1d00:	cf 90       	pop	r12
    1d02:	bf 90       	pop	r11
    1d04:	af 90       	pop	r10
    1d06:	9f 90       	pop	r9
    1d08:	8f 90       	pop	r8
    1d0a:	08 95       	ret

00001d0c <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    1d0c:	8f 92       	push	r8
    1d0e:	9f 92       	push	r9
    1d10:	af 92       	push	r10
    1d12:	bf 92       	push	r11
    1d14:	cf 92       	push	r12
    1d16:	df 92       	push	r13
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1d24:	3b c0       	rjmp	.+118    	; 0x1d9c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1d26:	07 80       	ldd	r0, Z+7	; 0x07
    1d28:	f0 85       	ldd	r31, Z+8	; 0x08
    1d2a:	e0 2d       	mov	r30, r0
    1d2c:	80 80       	ld	r8, Z
    1d2e:	91 80       	ldd	r9, Z+1	; 0x01
    1d30:	a2 80       	ldd	r10, Z+2	; 0x02
    1d32:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1d34:	c0 85       	ldd	r28, Z+8	; 0x08
    1d36:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1d38:	8e 01       	movw	r16, r28
    1d3a:	0e 5f       	subi	r16, 0xFE	; 254
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	c8 01       	movw	r24, r16
    1d40:	0e 94 6f 02 	call	0x4de	; 0x4de <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1d44:	ec 89       	ldd	r30, Y+20	; 0x14
    1d46:	fd 89       	ldd	r31, Y+21	; 0x15
    1d48:	ce 01       	movw	r24, r28
    1d4a:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1d4c:	8e 89       	ldd	r24, Y+22	; 0x16
    1d4e:	82 ff       	sbrs	r24, 2
    1d50:	25 c0       	rjmp	.+74     	; 0x1d9c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1d52:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d54:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d56:	a8 89       	ldd	r26, Y+16	; 0x10
    1d58:	b9 89       	ldd	r27, Y+17	; 0x11
    1d5a:	88 0d       	add	r24, r8
    1d5c:	99 1d       	adc	r25, r9
    1d5e:	aa 1d       	adc	r26, r10
    1d60:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    1d62:	88 16       	cp	r8, r24
    1d64:	99 06       	cpc	r9, r25
    1d66:	aa 06       	cpc	r10, r26
    1d68:	bb 06       	cpc	r11, r27
    1d6a:	70 f4       	brcc	.+28     	; 0x1d88 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1d6c:	8a 83       	std	Y+2, r24	; 0x02
    1d6e:	9b 83       	std	Y+3, r25	; 0x03
    1d70:	ac 83       	std	Y+4, r26	; 0x04
    1d72:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1d74:	db 87       	std	Y+11, r29	; 0x0b
    1d76:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1d78:	b8 01       	movw	r22, r16
    1d7a:	80 91 f7 0c 	lds	r24, 0x0CF7	; 0x800cf7 <pxCurrentTimerList>
    1d7e:	90 91 f8 0c 	lds	r25, 0x0CF8	; 0x800cf8 <pxCurrentTimerList+0x1>
    1d82:	0e 94 32 02 	call	0x464	; 0x464 <vListInsert>
    1d86:	0a c0       	rjmp	.+20     	; 0x1d9c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1d88:	c1 2c       	mov	r12, r1
    1d8a:	d1 2c       	mov	r13, r1
    1d8c:	76 01       	movw	r14, r12
    1d8e:	00 e0       	ldi	r16, 0x00	; 0
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	a5 01       	movw	r20, r10
    1d94:	94 01       	movw	r18, r8
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	ce 01       	movw	r24, r28
    1d9a:	5a df       	rcall	.-332    	; 0x1c50 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1d9c:	e0 91 f7 0c 	lds	r30, 0x0CF7	; 0x800cf7 <pxCurrentTimerList>
    1da0:	f0 91 f8 0c 	lds	r31, 0x0CF8	; 0x800cf8 <pxCurrentTimerList+0x1>
    1da4:	80 81       	ld	r24, Z
    1da6:	81 11       	cpse	r24, r1
    1da8:	be cf       	rjmp	.-132    	; 0x1d26 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1daa:	80 91 f5 0c 	lds	r24, 0x0CF5	; 0x800cf5 <pxOverflowTimerList>
    1dae:	90 91 f6 0c 	lds	r25, 0x0CF6	; 0x800cf6 <pxOverflowTimerList+0x1>
    1db2:	90 93 f8 0c 	sts	0x0CF8, r25	; 0x800cf8 <pxCurrentTimerList+0x1>
    1db6:	80 93 f7 0c 	sts	0x0CF7, r24	; 0x800cf7 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1dba:	f0 93 f6 0c 	sts	0x0CF6, r31	; 0x800cf6 <pxOverflowTimerList+0x1>
    1dbe:	e0 93 f5 0c 	sts	0x0CF5, r30	; 0x800cf5 <pxOverflowTimerList>
    }
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	1f 91       	pop	r17
    1dc8:	0f 91       	pop	r16
    1dca:	ff 90       	pop	r15
    1dcc:	ef 90       	pop	r14
    1dce:	df 90       	pop	r13
    1dd0:	cf 90       	pop	r12
    1dd2:	bf 90       	pop	r11
    1dd4:	af 90       	pop	r10
    1dd6:	9f 90       	pop	r9
    1dd8:	8f 90       	pop	r8
    1dda:	08 95       	ret

00001ddc <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1ddc:	cf 92       	push	r12
    1dde:	df 92       	push	r13
    1de0:	ef 92       	push	r14
    1de2:	ff 92       	push	r15
    1de4:	cf 93       	push	r28
    1de6:	df 93       	push	r29
    1de8:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1dea:	f9 d9       	rcall	.-3086   	; 0x11de <xTaskGetTickCount>
    1dec:	6b 01       	movw	r12, r22
    1dee:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    1df0:	80 91 ed 0c 	lds	r24, 0x0CED	; 0x800ced <xLastTime.2448>
    1df4:	90 91 ee 0c 	lds	r25, 0x0CEE	; 0x800cee <xLastTime.2448+0x1>
    1df8:	a0 91 ef 0c 	lds	r26, 0x0CEF	; 0x800cef <xLastTime.2448+0x2>
    1dfc:	b0 91 f0 0c 	lds	r27, 0x0CF0	; 0x800cf0 <xLastTime.2448+0x3>
    1e00:	c8 16       	cp	r12, r24
    1e02:	d9 06       	cpc	r13, r25
    1e04:	ea 06       	cpc	r14, r26
    1e06:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    1e08:	20 f4       	brcc	.+8      	; 0x1e12 <prvSampleTimeNow+0x36>
    1e0a:	80 df       	rcall	.-256    	; 0x1d0c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	88 83       	st	Y, r24
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1e12:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    1e14:	c0 92 ed 0c 	sts	0x0CED, r12	; 0x800ced <xLastTime.2448>
    1e18:	d0 92 ee 0c 	sts	0x0CEE, r13	; 0x800cee <xLastTime.2448+0x1>
    1e1c:	e0 92 ef 0c 	sts	0x0CEF, r14	; 0x800cef <xLastTime.2448+0x2>
    1e20:	f0 92 f0 0c 	sts	0x0CF0, r15	; 0x800cf0 <xLastTime.2448+0x3>

        return xTimeNow;
    }
    1e24:	c7 01       	movw	r24, r14
    1e26:	b6 01       	movw	r22, r12
    1e28:	df 91       	pop	r29
    1e2a:	cf 91       	pop	r28
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	08 95       	ret

00001e36 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1e36:	4f 92       	push	r4
    1e38:	5f 92       	push	r5
    1e3a:	6f 92       	push	r6
    1e3c:	7f 92       	push	r7
    1e3e:	8f 92       	push	r8
    1e40:	9f 92       	push	r9
    1e42:	af 92       	push	r10
    1e44:	bf 92       	push	r11
    1e46:	cf 92       	push	r12
    1e48:	df 92       	push	r13
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	4b 01       	movw	r8, r22
    1e58:	5c 01       	movw	r10, r24
    1e5a:	29 01       	movw	r4, r18
    1e5c:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1e5e:	e0 91 f7 0c 	lds	r30, 0x0CF7	; 0x800cf7 <pxCurrentTimerList>
    1e62:	f0 91 f8 0c 	lds	r31, 0x0CF8	; 0x800cf8 <pxCurrentTimerList+0x1>
    1e66:	07 80       	ldd	r0, Z+7	; 0x07
    1e68:	f0 85       	ldd	r31, Z+8	; 0x08
    1e6a:	e0 2d       	mov	r30, r0
    1e6c:	c0 85       	ldd	r28, Z+8	; 0x08
    1e6e:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1e70:	ce 01       	movw	r24, r28
    1e72:	02 96       	adiw	r24, 0x02	; 2
    1e74:	0e 94 6f 02 	call	0x4de	; 0x4de <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1e78:	8e 89       	ldd	r24, Y+22	; 0x16
    1e7a:	82 ff       	sbrs	r24, 2
    1e7c:	1b c0       	rjmp	.+54     	; 0x1eb4 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    1e7e:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e80:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e82:	68 89       	ldd	r22, Y+16	; 0x10
    1e84:	79 89       	ldd	r23, Y+17	; 0x11
    1e86:	48 0d       	add	r20, r8
    1e88:	59 1d       	adc	r21, r9
    1e8a:	6a 1d       	adc	r22, r10
    1e8c:	7b 1d       	adc	r23, r11
    1e8e:	75 01       	movw	r14, r10
    1e90:	64 01       	movw	r12, r8
    1e92:	93 01       	movw	r18, r6
    1e94:	82 01       	movw	r16, r4
    1e96:	ce 01       	movw	r24, r28
    1e98:	49 de       	rcall	.-878    	; 0x1b2c <prvInsertTimerInActiveList>
    1e9a:	88 23       	and	r24, r24
    1e9c:	69 f0       	breq	.+26     	; 0x1eb8 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1e9e:	c1 2c       	mov	r12, r1
    1ea0:	d1 2c       	mov	r13, r1
    1ea2:	76 01       	movw	r14, r12
    1ea4:	00 e0       	ldi	r16, 0x00	; 0
    1ea6:	10 e0       	ldi	r17, 0x00	; 0
    1ea8:	a5 01       	movw	r20, r10
    1eaa:	94 01       	movw	r18, r8
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	ce 01       	movw	r24, r28
    1eb0:	cf de       	rcall	.-610    	; 0x1c50 <xTimerGenericCommand>
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    1eb4:	8e 7f       	andi	r24, 0xFE	; 254
    1eb6:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1eb8:	ec 89       	ldd	r30, Y+20	; 0x14
    1eba:	fd 89       	ldd	r31, Y+21	; 0x15
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	19 95       	eicall
    }
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	9f 90       	pop	r9
    1ed6:	8f 90       	pop	r8
    1ed8:	7f 90       	pop	r7
    1eda:	6f 90       	pop	r6
    1edc:	5f 90       	pop	r5
    1ede:	4f 90       	pop	r4
    1ee0:	08 95       	ret

00001ee2 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1ee2:	8f 92       	push	r8
    1ee4:	9f 92       	push	r9
    1ee6:	af 92       	push	r10
    1ee8:	bf 92       	push	r11
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	1f 92       	push	r1
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	6b 01       	movw	r12, r22
    1f00:	7c 01       	movw	r14, r24
    1f02:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1f04:	66 d9       	rcall	.-3380   	; 0x11d2 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1f06:	ce 01       	movw	r24, r28
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	68 df       	rcall	.-304    	; 0x1ddc <prvSampleTimeNow>
    1f0c:	4b 01       	movw	r8, r22
    1f0e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	81 11       	cpse	r24, r1
    1f14:	2b c0       	rjmp	.+86     	; 0x1f6c <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1f16:	11 11       	cpse	r17, r1
    1f18:	0c c0       	rjmp	.+24     	; 0x1f32 <prvProcessTimerOrBlockTask+0x50>
    1f1a:	8c 14       	cp	r8, r12
    1f1c:	9d 04       	cpc	r9, r13
    1f1e:	ae 04       	cpc	r10, r14
    1f20:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    1f22:	38 f0       	brcs	.+14     	; 0x1f32 <prvProcessTimerOrBlockTask+0x50>
    1f24:	96 da       	rcall	.-2772   	; 0x1452 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1f26:	a5 01       	movw	r20, r10
    1f28:	94 01       	movw	r18, r8
    1f2a:	c7 01       	movw	r24, r14
    1f2c:	b6 01       	movw	r22, r12
    1f2e:	83 df       	rcall	.-250    	; 0x1e36 <prvProcessExpiredTimer>
    1f30:	1e c0       	rjmp	.+60     	; 0x1f6e <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    1f32:	11 23       	and	r17, r17
    1f34:	41 f0       	breq	.+16     	; 0x1f46 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1f36:	e0 91 f5 0c 	lds	r30, 0x0CF5	; 0x800cf5 <pxOverflowTimerList>
    1f3a:	f0 91 f6 0c 	lds	r31, 0x0CF6	; 0x800cf6 <pxOverflowTimerList+0x1>
    1f3e:	80 81       	ld	r24, Z
    1f40:	11 e0       	ldi	r17, 0x01	; 1
    1f42:	81 11       	cpse	r24, r1
    1f44:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1f46:	b7 01       	movw	r22, r14
    1f48:	a6 01       	movw	r20, r12
    1f4a:	48 19       	sub	r20, r8
    1f4c:	59 09       	sbc	r21, r9
    1f4e:	6a 09       	sbc	r22, r10
    1f50:	7b 09       	sbc	r23, r11
    1f52:	21 2f       	mov	r18, r17
    1f54:	80 91 f3 0c 	lds	r24, 0x0CF3	; 0x800cf3 <xTimerQueue>
    1f58:	90 91 f4 0c 	lds	r25, 0x0CF4	; 0x800cf4 <xTimerQueue+0x1>
    1f5c:	0e 94 3e 06 	call	0xc7c	; 0xc7c <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1f60:	78 da       	rcall	.-2832   	; 0x1452 <xTaskResumeAll>
    1f62:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    1f64:	04 c0       	rjmp	.+8      	; 0x1f6e <prvProcessTimerOrBlockTask+0x8c>
    1f66:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1f6a:	01 c0       	rjmp	.+2      	; 0x1f6e <prvProcessTimerOrBlockTask+0x8c>
    1f6c:	72 da       	rcall	.-2844   	; 0x1452 <xTaskResumeAll>
            }
        }
    }
    1f6e:	0f 90       	pop	r0
    1f70:	df 91       	pop	r29
    1f72:	cf 91       	pop	r28
    1f74:	1f 91       	pop	r17
    1f76:	ff 90       	pop	r15
    1f78:	ef 90       	pop	r14
    1f7a:	df 90       	pop	r13
    1f7c:	cf 90       	pop	r12
    1f7e:	bf 90       	pop	r11
    1f80:	af 90       	pop	r10
    1f82:	9f 90       	pop	r9
    1f84:	8f 90       	pop	r8
    1f86:	08 95       	ret

00001f88 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	cf 93       	push	r28
    1f9a:	df 93       	push	r29
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	28 97       	sbiw	r28, 0x08	; 8
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1fac:	81 c0       	rjmp	.+258    	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	88 23       	and	r24, r24
    1fb2:	0c f4       	brge	.+2      	; 0x1fb6 <prvProcessReceivedCommands+0x2e>
    1fb4:	7d c0       	rjmp	.+250    	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1fb6:	ae 80       	ldd	r10, Y+6	; 0x06
    1fb8:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    1fba:	d5 01       	movw	r26, r10
    1fbc:	1c 96       	adiw	r26, 0x0c	; 12
    1fbe:	8d 91       	ld	r24, X+
    1fc0:	9c 91       	ld	r25, X
    1fc2:	1d 97       	sbiw	r26, 0x0d	; 13
    1fc4:	89 2b       	or	r24, r25
    1fc6:	21 f0       	breq	.+8      	; 0x1fd0 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1fc8:	c5 01       	movw	r24, r10
    1fca:	02 96       	adiw	r24, 0x02	; 2
    1fcc:	0e 94 6f 02 	call	0x4de	; 0x4de <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	08 96       	adiw	r24, 0x08	; 8
    1fd4:	03 df       	rcall	.-506    	; 0x1ddc <prvSampleTimeNow>
    1fd6:	8b 01       	movw	r16, r22
    1fd8:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    1fda:	e9 81       	ldd	r30, Y+1	; 0x01
    1fdc:	0e 2e       	mov	r0, r30
    1fde:	00 0c       	add	r0, r0
    1fe0:	ff 0b       	sbc	r31, r31
    1fe2:	ea 30       	cpi	r30, 0x0A	; 10
    1fe4:	f1 05       	cpc	r31, r1
    1fe6:	08 f0       	brcs	.+2      	; 0x1fea <prvProcessReceivedCommands+0x62>
    1fe8:	63 c0       	rjmp	.+198    	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
    1fea:	88 27       	eor	r24, r24
    1fec:	ee 58       	subi	r30, 0x8E	; 142
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ff2:	5a c6       	rjmp	.+3252   	; 0x2ca8 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1ff4:	f5 01       	movw	r30, r10
    1ff6:	86 89       	ldd	r24, Z+22	; 0x16
    1ff8:	81 60       	ori	r24, 0x01	; 1
    1ffa:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    1ffc:	ca 80       	ldd	r12, Y+2	; 0x02
    1ffe:	db 80       	ldd	r13, Y+3	; 0x03
    2000:	ec 80       	ldd	r14, Y+4	; 0x04
    2002:	fd 80       	ldd	r15, Y+5	; 0x05
    2004:	46 85       	ldd	r20, Z+14	; 0x0e
    2006:	57 85       	ldd	r21, Z+15	; 0x0f
    2008:	60 89       	ldd	r22, Z+16	; 0x10
    200a:	71 89       	ldd	r23, Z+17	; 0x11
    200c:	4c 0d       	add	r20, r12
    200e:	5d 1d       	adc	r21, r13
    2010:	6e 1d       	adc	r22, r14
    2012:	7f 1d       	adc	r23, r15
    2014:	c5 01       	movw	r24, r10
    2016:	8a dd       	rcall	.-1260   	; 0x1b2c <prvInsertTimerInActiveList>
    2018:	88 23       	and	r24, r24
    201a:	09 f4       	brne	.+2      	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    201c:	49 c0       	rjmp	.+146    	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    201e:	d5 01       	movw	r26, r10
    2020:	54 96       	adiw	r26, 0x14	; 20
    2022:	ed 91       	ld	r30, X+
    2024:	fc 91       	ld	r31, X
    2026:	55 97       	sbiw	r26, 0x15	; 21
    2028:	c5 01       	movw	r24, r10
    202a:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    202c:	f5 01       	movw	r30, r10
    202e:	86 89       	ldd	r24, Z+22	; 0x16
    2030:	82 ff       	sbrs	r24, 2
    2032:	3e c0       	rjmp	.+124    	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2034:	4a 81       	ldd	r20, Y+2	; 0x02
    2036:	5b 81       	ldd	r21, Y+3	; 0x03
    2038:	6c 81       	ldd	r22, Y+4	; 0x04
    203a:	7d 81       	ldd	r23, Y+5	; 0x05
    203c:	86 85       	ldd	r24, Z+14	; 0x0e
    203e:	97 85       	ldd	r25, Z+15	; 0x0f
    2040:	a0 89       	ldd	r26, Z+16	; 0x10
    2042:	b1 89       	ldd	r27, Z+17	; 0x11
    2044:	9a 01       	movw	r18, r20
    2046:	ab 01       	movw	r20, r22
    2048:	28 0f       	add	r18, r24
    204a:	39 1f       	adc	r19, r25
    204c:	4a 1f       	adc	r20, r26
    204e:	5b 1f       	adc	r21, r27
    2050:	c1 2c       	mov	r12, r1
    2052:	d1 2c       	mov	r13, r1
    2054:	76 01       	movw	r14, r12
    2056:	00 e0       	ldi	r16, 0x00	; 0
    2058:	10 e0       	ldi	r17, 0x00	; 0
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	c5 01       	movw	r24, r10
    205e:	f8 dd       	rcall	.-1040   	; 0x1c50 <xTimerGenericCommand>
    2060:	27 c0       	rjmp	.+78     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2062:	d5 01       	movw	r26, r10
    2064:	56 96       	adiw	r26, 0x16	; 22
    2066:	8c 91       	ld	r24, X
    2068:	56 97       	sbiw	r26, 0x16	; 22
    206a:	8e 7f       	andi	r24, 0xFE	; 254
    206c:	56 96       	adiw	r26, 0x16	; 22
    206e:	8c 93       	st	X, r24
                        break;
    2070:	1f c0       	rjmp	.+62     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2072:	f5 01       	movw	r30, r10
    2074:	86 89       	ldd	r24, Z+22	; 0x16
    2076:	81 60       	ori	r24, 0x01	; 1
    2078:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    207a:	4a 81       	ldd	r20, Y+2	; 0x02
    207c:	5b 81       	ldd	r21, Y+3	; 0x03
    207e:	6c 81       	ldd	r22, Y+4	; 0x04
    2080:	7d 81       	ldd	r23, Y+5	; 0x05
    2082:	46 87       	std	Z+14, r20	; 0x0e
    2084:	57 87       	std	Z+15, r21	; 0x0f
    2086:	60 8b       	std	Z+16, r22	; 0x10
    2088:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    208a:	40 0f       	add	r20, r16
    208c:	51 1f       	adc	r21, r17
    208e:	62 1f       	adc	r22, r18
    2090:	73 1f       	adc	r23, r19
    2092:	68 01       	movw	r12, r16
    2094:	79 01       	movw	r14, r18
    2096:	c5 01       	movw	r24, r10
    2098:	49 dd       	rcall	.-1390   	; 0x1b2c <prvInsertTimerInActiveList>
                        break;
    209a:	0a c0       	rjmp	.+20     	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    209c:	f5 01       	movw	r30, r10
    209e:	86 89       	ldd	r24, Z+22	; 0x16
    20a0:	81 fd       	sbrc	r24, 1
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <__DATA_REGION_LENGTH__+0xac>
                                {
                                    vPortFree( pxTimer );
    20a4:	c5 01       	movw	r24, r10
    20a6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <vPortFree>
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <__DATA_REGION_LENGTH__+0xb0>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    20ac:	8e 7f       	andi	r24, 0xFE	; 254
    20ae:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	a9 01       	movw	r20, r18
    20b6:	be 01       	movw	r22, r28
    20b8:	6f 5f       	subi	r22, 0xFF	; 255
    20ba:	7f 4f       	sbci	r23, 0xFF	; 255
    20bc:	80 91 f3 0c 	lds	r24, 0x0CF3	; 0x800cf3 <xTimerQueue>
    20c0:	90 91 f4 0c 	lds	r25, 0x0CF4	; 0x800cf4 <xTimerQueue+0x1>
    20c4:	0e 94 b3 05 	call	0xb66	; 0xb66 <xQueueReceive>
    20c8:	81 11       	cpse	r24, r1
    20ca:	71 cf       	rjmp	.-286    	; 0x1fae <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    20cc:	28 96       	adiw	r28, 0x08	; 8
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	df 90       	pop	r13
    20e6:	cf 90       	pop	r12
    20e8:	bf 90       	pop	r11
    20ea:	af 90       	pop	r10
    20ec:	08 95       	ret

000020ee <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    20ee:	08 95       	ret

000020f0 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    20f0:	84 b1       	in	r24, 0x04	; 4
    20f2:	80 68       	ori	r24, 0x80	; 128
    20f4:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    20f6:	85 b1       	in	r24, 0x05	; 5
    20f8:	80 68       	ori	r24, 0x80	; 128
    20fa:	85 b9       	out	0x05, r24	; 5
    20fc:	08 95       	ret

000020fe <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    20fe:	83 b1       	in	r24, 0x03	; 3
    2100:	80 68       	ori	r24, 0x80	; 128
    2102:	83 b9       	out	0x03, r24	; 3
    2104:	08 95       	ret

00002106 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2106:	f4 df       	rcall	.-24     	; 0x20f0 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2108:	2f ef       	ldi	r18, 0xFF	; 255
    210a:	80 e7       	ldi	r24, 0x70	; 112
    210c:	92 e0       	ldi	r25, 0x02	; 2
    210e:	21 50       	subi	r18, 0x01	; 1
    2110:	80 40       	sbci	r24, 0x00	; 0
    2112:	90 40       	sbci	r25, 0x00	; 0
    2114:	e1 f7       	brne	.-8      	; 0x210e <vApplicationMallocFailedHook+0x8>
    2116:	00 c0       	rjmp	.+0      	; 0x2118 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2118:	00 00       	nop
    211a:	f1 df       	rcall	.-30     	; 0x20fe <prvBlinkMainLed>
    211c:	f5 cf       	rjmp	.-22     	; 0x2108 <vApplicationMallocFailedHook+0x2>

0000211e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    211e:	e8 df       	rcall	.-48     	; 0x20f0 <prvSetMainLedOn>
    2120:	2f ef       	ldi	r18, 0xFF	; 255
    2122:	87 ea       	ldi	r24, 0xA7	; 167
    2124:	91 e6       	ldi	r25, 0x61	; 97
    2126:	21 50       	subi	r18, 0x01	; 1
    2128:	80 40       	sbci	r24, 0x00	; 0
    212a:	90 40       	sbci	r25, 0x00	; 0
    212c:	e1 f7       	brne	.-8      	; 0x2126 <vApplicationStackOverflowHook+0x8>
    212e:	00 c0       	rjmp	.+0      	; 0x2130 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2130:	00 00       	nop
    2132:	e5 df       	rcall	.-54     	; 0x20fe <prvBlinkMainLed>
    2134:	f5 cf       	rjmp	.-22     	; 0x2120 <vApplicationStackOverflowHook+0x2>

00002136 <task2>:
void task2(void * pvParameters)
{
	while(1)
	{
		//send data on pin 0 and 2
		printf("Sending signal \n");
    2136:	8a e2       	ldi	r24, 0x2A	; 42
    2138:	92 e0       	ldi	r25, 0x02	; 2
    213a:	f3 d6       	rcall	.+3558   	; 0x2f22 <puts>
		PORTA = PORTA & 0b11111010;
    213c:	82 b1       	in	r24, 0x02	; 2
    213e:	8a 7f       	andi	r24, 0xFA	; 250
    2140:	82 b9       	out	0x02, r24	; 2
		vTaskDelay(pdMS_TO_TICKS(1000));
    2142:	6e e3       	ldi	r22, 0x3E	; 62
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	5f da       	rcall	.-2882   	; 0x160a <vTaskDelay>
    214c:	f4 cf       	rjmp	.-24     	; 0x2136 <task2>

0000214e <initialiseSystem>:
//
 ///*-----------------------------------------------------------*/
 void initialiseSystem()
 {
	 // Set PORTA pin 0 and pin 2 to output
	 DDRA = 0b00000101;
    214e:	85 e0       	ldi	r24, 0x05	; 5
    2150:	81 b9       	out	0x01, r24	; 1
	 
	 // Set PORTD pin 1, 3 to pull up on input
	 PORTA |= _BV(PIND1) | _BV(PIND3);
    2152:	82 b1       	in	r24, 0x02	; 2
    2154:	8a 60       	ori	r24, 0x0A	; 10
    2156:	82 b9       	out	0x02, r24	; 2
	 //PORTC |= _BV(PINC0) | _BV(PINC1)| _BV(PINC2) | _BV(PINC3) | _BV(PINC4) | _BV(PINC5);
	 
	 // Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	 stdio_initialise(ser_USART0);
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	38 c0       	rjmp	.+112    	; 0x21cc <stdio_initialise>
    215c:	08 95       	ret

0000215e <main>:
TimerHandle_t timer1;
TimerHandle_t timer2;
TimerHandle_t timer3;

 int main(void)
 {	
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
	initialiseSystem();
    2164:	f4 df       	rcall	.-24     	; 0x214e <initialiseSystem>
	
	xTaskCreate(
    2166:	e1 2c       	mov	r14, r1
    2168:	f1 2c       	mov	r15, r1
    216a:	01 e0       	ldi	r16, 0x01	; 1
    216c:	21 e0       	ldi	r18, 0x01	; 1
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 e9       	ldi	r20, 0x90	; 144
    2172:	51 e0       	ldi	r21, 0x01	; 1
    2174:	6a e3       	ldi	r22, 0x3A	; 58
    2176:	72 e0       	ldi	r23, 0x02	; 2
    2178:	8b e9       	ldi	r24, 0x9B	; 155
    217a:	90 e1       	ldi	r25, 0x10	; 16
    217c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <xTaskCreate>
		400,
		(void *) 1,
		1,
		NULL
	);
	vTaskStartScheduler();
    2180:	0e 94 ac 08 	call	0x1158	; 0x1158 <vTaskStartScheduler>
 }
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	08 95       	ret

00002190 <usart_getchar>:
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	1f 92       	push	r1
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	be 01       	movw	r22, r28
    219c:	6f 5f       	subi	r22, 0xFF	; 255
    219e:	7f 4f       	sbci	r23, 0xFF	; 255
    21a0:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <_com_serial_instance>
    21a4:	90 91 10 0d 	lds	r25, 0x0D10	; 0x800d10 <_com_serial_instance+0x1>
    21a8:	01 d1       	rcall	.+514    	; 0x23ac <serial_getByte>
    21aa:	81 11       	cpse	r24, r1
    21ac:	f6 cf       	rjmp	.-20     	; 0x219a <usart_getchar+0xa>
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0f 90       	pop	r0
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	08 95       	ret

000021ba <usart_putchar>:
    21ba:	68 2f       	mov	r22, r24
    21bc:	80 91 0f 0d 	lds	r24, 0x0D0F	; 0x800d0f <_com_serial_instance>
    21c0:	90 91 10 0d 	lds	r25, 0x0D10	; 0x800d10 <_com_serial_instance+0x1>
    21c4:	c8 d0       	rcall	.+400    	; 0x2356 <serial_sendByte>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	08 95       	ret

000021cc <stdio_initialise>:
    21cc:	8f 92       	push	r8
    21ce:	9f 92       	push	r9
    21d0:	af 92       	push	r10
    21d2:	cf 92       	push	r12
    21d4:	ef 92       	push	r14
    21d6:	0f 93       	push	r16
    21d8:	81 2c       	mov	r8, r1
    21da:	91 2c       	mov	r9, r1
    21dc:	68 94       	set
    21de:	aa 24       	eor	r10, r10
    21e0:	a7 f8       	bld	r10, 7
    21e2:	68 94       	set
    21e4:	cc 24       	eor	r12, r12
    21e6:	c7 f8       	bld	r12, 7
    21e8:	e1 2c       	mov	r14, r1
    21ea:	00 e0       	ldi	r16, 0x00	; 0
    21ec:	23 e0       	ldi	r18, 0x03	; 3
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	51 ee       	ldi	r21, 0xE1	; 225
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	70 e0       	ldi	r23, 0x00	; 0
    21f6:	13 d0       	rcall	.+38     	; 0x221e <serial_create>
    21f8:	90 93 10 0d 	sts	0x0D10, r25	; 0x800d10 <_com_serial_instance+0x1>
    21fc:	80 93 0f 0d 	sts	0x0D0F, r24	; 0x800d0f <_com_serial_instance>
    2200:	ed e1       	ldi	r30, 0x1D	; 29
    2202:	fd e0       	ldi	r31, 0x0D	; 13
    2204:	87 e0       	ldi	r24, 0x07	; 7
    2206:	92 e0       	ldi	r25, 0x02	; 2
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	80 83       	st	Z, r24
    220c:	93 83       	std	Z+3, r25	; 0x03
    220e:	82 83       	std	Z+2, r24	; 0x02
    2210:	0f 91       	pop	r16
    2212:	ef 90       	pop	r14
    2214:	cf 90       	pop	r12
    2216:	af 90       	pop	r10
    2218:	9f 90       	pop	r9
    221a:	8f 90       	pop	r8
    221c:	08 95       	ret

0000221e <serial_create>:
    221e:	2f 92       	push	r2
    2220:	3f 92       	push	r3
    2222:	4f 92       	push	r4
    2224:	5f 92       	push	r5
    2226:	6f 92       	push	r6
    2228:	7f 92       	push	r7
    222a:	8f 92       	push	r8
    222c:	9f 92       	push	r9
    222e:	af 92       	push	r10
    2230:	cf 92       	push	r12
    2232:	ef 92       	push	r14
    2234:	ff 92       	push	r15
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	f8 2e       	mov	r15, r24
    2244:	2a 01       	movw	r4, r20
    2246:	3b 01       	movw	r6, r22
    2248:	88 e0       	ldi	r24, 0x08	; 8
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	35 d5       	rcall	.+2666   	; 0x2cb8 <malloc>
    224e:	8c 01       	movw	r16, r24
    2250:	8f 2d       	mov	r24, r15
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	fc 01       	movw	r30, r24
    2256:	ee 0f       	add	r30, r30
    2258:	ff 1f       	adc	r31, r31
    225a:	ef 5e       	subi	r30, 0xEF	; 239
    225c:	f2 4f       	sbci	r31, 0xF2	; 242
    225e:	11 83       	std	Z+1, r17	; 0x01
    2260:	00 83       	st	Z, r16
    2262:	01 15       	cp	r16, r1
    2264:	11 05       	cpc	r17, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <serial_create+0x4c>
    2268:	64 c0       	rjmp	.+200    	; 0x2332 <serial_create+0x114>
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	fc 01       	movw	r30, r24
    2270:	eb 5e       	subi	r30, 0xEB	; 235
    2272:	fd 4f       	sbci	r31, 0xFD	; 253
    2274:	80 81       	ld	r24, Z
    2276:	91 81       	ldd	r25, Z+1	; 0x01
    2278:	d8 01       	movw	r26, r16
    227a:	8d 93       	st	X+, r24
    227c:	9c 93       	st	X, r25
    227e:	8c 2d       	mov	r24, r12
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	88 0f       	add	r24, r24
    2284:	99 1f       	adc	r25, r25
    2286:	88 0f       	add	r24, r24
    2288:	99 1f       	adc	r25, r25
    228a:	16 d5       	rcall	.+2604   	; 0x2cb8 <malloc>
    228c:	1c 01       	movw	r2, r24
    228e:	86 e0       	ldi	r24, 0x06	; 6
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	12 d5       	rcall	.+2596   	; 0x2cb8 <malloc>
    2294:	7c 01       	movw	r14, r24
    2296:	4c 2d       	mov	r20, r12
    2298:	b1 01       	movw	r22, r2
    229a:	00 d3       	rcall	.+1536   	; 0x289c <fifo_init>
    229c:	f8 01       	movw	r30, r16
    229e:	f5 82       	std	Z+5, r15	; 0x05
    22a0:	e4 82       	std	Z+4, r14	; 0x04
    22a2:	8a 2d       	mov	r24, r10
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	04 d5       	rcall	.+2568   	; 0x2cb8 <malloc>
    22b0:	1c 01       	movw	r2, r24
    22b2:	86 e0       	ldi	r24, 0x06	; 6
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	00 d5       	rcall	.+2560   	; 0x2cb8 <malloc>
    22b8:	7c 01       	movw	r14, r24
    22ba:	4a 2d       	mov	r20, r10
    22bc:	b1 01       	movw	r22, r2
    22be:	ee d2       	rcall	.+1500   	; 0x289c <fifo_init>
    22c0:	d8 01       	movw	r26, r16
    22c2:	13 96       	adiw	r26, 0x03	; 3
    22c4:	fc 92       	st	X, r15
    22c6:	ee 92       	st	-X, r14
    22c8:	12 97       	sbiw	r26, 0x02	; 2
    22ca:	17 96       	adiw	r26, 0x07	; 7
    22cc:	9c 92       	st	X, r9
    22ce:	8e 92       	st	-X, r8
    22d0:	16 97       	sbiw	r26, 0x06	; 6
    22d2:	ff b6       	in	r15, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	ed 91       	ld	r30, X+
    22d8:	fc 91       	ld	r31, X
    22da:	11 97       	sbiw	r26, 0x01	; 1
    22dc:	36 97       	sbiw	r30, 0x06	; 6
    22de:	80 81       	ld	r24, Z
    22e0:	82 60       	ori	r24, 0x02	; 2
    22e2:	80 83       	st	Z, r24
    22e4:	8d 90       	ld	r8, X+
    22e6:	9c 90       	ld	r9, X
    22e8:	c3 01       	movw	r24, r6
    22ea:	b2 01       	movw	r22, r4
    22ec:	ec d3       	rcall	.+2008   	; 0x2ac6 <__floatunsisf>
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	75 d4       	rcall	.+2282   	; 0x2be2 <__mulsf3>
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	74 e2       	ldi	r23, 0x24	; 36
    2300:	84 e7       	ldi	r24, 0x74	; 116
    2302:	9b e4       	ldi	r25, 0x4B	; 75
    2304:	4c d3       	rcall	.+1688   	; 0x299e <__divsf3>
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	e2 d2       	rcall	.+1476   	; 0x28d4 <__subsf3>
    2310:	ae d3       	rcall	.+1884   	; 0x2a6e <__fixunssfsi>
    2312:	f4 01       	movw	r30, r8
    2314:	32 97       	sbiw	r30, 0x02	; 2
    2316:	60 83       	st	Z, r22
    2318:	d8 01       	movw	r26, r16
    231a:	ed 91       	ld	r30, X+
    231c:	fc 91       	ld	r31, X
    231e:	11 97       	sbiw	r26, 0x01	; 1
    2320:	35 97       	sbiw	r30, 0x05	; 5
    2322:	88 e9       	ldi	r24, 0x98	; 152
    2324:	80 83       	st	Z, r24
    2326:	ed 91       	ld	r30, X+
    2328:	fc 91       	ld	r31, X
    232a:	34 97       	sbiw	r30, 0x04	; 4
    232c:	86 e0       	ldi	r24, 0x06	; 6
    232e:	80 83       	st	Z, r24
    2330:	ff be       	out	0x3f, r15	; 63
    2332:	c8 01       	movw	r24, r16
    2334:	df 91       	pop	r29
    2336:	cf 91       	pop	r28
    2338:	1f 91       	pop	r17
    233a:	0f 91       	pop	r16
    233c:	ff 90       	pop	r15
    233e:	ef 90       	pop	r14
    2340:	cf 90       	pop	r12
    2342:	af 90       	pop	r10
    2344:	9f 90       	pop	r9
    2346:	8f 90       	pop	r8
    2348:	7f 90       	pop	r7
    234a:	6f 90       	pop	r6
    234c:	5f 90       	pop	r5
    234e:	4f 90       	pop	r4
    2350:	3f 90       	pop	r3
    2352:	2f 90       	pop	r2
    2354:	08 95       	ret

00002356 <serial_sendByte>:
    2356:	cf 93       	push	r28
    2358:	df 93       	push	r29
    235a:	dc 01       	movw	r26, r24
    235c:	89 2b       	or	r24, r25
    235e:	01 f1       	breq	.+64     	; 0x23a0 <serial_sendByte+0x4a>
    2360:	12 96       	adiw	r26, 0x02	; 2
    2362:	ed 91       	ld	r30, X+
    2364:	fc 91       	ld	r31, X
    2366:	13 97       	sbiw	r26, 0x03	; 3
    2368:	93 81       	ldd	r25, Z+3	; 0x03
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	25 81       	ldd	r18, Z+5	; 0x05
    236e:	98 1b       	sub	r25, r24
    2370:	92 23       	and	r25, r18
    2372:	84 81       	ldd	r24, Z+4	; 0x04
    2374:	98 17       	cp	r25, r24
    2376:	b1 f0       	breq	.+44     	; 0x23a4 <serial_sendByte+0x4e>
    2378:	83 81       	ldd	r24, Z+3	; 0x03
    237a:	26 95       	lsr	r18
    237c:	28 23       	and	r18, r24
    237e:	c0 81       	ld	r28, Z
    2380:	d1 81       	ldd	r29, Z+1	; 0x01
    2382:	c2 0f       	add	r28, r18
    2384:	d1 1d       	adc	r29, r1
    2386:	68 83       	st	Y, r22
    2388:	8f 5f       	subi	r24, 0xFF	; 255
    238a:	95 81       	ldd	r25, Z+5	; 0x05
    238c:	89 23       	and	r24, r25
    238e:	83 83       	std	Z+3, r24	; 0x03
    2390:	ed 91       	ld	r30, X+
    2392:	fc 91       	ld	r31, X
    2394:	35 97       	sbiw	r30, 0x05	; 5
    2396:	80 81       	ld	r24, Z
    2398:	80 62       	ori	r24, 0x20	; 32
    239a:	80 83       	st	Z, r24
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	03 c0       	rjmp	.+6      	; 0x23a6 <serial_sendByte+0x50>
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	01 c0       	rjmp	.+2      	; 0x23a6 <serial_sendByte+0x50>
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	08 95       	ret

000023ac <serial_getByte>:
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	d1 f0       	breq	.+52     	; 0x23e4 <serial_getByte+0x38>
    23b0:	dc 01       	movw	r26, r24
    23b2:	14 96       	adiw	r26, 0x04	; 4
    23b4:	ed 91       	ld	r30, X+
    23b6:	fc 91       	ld	r31, X
    23b8:	15 97       	sbiw	r26, 0x05	; 5
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	98 17       	cp	r25, r24
    23c0:	99 f0       	breq	.+38     	; 0x23e8 <serial_getByte+0x3c>
    23c2:	92 81       	ldd	r25, Z+2	; 0x02
    23c4:	85 81       	ldd	r24, Z+5	; 0x05
    23c6:	86 95       	lsr	r24
    23c8:	89 23       	and	r24, r25
    23ca:	a0 81       	ld	r26, Z
    23cc:	b1 81       	ldd	r27, Z+1	; 0x01
    23ce:	a8 0f       	add	r26, r24
    23d0:	b1 1d       	adc	r27, r1
    23d2:	8c 91       	ld	r24, X
    23d4:	db 01       	movw	r26, r22
    23d6:	8c 93       	st	X, r24
    23d8:	9f 5f       	subi	r25, 0xFF	; 255
    23da:	85 81       	ldd	r24, Z+5	; 0x05
    23dc:	98 23       	and	r25, r24
    23de:	92 83       	std	Z+2, r25	; 0x02
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	08 95       	ret
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	08 95       	ret
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	08 95       	ret

000023ec <__vector_25>:
    23ec:	1f 92       	push	r1
    23ee:	0f 92       	push	r0
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	0f 92       	push	r0
    23f4:	11 24       	eor	r1, r1
    23f6:	0b b6       	in	r0, 0x3b	; 59
    23f8:	0f 92       	push	r0
    23fa:	2f 93       	push	r18
    23fc:	3f 93       	push	r19
    23fe:	4f 93       	push	r20
    2400:	5f 93       	push	r21
    2402:	6f 93       	push	r22
    2404:	7f 93       	push	r23
    2406:	8f 93       	push	r24
    2408:	9f 93       	push	r25
    240a:	af 93       	push	r26
    240c:	bf 93       	push	r27
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	ef 93       	push	r30
    2414:	ff 93       	push	r31
    2416:	a0 91 11 0d 	lds	r26, 0x0D11	; 0x800d11 <_ser_handle>
    241a:	b0 91 12 0d 	lds	r27, 0x0D12	; 0x800d12 <_ser_handle+0x1>
    241e:	10 97       	sbiw	r26, 0x00	; 0
    2420:	11 f1       	breq	.+68     	; 0x2466 <__vector_25+0x7a>
    2422:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2426:	14 96       	adiw	r26, 0x04	; 4
    2428:	ed 91       	ld	r30, X+
    242a:	fc 91       	ld	r31, X
    242c:	15 97       	sbiw	r26, 0x05	; 5
    242e:	93 81       	ldd	r25, Z+3	; 0x03
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	25 81       	ldd	r18, Z+5	; 0x05
    2434:	98 1b       	sub	r25, r24
    2436:	92 23       	and	r25, r18
    2438:	84 81       	ldd	r24, Z+4	; 0x04
    243a:	98 17       	cp	r25, r24
    243c:	61 f0       	breq	.+24     	; 0x2456 <__vector_25+0x6a>
    243e:	83 81       	ldd	r24, Z+3	; 0x03
    2440:	26 95       	lsr	r18
    2442:	28 23       	and	r18, r24
    2444:	c0 81       	ld	r28, Z
    2446:	d1 81       	ldd	r29, Z+1	; 0x01
    2448:	c2 0f       	add	r28, r18
    244a:	d1 1d       	adc	r29, r1
    244c:	68 83       	st	Y, r22
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	95 81       	ldd	r25, Z+5	; 0x05
    2452:	89 23       	and	r24, r25
    2454:	83 83       	std	Z+3, r24	; 0x03
    2456:	16 96       	adiw	r26, 0x06	; 6
    2458:	ed 91       	ld	r30, X+
    245a:	fc 91       	ld	r31, X
    245c:	17 97       	sbiw	r26, 0x07	; 7
    245e:	30 97       	sbiw	r30, 0x00	; 0
    2460:	11 f0       	breq	.+4      	; 0x2466 <__vector_25+0x7a>
    2462:	cd 01       	movw	r24, r26
    2464:	19 95       	eicall
    2466:	ff 91       	pop	r31
    2468:	ef 91       	pop	r30
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	bf 91       	pop	r27
    2470:	af 91       	pop	r26
    2472:	9f 91       	pop	r25
    2474:	8f 91       	pop	r24
    2476:	7f 91       	pop	r23
    2478:	6f 91       	pop	r22
    247a:	5f 91       	pop	r21
    247c:	4f 91       	pop	r20
    247e:	3f 91       	pop	r19
    2480:	2f 91       	pop	r18
    2482:	0f 90       	pop	r0
    2484:	0b be       	out	0x3b, r0	; 59
    2486:	0f 90       	pop	r0
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	0f 90       	pop	r0
    248c:	1f 90       	pop	r1
    248e:	18 95       	reti

00002490 <__vector_26>:
    2490:	1f 92       	push	r1
    2492:	0f 92       	push	r0
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	0f 92       	push	r0
    2498:	11 24       	eor	r1, r1
    249a:	0b b6       	in	r0, 0x3b	; 59
    249c:	0f 92       	push	r0
    249e:	2f 93       	push	r18
    24a0:	8f 93       	push	r24
    24a2:	9f 93       	push	r25
    24a4:	af 93       	push	r26
    24a6:	bf 93       	push	r27
    24a8:	ef 93       	push	r30
    24aa:	ff 93       	push	r31
    24ac:	e0 91 11 0d 	lds	r30, 0x0D11	; 0x800d11 <_ser_handle>
    24b0:	f0 91 12 0d 	lds	r31, 0x0D12	; 0x800d12 <_ser_handle+0x1>
    24b4:	30 97       	sbiw	r30, 0x00	; 0
    24b6:	b9 f0       	breq	.+46     	; 0x24e6 <__vector_26+0x56>
    24b8:	02 80       	ldd	r0, Z+2	; 0x02
    24ba:	f3 81       	ldd	r31, Z+3	; 0x03
    24bc:	e0 2d       	mov	r30, r0
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	98 17       	cp	r25, r24
    24c4:	b1 f0       	breq	.+44     	; 0x24f2 <__vector_26+0x62>
    24c6:	92 81       	ldd	r25, Z+2	; 0x02
    24c8:	85 81       	ldd	r24, Z+5	; 0x05
    24ca:	28 2f       	mov	r18, r24
    24cc:	26 95       	lsr	r18
    24ce:	29 23       	and	r18, r25
    24d0:	a0 81       	ld	r26, Z
    24d2:	b1 81       	ldd	r27, Z+1	; 0x01
    24d4:	a2 0f       	add	r26, r18
    24d6:	b1 1d       	adc	r27, r1
    24d8:	2c 91       	ld	r18, X
    24da:	9f 5f       	subi	r25, 0xFF	; 255
    24dc:	89 23       	and	r24, r25
    24de:	82 83       	std	Z+2, r24	; 0x02
    24e0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <__vector_26+0x6c>
    24e6:	e1 ec       	ldi	r30, 0xC1	; 193
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	8f 7d       	andi	r24, 0xDF	; 223
    24ee:	80 83       	st	Z, r24
    24f0:	05 c0       	rjmp	.+10     	; 0x24fc <__vector_26+0x6c>
    24f2:	e1 ec       	ldi	r30, 0xC1	; 193
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	8f 7d       	andi	r24, 0xDF	; 223
    24fa:	80 83       	st	Z, r24
    24fc:	ff 91       	pop	r31
    24fe:	ef 91       	pop	r30
    2500:	bf 91       	pop	r27
    2502:	af 91       	pop	r26
    2504:	9f 91       	pop	r25
    2506:	8f 91       	pop	r24
    2508:	2f 91       	pop	r18
    250a:	0f 90       	pop	r0
    250c:	0b be       	out	0x3b, r0	; 59
    250e:	0f 90       	pop	r0
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	0f 90       	pop	r0
    2514:	1f 90       	pop	r1
    2516:	18 95       	reti

00002518 <__vector_36>:
    2518:	1f 92       	push	r1
    251a:	0f 92       	push	r0
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	0f 92       	push	r0
    2520:	11 24       	eor	r1, r1
    2522:	0b b6       	in	r0, 0x3b	; 59
    2524:	0f 92       	push	r0
    2526:	2f 93       	push	r18
    2528:	3f 93       	push	r19
    252a:	4f 93       	push	r20
    252c:	5f 93       	push	r21
    252e:	6f 93       	push	r22
    2530:	7f 93       	push	r23
    2532:	8f 93       	push	r24
    2534:	9f 93       	push	r25
    2536:	af 93       	push	r26
    2538:	bf 93       	push	r27
    253a:	cf 93       	push	r28
    253c:	df 93       	push	r29
    253e:	ef 93       	push	r30
    2540:	ff 93       	push	r31
    2542:	a0 91 13 0d 	lds	r26, 0x0D13	; 0x800d13 <_ser_handle+0x2>
    2546:	b0 91 14 0d 	lds	r27, 0x0D14	; 0x800d14 <_ser_handle+0x3>
    254a:	10 97       	sbiw	r26, 0x00	; 0
    254c:	11 f1       	breq	.+68     	; 0x2592 <__vector_36+0x7a>
    254e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2552:	14 96       	adiw	r26, 0x04	; 4
    2554:	ed 91       	ld	r30, X+
    2556:	fc 91       	ld	r31, X
    2558:	15 97       	sbiw	r26, 0x05	; 5
    255a:	93 81       	ldd	r25, Z+3	; 0x03
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	25 81       	ldd	r18, Z+5	; 0x05
    2560:	98 1b       	sub	r25, r24
    2562:	92 23       	and	r25, r18
    2564:	84 81       	ldd	r24, Z+4	; 0x04
    2566:	98 17       	cp	r25, r24
    2568:	61 f0       	breq	.+24     	; 0x2582 <__vector_36+0x6a>
    256a:	83 81       	ldd	r24, Z+3	; 0x03
    256c:	26 95       	lsr	r18
    256e:	28 23       	and	r18, r24
    2570:	c0 81       	ld	r28, Z
    2572:	d1 81       	ldd	r29, Z+1	; 0x01
    2574:	c2 0f       	add	r28, r18
    2576:	d1 1d       	adc	r29, r1
    2578:	68 83       	st	Y, r22
    257a:	8f 5f       	subi	r24, 0xFF	; 255
    257c:	95 81       	ldd	r25, Z+5	; 0x05
    257e:	89 23       	and	r24, r25
    2580:	83 83       	std	Z+3, r24	; 0x03
    2582:	16 96       	adiw	r26, 0x06	; 6
    2584:	ed 91       	ld	r30, X+
    2586:	fc 91       	ld	r31, X
    2588:	17 97       	sbiw	r26, 0x07	; 7
    258a:	30 97       	sbiw	r30, 0x00	; 0
    258c:	11 f0       	breq	.+4      	; 0x2592 <__vector_36+0x7a>
    258e:	cd 01       	movw	r24, r26
    2590:	19 95       	eicall
    2592:	ff 91       	pop	r31
    2594:	ef 91       	pop	r30
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	bf 91       	pop	r27
    259c:	af 91       	pop	r26
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	7f 91       	pop	r23
    25a4:	6f 91       	pop	r22
    25a6:	5f 91       	pop	r21
    25a8:	4f 91       	pop	r20
    25aa:	3f 91       	pop	r19
    25ac:	2f 91       	pop	r18
    25ae:	0f 90       	pop	r0
    25b0:	0b be       	out	0x3b, r0	; 59
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	0f 90       	pop	r0
    25b8:	1f 90       	pop	r1
    25ba:	18 95       	reti

000025bc <__vector_37>:
    25bc:	1f 92       	push	r1
    25be:	0f 92       	push	r0
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	0f 92       	push	r0
    25c4:	11 24       	eor	r1, r1
    25c6:	0b b6       	in	r0, 0x3b	; 59
    25c8:	0f 92       	push	r0
    25ca:	2f 93       	push	r18
    25cc:	8f 93       	push	r24
    25ce:	9f 93       	push	r25
    25d0:	af 93       	push	r26
    25d2:	bf 93       	push	r27
    25d4:	ef 93       	push	r30
    25d6:	ff 93       	push	r31
    25d8:	e0 91 13 0d 	lds	r30, 0x0D13	; 0x800d13 <_ser_handle+0x2>
    25dc:	f0 91 14 0d 	lds	r31, 0x0D14	; 0x800d14 <_ser_handle+0x3>
    25e0:	30 97       	sbiw	r30, 0x00	; 0
    25e2:	b9 f0       	breq	.+46     	; 0x2612 <__vector_37+0x56>
    25e4:	02 80       	ldd	r0, Z+2	; 0x02
    25e6:	f3 81       	ldd	r31, Z+3	; 0x03
    25e8:	e0 2d       	mov	r30, r0
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	98 17       	cp	r25, r24
    25f0:	b1 f0       	breq	.+44     	; 0x261e <__vector_37+0x62>
    25f2:	92 81       	ldd	r25, Z+2	; 0x02
    25f4:	85 81       	ldd	r24, Z+5	; 0x05
    25f6:	28 2f       	mov	r18, r24
    25f8:	26 95       	lsr	r18
    25fa:	29 23       	and	r18, r25
    25fc:	a0 81       	ld	r26, Z
    25fe:	b1 81       	ldd	r27, Z+1	; 0x01
    2600:	a2 0f       	add	r26, r18
    2602:	b1 1d       	adc	r27, r1
    2604:	2c 91       	ld	r18, X
    2606:	9f 5f       	subi	r25, 0xFF	; 255
    2608:	89 23       	and	r24, r25
    260a:	82 83       	std	Z+2, r24	; 0x02
    260c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2610:	0b c0       	rjmp	.+22     	; 0x2628 <__vector_37+0x6c>
    2612:	e9 ec       	ldi	r30, 0xC9	; 201
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	8f 7d       	andi	r24, 0xDF	; 223
    261a:	80 83       	st	Z, r24
    261c:	05 c0       	rjmp	.+10     	; 0x2628 <__vector_37+0x6c>
    261e:	e9 ec       	ldi	r30, 0xC9	; 201
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	8f 7d       	andi	r24, 0xDF	; 223
    2626:	80 83       	st	Z, r24
    2628:	ff 91       	pop	r31
    262a:	ef 91       	pop	r30
    262c:	bf 91       	pop	r27
    262e:	af 91       	pop	r26
    2630:	9f 91       	pop	r25
    2632:	8f 91       	pop	r24
    2634:	2f 91       	pop	r18
    2636:	0f 90       	pop	r0
    2638:	0b be       	out	0x3b, r0	; 59
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	0f 90       	pop	r0
    2640:	1f 90       	pop	r1
    2642:	18 95       	reti

00002644 <__vector_51>:
    2644:	1f 92       	push	r1
    2646:	0f 92       	push	r0
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	0f 92       	push	r0
    264c:	11 24       	eor	r1, r1
    264e:	0b b6       	in	r0, 0x3b	; 59
    2650:	0f 92       	push	r0
    2652:	2f 93       	push	r18
    2654:	3f 93       	push	r19
    2656:	4f 93       	push	r20
    2658:	5f 93       	push	r21
    265a:	6f 93       	push	r22
    265c:	7f 93       	push	r23
    265e:	8f 93       	push	r24
    2660:	9f 93       	push	r25
    2662:	af 93       	push	r26
    2664:	bf 93       	push	r27
    2666:	cf 93       	push	r28
    2668:	df 93       	push	r29
    266a:	ef 93       	push	r30
    266c:	ff 93       	push	r31
    266e:	a0 91 15 0d 	lds	r26, 0x0D15	; 0x800d15 <_ser_handle+0x4>
    2672:	b0 91 16 0d 	lds	r27, 0x0D16	; 0x800d16 <_ser_handle+0x5>
    2676:	10 97       	sbiw	r26, 0x00	; 0
    2678:	11 f1       	breq	.+68     	; 0x26be <__vector_51+0x7a>
    267a:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    267e:	14 96       	adiw	r26, 0x04	; 4
    2680:	ed 91       	ld	r30, X+
    2682:	fc 91       	ld	r31, X
    2684:	15 97       	sbiw	r26, 0x05	; 5
    2686:	93 81       	ldd	r25, Z+3	; 0x03
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	25 81       	ldd	r18, Z+5	; 0x05
    268c:	98 1b       	sub	r25, r24
    268e:	92 23       	and	r25, r18
    2690:	84 81       	ldd	r24, Z+4	; 0x04
    2692:	98 17       	cp	r25, r24
    2694:	61 f0       	breq	.+24     	; 0x26ae <__vector_51+0x6a>
    2696:	83 81       	ldd	r24, Z+3	; 0x03
    2698:	26 95       	lsr	r18
    269a:	28 23       	and	r18, r24
    269c:	c0 81       	ld	r28, Z
    269e:	d1 81       	ldd	r29, Z+1	; 0x01
    26a0:	c2 0f       	add	r28, r18
    26a2:	d1 1d       	adc	r29, r1
    26a4:	68 83       	st	Y, r22
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	95 81       	ldd	r25, Z+5	; 0x05
    26aa:	89 23       	and	r24, r25
    26ac:	83 83       	std	Z+3, r24	; 0x03
    26ae:	16 96       	adiw	r26, 0x06	; 6
    26b0:	ed 91       	ld	r30, X+
    26b2:	fc 91       	ld	r31, X
    26b4:	17 97       	sbiw	r26, 0x07	; 7
    26b6:	30 97       	sbiw	r30, 0x00	; 0
    26b8:	11 f0       	breq	.+4      	; 0x26be <__vector_51+0x7a>
    26ba:	cd 01       	movw	r24, r26
    26bc:	19 95       	eicall
    26be:	ff 91       	pop	r31
    26c0:	ef 91       	pop	r30
    26c2:	df 91       	pop	r29
    26c4:	cf 91       	pop	r28
    26c6:	bf 91       	pop	r27
    26c8:	af 91       	pop	r26
    26ca:	9f 91       	pop	r25
    26cc:	8f 91       	pop	r24
    26ce:	7f 91       	pop	r23
    26d0:	6f 91       	pop	r22
    26d2:	5f 91       	pop	r21
    26d4:	4f 91       	pop	r20
    26d6:	3f 91       	pop	r19
    26d8:	2f 91       	pop	r18
    26da:	0f 90       	pop	r0
    26dc:	0b be       	out	0x3b, r0	; 59
    26de:	0f 90       	pop	r0
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	0f 90       	pop	r0
    26e4:	1f 90       	pop	r1
    26e6:	18 95       	reti

000026e8 <__vector_52>:
    26e8:	1f 92       	push	r1
    26ea:	0f 92       	push	r0
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	0f 92       	push	r0
    26f0:	11 24       	eor	r1, r1
    26f2:	0b b6       	in	r0, 0x3b	; 59
    26f4:	0f 92       	push	r0
    26f6:	2f 93       	push	r18
    26f8:	8f 93       	push	r24
    26fa:	9f 93       	push	r25
    26fc:	af 93       	push	r26
    26fe:	bf 93       	push	r27
    2700:	ef 93       	push	r30
    2702:	ff 93       	push	r31
    2704:	e0 91 15 0d 	lds	r30, 0x0D15	; 0x800d15 <_ser_handle+0x4>
    2708:	f0 91 16 0d 	lds	r31, 0x0D16	; 0x800d16 <_ser_handle+0x5>
    270c:	30 97       	sbiw	r30, 0x00	; 0
    270e:	b9 f0       	breq	.+46     	; 0x273e <__vector_52+0x56>
    2710:	02 80       	ldd	r0, Z+2	; 0x02
    2712:	f3 81       	ldd	r31, Z+3	; 0x03
    2714:	e0 2d       	mov	r30, r0
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	98 17       	cp	r25, r24
    271c:	b1 f0       	breq	.+44     	; 0x274a <__vector_52+0x62>
    271e:	92 81       	ldd	r25, Z+2	; 0x02
    2720:	85 81       	ldd	r24, Z+5	; 0x05
    2722:	28 2f       	mov	r18, r24
    2724:	26 95       	lsr	r18
    2726:	29 23       	and	r18, r25
    2728:	a0 81       	ld	r26, Z
    272a:	b1 81       	ldd	r27, Z+1	; 0x01
    272c:	a2 0f       	add	r26, r18
    272e:	b1 1d       	adc	r27, r1
    2730:	2c 91       	ld	r18, X
    2732:	9f 5f       	subi	r25, 0xFF	; 255
    2734:	89 23       	and	r24, r25
    2736:	82 83       	std	Z+2, r24	; 0x02
    2738:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    273c:	0b c0       	rjmp	.+22     	; 0x2754 <__vector_52+0x6c>
    273e:	e1 ed       	ldi	r30, 0xD1	; 209
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	8f 7d       	andi	r24, 0xDF	; 223
    2746:	80 83       	st	Z, r24
    2748:	05 c0       	rjmp	.+10     	; 0x2754 <__vector_52+0x6c>
    274a:	e1 ed       	ldi	r30, 0xD1	; 209
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8f 7d       	andi	r24, 0xDF	; 223
    2752:	80 83       	st	Z, r24
    2754:	ff 91       	pop	r31
    2756:	ef 91       	pop	r30
    2758:	bf 91       	pop	r27
    275a:	af 91       	pop	r26
    275c:	9f 91       	pop	r25
    275e:	8f 91       	pop	r24
    2760:	2f 91       	pop	r18
    2762:	0f 90       	pop	r0
    2764:	0b be       	out	0x3b, r0	; 59
    2766:	0f 90       	pop	r0
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	0f 90       	pop	r0
    276c:	1f 90       	pop	r1
    276e:	18 95       	reti

00002770 <__vector_54>:
    2770:	1f 92       	push	r1
    2772:	0f 92       	push	r0
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	0f 92       	push	r0
    2778:	11 24       	eor	r1, r1
    277a:	0b b6       	in	r0, 0x3b	; 59
    277c:	0f 92       	push	r0
    277e:	2f 93       	push	r18
    2780:	3f 93       	push	r19
    2782:	4f 93       	push	r20
    2784:	5f 93       	push	r21
    2786:	6f 93       	push	r22
    2788:	7f 93       	push	r23
    278a:	8f 93       	push	r24
    278c:	9f 93       	push	r25
    278e:	af 93       	push	r26
    2790:	bf 93       	push	r27
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	ef 93       	push	r30
    2798:	ff 93       	push	r31
    279a:	a0 91 17 0d 	lds	r26, 0x0D17	; 0x800d17 <_ser_handle+0x6>
    279e:	b0 91 18 0d 	lds	r27, 0x0D18	; 0x800d18 <_ser_handle+0x7>
    27a2:	10 97       	sbiw	r26, 0x00	; 0
    27a4:	11 f1       	breq	.+68     	; 0x27ea <__vector_54+0x7a>
    27a6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    27aa:	14 96       	adiw	r26, 0x04	; 4
    27ac:	ed 91       	ld	r30, X+
    27ae:	fc 91       	ld	r31, X
    27b0:	15 97       	sbiw	r26, 0x05	; 5
    27b2:	93 81       	ldd	r25, Z+3	; 0x03
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	25 81       	ldd	r18, Z+5	; 0x05
    27b8:	98 1b       	sub	r25, r24
    27ba:	92 23       	and	r25, r18
    27bc:	84 81       	ldd	r24, Z+4	; 0x04
    27be:	98 17       	cp	r25, r24
    27c0:	61 f0       	breq	.+24     	; 0x27da <__vector_54+0x6a>
    27c2:	83 81       	ldd	r24, Z+3	; 0x03
    27c4:	26 95       	lsr	r18
    27c6:	28 23       	and	r18, r24
    27c8:	c0 81       	ld	r28, Z
    27ca:	d1 81       	ldd	r29, Z+1	; 0x01
    27cc:	c2 0f       	add	r28, r18
    27ce:	d1 1d       	adc	r29, r1
    27d0:	68 83       	st	Y, r22
    27d2:	8f 5f       	subi	r24, 0xFF	; 255
    27d4:	95 81       	ldd	r25, Z+5	; 0x05
    27d6:	89 23       	and	r24, r25
    27d8:	83 83       	std	Z+3, r24	; 0x03
    27da:	16 96       	adiw	r26, 0x06	; 6
    27dc:	ed 91       	ld	r30, X+
    27de:	fc 91       	ld	r31, X
    27e0:	17 97       	sbiw	r26, 0x07	; 7
    27e2:	30 97       	sbiw	r30, 0x00	; 0
    27e4:	11 f0       	breq	.+4      	; 0x27ea <__vector_54+0x7a>
    27e6:	cd 01       	movw	r24, r26
    27e8:	19 95       	eicall
    27ea:	ff 91       	pop	r31
    27ec:	ef 91       	pop	r30
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	bf 91       	pop	r27
    27f4:	af 91       	pop	r26
    27f6:	9f 91       	pop	r25
    27f8:	8f 91       	pop	r24
    27fa:	7f 91       	pop	r23
    27fc:	6f 91       	pop	r22
    27fe:	5f 91       	pop	r21
    2800:	4f 91       	pop	r20
    2802:	3f 91       	pop	r19
    2804:	2f 91       	pop	r18
    2806:	0f 90       	pop	r0
    2808:	0b be       	out	0x3b, r0	; 59
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	0f 90       	pop	r0
    2810:	1f 90       	pop	r1
    2812:	18 95       	reti

00002814 <__vector_55>:
    2814:	1f 92       	push	r1
    2816:	0f 92       	push	r0
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	0f 92       	push	r0
    281c:	11 24       	eor	r1, r1
    281e:	0b b6       	in	r0, 0x3b	; 59
    2820:	0f 92       	push	r0
    2822:	2f 93       	push	r18
    2824:	8f 93       	push	r24
    2826:	9f 93       	push	r25
    2828:	af 93       	push	r26
    282a:	bf 93       	push	r27
    282c:	ef 93       	push	r30
    282e:	ff 93       	push	r31
    2830:	e0 91 17 0d 	lds	r30, 0x0D17	; 0x800d17 <_ser_handle+0x6>
    2834:	f0 91 18 0d 	lds	r31, 0x0D18	; 0x800d18 <_ser_handle+0x7>
    2838:	30 97       	sbiw	r30, 0x00	; 0
    283a:	b9 f0       	breq	.+46     	; 0x286a <__vector_55+0x56>
    283c:	02 80       	ldd	r0, Z+2	; 0x02
    283e:	f3 81       	ldd	r31, Z+3	; 0x03
    2840:	e0 2d       	mov	r30, r0
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	98 17       	cp	r25, r24
    2848:	b1 f0       	breq	.+44     	; 0x2876 <__vector_55+0x62>
    284a:	92 81       	ldd	r25, Z+2	; 0x02
    284c:	85 81       	ldd	r24, Z+5	; 0x05
    284e:	28 2f       	mov	r18, r24
    2850:	26 95       	lsr	r18
    2852:	29 23       	and	r18, r25
    2854:	a0 81       	ld	r26, Z
    2856:	b1 81       	ldd	r27, Z+1	; 0x01
    2858:	a2 0f       	add	r26, r18
    285a:	b1 1d       	adc	r27, r1
    285c:	2c 91       	ld	r18, X
    285e:	9f 5f       	subi	r25, 0xFF	; 255
    2860:	89 23       	and	r24, r25
    2862:	82 83       	std	Z+2, r24	; 0x02
    2864:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2868:	0b c0       	rjmp	.+22     	; 0x2880 <__vector_55+0x6c>
    286a:	e1 e3       	ldi	r30, 0x31	; 49
    286c:	f1 e0       	ldi	r31, 0x01	; 1
    286e:	80 81       	ld	r24, Z
    2870:	8f 7d       	andi	r24, 0xDF	; 223
    2872:	80 83       	st	Z, r24
    2874:	05 c0       	rjmp	.+10     	; 0x2880 <__vector_55+0x6c>
    2876:	e1 e3       	ldi	r30, 0x31	; 49
    2878:	f1 e0       	ldi	r31, 0x01	; 1
    287a:	80 81       	ld	r24, Z
    287c:	8f 7d       	andi	r24, 0xDF	; 223
    287e:	80 83       	st	Z, r24
    2880:	ff 91       	pop	r31
    2882:	ef 91       	pop	r30
    2884:	bf 91       	pop	r27
    2886:	af 91       	pop	r26
    2888:	9f 91       	pop	r25
    288a:	8f 91       	pop	r24
    288c:	2f 91       	pop	r18
    288e:	0f 90       	pop	r0
    2890:	0b be       	out	0x3b, r0	; 59
    2892:	0f 90       	pop	r0
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	0f 90       	pop	r0
    2898:	1f 90       	pop	r1
    289a:	18 95       	reti

0000289c <fifo_init>:
    289c:	fc 01       	movw	r30, r24
    289e:	41 11       	cpse	r20, r1
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <fifo_init+0x8>
    28a2:	2b d3       	rcall	.+1622   	; 0x2efa <abort>
    28a4:	84 2f       	mov	r24, r20
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	9c 01       	movw	r18, r24
    28aa:	21 50       	subi	r18, 0x01	; 1
    28ac:	31 09       	sbc	r19, r1
    28ae:	82 23       	and	r24, r18
    28b0:	93 23       	and	r25, r19
    28b2:	89 2b       	or	r24, r25
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <fifo_init+0x1c>
    28b6:	21 d3       	rcall	.+1602   	; 0x2efa <abort>
    28b8:	41 38       	cpi	r20, 0x81	; 129
    28ba:	08 f0       	brcs	.+2      	; 0x28be <fifo_init+0x22>
    28bc:	1e d3       	rcall	.+1596   	; 0x2efa <abort>
    28be:	12 82       	std	Z+2, r1	; 0x02
    28c0:	13 82       	std	Z+3, r1	; 0x03
    28c2:	44 83       	std	Z+4, r20	; 0x04
    28c4:	44 0f       	add	r20, r20
    28c6:	41 50       	subi	r20, 0x01	; 1
    28c8:	45 83       	std	Z+5, r20	; 0x05
    28ca:	71 83       	std	Z+1, r23	; 0x01
    28cc:	60 83       	st	Z, r22
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	08 95       	ret

000028d4 <__subsf3>:
    28d4:	50 58       	subi	r21, 0x80	; 128

000028d6 <__addsf3>:
    28d6:	bb 27       	eor	r27, r27
    28d8:	aa 27       	eor	r26, r26
    28da:	0e d0       	rcall	.+28     	; 0x28f8 <__addsf3x>
    28dc:	48 c1       	rjmp	.+656    	; 0x2b6e <__fp_round>
    28de:	39 d1       	rcall	.+626    	; 0x2b52 <__fp_pscA>
    28e0:	30 f0       	brcs	.+12     	; 0x28ee <__addsf3+0x18>
    28e2:	3e d1       	rcall	.+636    	; 0x2b60 <__fp_pscB>
    28e4:	20 f0       	brcs	.+8      	; 0x28ee <__addsf3+0x18>
    28e6:	31 f4       	brne	.+12     	; 0x28f4 <__addsf3+0x1e>
    28e8:	9f 3f       	cpi	r25, 0xFF	; 255
    28ea:	11 f4       	brne	.+4      	; 0x28f0 <__addsf3+0x1a>
    28ec:	1e f4       	brtc	.+6      	; 0x28f4 <__addsf3+0x1e>
    28ee:	2e c1       	rjmp	.+604    	; 0x2b4c <__fp_nan>
    28f0:	0e f4       	brtc	.+2      	; 0x28f4 <__addsf3+0x1e>
    28f2:	e0 95       	com	r30
    28f4:	e7 fb       	bst	r30, 7
    28f6:	24 c1       	rjmp	.+584    	; 0x2b40 <__fp_inf>

000028f8 <__addsf3x>:
    28f8:	e9 2f       	mov	r30, r25
    28fa:	4a d1       	rcall	.+660    	; 0x2b90 <__fp_split3>
    28fc:	80 f3       	brcs	.-32     	; 0x28de <__addsf3+0x8>
    28fe:	ba 17       	cp	r27, r26
    2900:	62 07       	cpc	r22, r18
    2902:	73 07       	cpc	r23, r19
    2904:	84 07       	cpc	r24, r20
    2906:	95 07       	cpc	r25, r21
    2908:	18 f0       	brcs	.+6      	; 0x2910 <__addsf3x+0x18>
    290a:	71 f4       	brne	.+28     	; 0x2928 <__addsf3x+0x30>
    290c:	9e f5       	brtc	.+102    	; 0x2974 <__addsf3x+0x7c>
    290e:	62 c1       	rjmp	.+708    	; 0x2bd4 <__fp_zero>
    2910:	0e f4       	brtc	.+2      	; 0x2914 <__addsf3x+0x1c>
    2912:	e0 95       	com	r30
    2914:	0b 2e       	mov	r0, r27
    2916:	ba 2f       	mov	r27, r26
    2918:	a0 2d       	mov	r26, r0
    291a:	0b 01       	movw	r0, r22
    291c:	b9 01       	movw	r22, r18
    291e:	90 01       	movw	r18, r0
    2920:	0c 01       	movw	r0, r24
    2922:	ca 01       	movw	r24, r20
    2924:	a0 01       	movw	r20, r0
    2926:	11 24       	eor	r1, r1
    2928:	ff 27       	eor	r31, r31
    292a:	59 1b       	sub	r21, r25
    292c:	99 f0       	breq	.+38     	; 0x2954 <__addsf3x+0x5c>
    292e:	59 3f       	cpi	r21, 0xF9	; 249
    2930:	50 f4       	brcc	.+20     	; 0x2946 <__addsf3x+0x4e>
    2932:	50 3e       	cpi	r21, 0xE0	; 224
    2934:	68 f1       	brcs	.+90     	; 0x2990 <__addsf3x+0x98>
    2936:	1a 16       	cp	r1, r26
    2938:	f0 40       	sbci	r31, 0x00	; 0
    293a:	a2 2f       	mov	r26, r18
    293c:	23 2f       	mov	r18, r19
    293e:	34 2f       	mov	r19, r20
    2940:	44 27       	eor	r20, r20
    2942:	58 5f       	subi	r21, 0xF8	; 248
    2944:	f3 cf       	rjmp	.-26     	; 0x292c <__addsf3x+0x34>
    2946:	46 95       	lsr	r20
    2948:	37 95       	ror	r19
    294a:	27 95       	ror	r18
    294c:	a7 95       	ror	r26
    294e:	f0 40       	sbci	r31, 0x00	; 0
    2950:	53 95       	inc	r21
    2952:	c9 f7       	brne	.-14     	; 0x2946 <__addsf3x+0x4e>
    2954:	7e f4       	brtc	.+30     	; 0x2974 <__addsf3x+0x7c>
    2956:	1f 16       	cp	r1, r31
    2958:	ba 0b       	sbc	r27, r26
    295a:	62 0b       	sbc	r22, r18
    295c:	73 0b       	sbc	r23, r19
    295e:	84 0b       	sbc	r24, r20
    2960:	ba f0       	brmi	.+46     	; 0x2990 <__addsf3x+0x98>
    2962:	91 50       	subi	r25, 0x01	; 1
    2964:	a1 f0       	breq	.+40     	; 0x298e <__addsf3x+0x96>
    2966:	ff 0f       	add	r31, r31
    2968:	bb 1f       	adc	r27, r27
    296a:	66 1f       	adc	r22, r22
    296c:	77 1f       	adc	r23, r23
    296e:	88 1f       	adc	r24, r24
    2970:	c2 f7       	brpl	.-16     	; 0x2962 <__addsf3x+0x6a>
    2972:	0e c0       	rjmp	.+28     	; 0x2990 <__addsf3x+0x98>
    2974:	ba 0f       	add	r27, r26
    2976:	62 1f       	adc	r22, r18
    2978:	73 1f       	adc	r23, r19
    297a:	84 1f       	adc	r24, r20
    297c:	48 f4       	brcc	.+18     	; 0x2990 <__addsf3x+0x98>
    297e:	87 95       	ror	r24
    2980:	77 95       	ror	r23
    2982:	67 95       	ror	r22
    2984:	b7 95       	ror	r27
    2986:	f7 95       	ror	r31
    2988:	9e 3f       	cpi	r25, 0xFE	; 254
    298a:	08 f0       	brcs	.+2      	; 0x298e <__addsf3x+0x96>
    298c:	b3 cf       	rjmp	.-154    	; 0x28f4 <__addsf3+0x1e>
    298e:	93 95       	inc	r25
    2990:	88 0f       	add	r24, r24
    2992:	08 f0       	brcs	.+2      	; 0x2996 <__addsf3x+0x9e>
    2994:	99 27       	eor	r25, r25
    2996:	ee 0f       	add	r30, r30
    2998:	97 95       	ror	r25
    299a:	87 95       	ror	r24
    299c:	08 95       	ret

0000299e <__divsf3>:
    299e:	0c d0       	rcall	.+24     	; 0x29b8 <__divsf3x>
    29a0:	e6 c0       	rjmp	.+460    	; 0x2b6e <__fp_round>
    29a2:	de d0       	rcall	.+444    	; 0x2b60 <__fp_pscB>
    29a4:	40 f0       	brcs	.+16     	; 0x29b6 <__divsf3+0x18>
    29a6:	d5 d0       	rcall	.+426    	; 0x2b52 <__fp_pscA>
    29a8:	30 f0       	brcs	.+12     	; 0x29b6 <__divsf3+0x18>
    29aa:	21 f4       	brne	.+8      	; 0x29b4 <__divsf3+0x16>
    29ac:	5f 3f       	cpi	r21, 0xFF	; 255
    29ae:	19 f0       	breq	.+6      	; 0x29b6 <__divsf3+0x18>
    29b0:	c7 c0       	rjmp	.+398    	; 0x2b40 <__fp_inf>
    29b2:	51 11       	cpse	r21, r1
    29b4:	10 c1       	rjmp	.+544    	; 0x2bd6 <__fp_szero>
    29b6:	ca c0       	rjmp	.+404    	; 0x2b4c <__fp_nan>

000029b8 <__divsf3x>:
    29b8:	eb d0       	rcall	.+470    	; 0x2b90 <__fp_split3>
    29ba:	98 f3       	brcs	.-26     	; 0x29a2 <__divsf3+0x4>

000029bc <__divsf3_pse>:
    29bc:	99 23       	and	r25, r25
    29be:	c9 f3       	breq	.-14     	; 0x29b2 <__divsf3+0x14>
    29c0:	55 23       	and	r21, r21
    29c2:	b1 f3       	breq	.-20     	; 0x29b0 <__divsf3+0x12>
    29c4:	95 1b       	sub	r25, r21
    29c6:	55 0b       	sbc	r21, r21
    29c8:	bb 27       	eor	r27, r27
    29ca:	aa 27       	eor	r26, r26
    29cc:	62 17       	cp	r22, r18
    29ce:	73 07       	cpc	r23, r19
    29d0:	84 07       	cpc	r24, r20
    29d2:	38 f0       	brcs	.+14     	; 0x29e2 <__divsf3_pse+0x26>
    29d4:	9f 5f       	subi	r25, 0xFF	; 255
    29d6:	5f 4f       	sbci	r21, 0xFF	; 255
    29d8:	22 0f       	add	r18, r18
    29da:	33 1f       	adc	r19, r19
    29dc:	44 1f       	adc	r20, r20
    29de:	aa 1f       	adc	r26, r26
    29e0:	a9 f3       	breq	.-22     	; 0x29cc <__divsf3_pse+0x10>
    29e2:	33 d0       	rcall	.+102    	; 0x2a4a <__divsf3_pse+0x8e>
    29e4:	0e 2e       	mov	r0, r30
    29e6:	3a f0       	brmi	.+14     	; 0x29f6 <__divsf3_pse+0x3a>
    29e8:	e0 e8       	ldi	r30, 0x80	; 128
    29ea:	30 d0       	rcall	.+96     	; 0x2a4c <__divsf3_pse+0x90>
    29ec:	91 50       	subi	r25, 0x01	; 1
    29ee:	50 40       	sbci	r21, 0x00	; 0
    29f0:	e6 95       	lsr	r30
    29f2:	00 1c       	adc	r0, r0
    29f4:	ca f7       	brpl	.-14     	; 0x29e8 <__divsf3_pse+0x2c>
    29f6:	29 d0       	rcall	.+82     	; 0x2a4a <__divsf3_pse+0x8e>
    29f8:	fe 2f       	mov	r31, r30
    29fa:	27 d0       	rcall	.+78     	; 0x2a4a <__divsf3_pse+0x8e>
    29fc:	66 0f       	add	r22, r22
    29fe:	77 1f       	adc	r23, r23
    2a00:	88 1f       	adc	r24, r24
    2a02:	bb 1f       	adc	r27, r27
    2a04:	26 17       	cp	r18, r22
    2a06:	37 07       	cpc	r19, r23
    2a08:	48 07       	cpc	r20, r24
    2a0a:	ab 07       	cpc	r26, r27
    2a0c:	b0 e8       	ldi	r27, 0x80	; 128
    2a0e:	09 f0       	breq	.+2      	; 0x2a12 <__divsf3_pse+0x56>
    2a10:	bb 0b       	sbc	r27, r27
    2a12:	80 2d       	mov	r24, r0
    2a14:	bf 01       	movw	r22, r30
    2a16:	ff 27       	eor	r31, r31
    2a18:	93 58       	subi	r25, 0x83	; 131
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a1c:	2a f0       	brmi	.+10     	; 0x2a28 <__divsf3_pse+0x6c>
    2a1e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a20:	51 05       	cpc	r21, r1
    2a22:	68 f0       	brcs	.+26     	; 0x2a3e <__divsf3_pse+0x82>
    2a24:	8d c0       	rjmp	.+282    	; 0x2b40 <__fp_inf>
    2a26:	d7 c0       	rjmp	.+430    	; 0x2bd6 <__fp_szero>
    2a28:	5f 3f       	cpi	r21, 0xFF	; 255
    2a2a:	ec f3       	brlt	.-6      	; 0x2a26 <__divsf3_pse+0x6a>
    2a2c:	98 3e       	cpi	r25, 0xE8	; 232
    2a2e:	dc f3       	brlt	.-10     	; 0x2a26 <__divsf3_pse+0x6a>
    2a30:	86 95       	lsr	r24
    2a32:	77 95       	ror	r23
    2a34:	67 95       	ror	r22
    2a36:	b7 95       	ror	r27
    2a38:	f7 95       	ror	r31
    2a3a:	9f 5f       	subi	r25, 0xFF	; 255
    2a3c:	c9 f7       	brne	.-14     	; 0x2a30 <__divsf3_pse+0x74>
    2a3e:	88 0f       	add	r24, r24
    2a40:	91 1d       	adc	r25, r1
    2a42:	96 95       	lsr	r25
    2a44:	87 95       	ror	r24
    2a46:	97 f9       	bld	r25, 7
    2a48:	08 95       	ret
    2a4a:	e1 e0       	ldi	r30, 0x01	; 1
    2a4c:	66 0f       	add	r22, r22
    2a4e:	77 1f       	adc	r23, r23
    2a50:	88 1f       	adc	r24, r24
    2a52:	bb 1f       	adc	r27, r27
    2a54:	62 17       	cp	r22, r18
    2a56:	73 07       	cpc	r23, r19
    2a58:	84 07       	cpc	r24, r20
    2a5a:	ba 07       	cpc	r27, r26
    2a5c:	20 f0       	brcs	.+8      	; 0x2a66 <__divsf3_pse+0xaa>
    2a5e:	62 1b       	sub	r22, r18
    2a60:	73 0b       	sbc	r23, r19
    2a62:	84 0b       	sbc	r24, r20
    2a64:	ba 0b       	sbc	r27, r26
    2a66:	ee 1f       	adc	r30, r30
    2a68:	88 f7       	brcc	.-30     	; 0x2a4c <__divsf3_pse+0x90>
    2a6a:	e0 95       	com	r30
    2a6c:	08 95       	ret

00002a6e <__fixunssfsi>:
    2a6e:	98 d0       	rcall	.+304    	; 0x2ba0 <__fp_splitA>
    2a70:	88 f0       	brcs	.+34     	; 0x2a94 <__fixunssfsi+0x26>
    2a72:	9f 57       	subi	r25, 0x7F	; 127
    2a74:	90 f0       	brcs	.+36     	; 0x2a9a <__fixunssfsi+0x2c>
    2a76:	b9 2f       	mov	r27, r25
    2a78:	99 27       	eor	r25, r25
    2a7a:	b7 51       	subi	r27, 0x17	; 23
    2a7c:	a0 f0       	brcs	.+40     	; 0x2aa6 <__fixunssfsi+0x38>
    2a7e:	d1 f0       	breq	.+52     	; 0x2ab4 <__fixunssfsi+0x46>
    2a80:	66 0f       	add	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	1a f0       	brmi	.+6      	; 0x2a90 <__fixunssfsi+0x22>
    2a8a:	ba 95       	dec	r27
    2a8c:	c9 f7       	brne	.-14     	; 0x2a80 <__fixunssfsi+0x12>
    2a8e:	12 c0       	rjmp	.+36     	; 0x2ab4 <__fixunssfsi+0x46>
    2a90:	b1 30       	cpi	r27, 0x01	; 1
    2a92:	81 f0       	breq	.+32     	; 0x2ab4 <__fixunssfsi+0x46>
    2a94:	9f d0       	rcall	.+318    	; 0x2bd4 <__fp_zero>
    2a96:	b1 e0       	ldi	r27, 0x01	; 1
    2a98:	08 95       	ret
    2a9a:	9c c0       	rjmp	.+312    	; 0x2bd4 <__fp_zero>
    2a9c:	67 2f       	mov	r22, r23
    2a9e:	78 2f       	mov	r23, r24
    2aa0:	88 27       	eor	r24, r24
    2aa2:	b8 5f       	subi	r27, 0xF8	; 248
    2aa4:	39 f0       	breq	.+14     	; 0x2ab4 <__fixunssfsi+0x46>
    2aa6:	b9 3f       	cpi	r27, 0xF9	; 249
    2aa8:	cc f3       	brlt	.-14     	; 0x2a9c <__fixunssfsi+0x2e>
    2aaa:	86 95       	lsr	r24
    2aac:	77 95       	ror	r23
    2aae:	67 95       	ror	r22
    2ab0:	b3 95       	inc	r27
    2ab2:	d9 f7       	brne	.-10     	; 0x2aaa <__fixunssfsi+0x3c>
    2ab4:	3e f4       	brtc	.+14     	; 0x2ac4 <__fixunssfsi+0x56>
    2ab6:	90 95       	com	r25
    2ab8:	80 95       	com	r24
    2aba:	70 95       	com	r23
    2abc:	61 95       	neg	r22
    2abe:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac4:	08 95       	ret

00002ac6 <__floatunsisf>:
    2ac6:	e8 94       	clt
    2ac8:	09 c0       	rjmp	.+18     	; 0x2adc <__floatsisf+0x12>

00002aca <__floatsisf>:
    2aca:	97 fb       	bst	r25, 7
    2acc:	3e f4       	brtc	.+14     	; 0x2adc <__floatsisf+0x12>
    2ace:	90 95       	com	r25
    2ad0:	80 95       	com	r24
    2ad2:	70 95       	com	r23
    2ad4:	61 95       	neg	r22
    2ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    2ada:	9f 4f       	sbci	r25, 0xFF	; 255
    2adc:	99 23       	and	r25, r25
    2ade:	a9 f0       	breq	.+42     	; 0x2b0a <__floatsisf+0x40>
    2ae0:	f9 2f       	mov	r31, r25
    2ae2:	96 e9       	ldi	r25, 0x96	; 150
    2ae4:	bb 27       	eor	r27, r27
    2ae6:	93 95       	inc	r25
    2ae8:	f6 95       	lsr	r31
    2aea:	87 95       	ror	r24
    2aec:	77 95       	ror	r23
    2aee:	67 95       	ror	r22
    2af0:	b7 95       	ror	r27
    2af2:	f1 11       	cpse	r31, r1
    2af4:	f8 cf       	rjmp	.-16     	; 0x2ae6 <__floatsisf+0x1c>
    2af6:	fa f4       	brpl	.+62     	; 0x2b36 <__floatsisf+0x6c>
    2af8:	bb 0f       	add	r27, r27
    2afa:	11 f4       	brne	.+4      	; 0x2b00 <__floatsisf+0x36>
    2afc:	60 ff       	sbrs	r22, 0
    2afe:	1b c0       	rjmp	.+54     	; 0x2b36 <__floatsisf+0x6c>
    2b00:	6f 5f       	subi	r22, 0xFF	; 255
    2b02:	7f 4f       	sbci	r23, 0xFF	; 255
    2b04:	8f 4f       	sbci	r24, 0xFF	; 255
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	16 c0       	rjmp	.+44     	; 0x2b36 <__floatsisf+0x6c>
    2b0a:	88 23       	and	r24, r24
    2b0c:	11 f0       	breq	.+4      	; 0x2b12 <__floatsisf+0x48>
    2b0e:	96 e9       	ldi	r25, 0x96	; 150
    2b10:	11 c0       	rjmp	.+34     	; 0x2b34 <__floatsisf+0x6a>
    2b12:	77 23       	and	r23, r23
    2b14:	21 f0       	breq	.+8      	; 0x2b1e <__floatsisf+0x54>
    2b16:	9e e8       	ldi	r25, 0x8E	; 142
    2b18:	87 2f       	mov	r24, r23
    2b1a:	76 2f       	mov	r23, r22
    2b1c:	05 c0       	rjmp	.+10     	; 0x2b28 <__floatsisf+0x5e>
    2b1e:	66 23       	and	r22, r22
    2b20:	71 f0       	breq	.+28     	; 0x2b3e <__floatsisf+0x74>
    2b22:	96 e8       	ldi	r25, 0x86	; 134
    2b24:	86 2f       	mov	r24, r22
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	2a f0       	brmi	.+10     	; 0x2b36 <__floatsisf+0x6c>
    2b2c:	9a 95       	dec	r25
    2b2e:	66 0f       	add	r22, r22
    2b30:	77 1f       	adc	r23, r23
    2b32:	88 1f       	adc	r24, r24
    2b34:	da f7       	brpl	.-10     	; 0x2b2c <__floatsisf+0x62>
    2b36:	88 0f       	add	r24, r24
    2b38:	96 95       	lsr	r25
    2b3a:	87 95       	ror	r24
    2b3c:	97 f9       	bld	r25, 7
    2b3e:	08 95       	ret

00002b40 <__fp_inf>:
    2b40:	97 f9       	bld	r25, 7
    2b42:	9f 67       	ori	r25, 0x7F	; 127
    2b44:	80 e8       	ldi	r24, 0x80	; 128
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	08 95       	ret

00002b4c <__fp_nan>:
    2b4c:	9f ef       	ldi	r25, 0xFF	; 255
    2b4e:	80 ec       	ldi	r24, 0xC0	; 192
    2b50:	08 95       	ret

00002b52 <__fp_pscA>:
    2b52:	00 24       	eor	r0, r0
    2b54:	0a 94       	dec	r0
    2b56:	16 16       	cp	r1, r22
    2b58:	17 06       	cpc	r1, r23
    2b5a:	18 06       	cpc	r1, r24
    2b5c:	09 06       	cpc	r0, r25
    2b5e:	08 95       	ret

00002b60 <__fp_pscB>:
    2b60:	00 24       	eor	r0, r0
    2b62:	0a 94       	dec	r0
    2b64:	12 16       	cp	r1, r18
    2b66:	13 06       	cpc	r1, r19
    2b68:	14 06       	cpc	r1, r20
    2b6a:	05 06       	cpc	r0, r21
    2b6c:	08 95       	ret

00002b6e <__fp_round>:
    2b6e:	09 2e       	mov	r0, r25
    2b70:	03 94       	inc	r0
    2b72:	00 0c       	add	r0, r0
    2b74:	11 f4       	brne	.+4      	; 0x2b7a <__fp_round+0xc>
    2b76:	88 23       	and	r24, r24
    2b78:	52 f0       	brmi	.+20     	; 0x2b8e <__fp_round+0x20>
    2b7a:	bb 0f       	add	r27, r27
    2b7c:	40 f4       	brcc	.+16     	; 0x2b8e <__fp_round+0x20>
    2b7e:	bf 2b       	or	r27, r31
    2b80:	11 f4       	brne	.+4      	; 0x2b86 <__fp_round+0x18>
    2b82:	60 ff       	sbrs	r22, 0
    2b84:	04 c0       	rjmp	.+8      	; 0x2b8e <__fp_round+0x20>
    2b86:	6f 5f       	subi	r22, 0xFF	; 255
    2b88:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8e:	08 95       	ret

00002b90 <__fp_split3>:
    2b90:	57 fd       	sbrc	r21, 7
    2b92:	90 58       	subi	r25, 0x80	; 128
    2b94:	44 0f       	add	r20, r20
    2b96:	55 1f       	adc	r21, r21
    2b98:	59 f0       	breq	.+22     	; 0x2bb0 <__fp_splitA+0x10>
    2b9a:	5f 3f       	cpi	r21, 0xFF	; 255
    2b9c:	71 f0       	breq	.+28     	; 0x2bba <__fp_splitA+0x1a>
    2b9e:	47 95       	ror	r20

00002ba0 <__fp_splitA>:
    2ba0:	88 0f       	add	r24, r24
    2ba2:	97 fb       	bst	r25, 7
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	61 f0       	breq	.+24     	; 0x2bc0 <__fp_splitA+0x20>
    2ba8:	9f 3f       	cpi	r25, 0xFF	; 255
    2baa:	79 f0       	breq	.+30     	; 0x2bca <__fp_splitA+0x2a>
    2bac:	87 95       	ror	r24
    2bae:	08 95       	ret
    2bb0:	12 16       	cp	r1, r18
    2bb2:	13 06       	cpc	r1, r19
    2bb4:	14 06       	cpc	r1, r20
    2bb6:	55 1f       	adc	r21, r21
    2bb8:	f2 cf       	rjmp	.-28     	; 0x2b9e <__fp_split3+0xe>
    2bba:	46 95       	lsr	r20
    2bbc:	f1 df       	rcall	.-30     	; 0x2ba0 <__fp_splitA>
    2bbe:	08 c0       	rjmp	.+16     	; 0x2bd0 <__fp_splitA+0x30>
    2bc0:	16 16       	cp	r1, r22
    2bc2:	17 06       	cpc	r1, r23
    2bc4:	18 06       	cpc	r1, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	f1 cf       	rjmp	.-30     	; 0x2bac <__fp_splitA+0xc>
    2bca:	86 95       	lsr	r24
    2bcc:	71 05       	cpc	r23, r1
    2bce:	61 05       	cpc	r22, r1
    2bd0:	08 94       	sec
    2bd2:	08 95       	ret

00002bd4 <__fp_zero>:
    2bd4:	e8 94       	clt

00002bd6 <__fp_szero>:
    2bd6:	bb 27       	eor	r27, r27
    2bd8:	66 27       	eor	r22, r22
    2bda:	77 27       	eor	r23, r23
    2bdc:	cb 01       	movw	r24, r22
    2bde:	97 f9       	bld	r25, 7
    2be0:	08 95       	ret

00002be2 <__mulsf3>:
    2be2:	0b d0       	rcall	.+22     	; 0x2bfa <__mulsf3x>
    2be4:	c4 cf       	rjmp	.-120    	; 0x2b6e <__fp_round>
    2be6:	b5 df       	rcall	.-150    	; 0x2b52 <__fp_pscA>
    2be8:	28 f0       	brcs	.+10     	; 0x2bf4 <__mulsf3+0x12>
    2bea:	ba df       	rcall	.-140    	; 0x2b60 <__fp_pscB>
    2bec:	18 f0       	brcs	.+6      	; 0x2bf4 <__mulsf3+0x12>
    2bee:	95 23       	and	r25, r21
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <__mulsf3+0x12>
    2bf2:	a6 cf       	rjmp	.-180    	; 0x2b40 <__fp_inf>
    2bf4:	ab cf       	rjmp	.-170    	; 0x2b4c <__fp_nan>
    2bf6:	11 24       	eor	r1, r1
    2bf8:	ee cf       	rjmp	.-36     	; 0x2bd6 <__fp_szero>

00002bfa <__mulsf3x>:
    2bfa:	ca df       	rcall	.-108    	; 0x2b90 <__fp_split3>
    2bfc:	a0 f3       	brcs	.-24     	; 0x2be6 <__mulsf3+0x4>

00002bfe <__mulsf3_pse>:
    2bfe:	95 9f       	mul	r25, r21
    2c00:	d1 f3       	breq	.-12     	; 0x2bf6 <__mulsf3+0x14>
    2c02:	95 0f       	add	r25, r21
    2c04:	50 e0       	ldi	r21, 0x00	; 0
    2c06:	55 1f       	adc	r21, r21
    2c08:	62 9f       	mul	r22, r18
    2c0a:	f0 01       	movw	r30, r0
    2c0c:	72 9f       	mul	r23, r18
    2c0e:	bb 27       	eor	r27, r27
    2c10:	f0 0d       	add	r31, r0
    2c12:	b1 1d       	adc	r27, r1
    2c14:	63 9f       	mul	r22, r19
    2c16:	aa 27       	eor	r26, r26
    2c18:	f0 0d       	add	r31, r0
    2c1a:	b1 1d       	adc	r27, r1
    2c1c:	aa 1f       	adc	r26, r26
    2c1e:	64 9f       	mul	r22, r20
    2c20:	66 27       	eor	r22, r22
    2c22:	b0 0d       	add	r27, r0
    2c24:	a1 1d       	adc	r26, r1
    2c26:	66 1f       	adc	r22, r22
    2c28:	82 9f       	mul	r24, r18
    2c2a:	22 27       	eor	r18, r18
    2c2c:	b0 0d       	add	r27, r0
    2c2e:	a1 1d       	adc	r26, r1
    2c30:	62 1f       	adc	r22, r18
    2c32:	73 9f       	mul	r23, r19
    2c34:	b0 0d       	add	r27, r0
    2c36:	a1 1d       	adc	r26, r1
    2c38:	62 1f       	adc	r22, r18
    2c3a:	83 9f       	mul	r24, r19
    2c3c:	a0 0d       	add	r26, r0
    2c3e:	61 1d       	adc	r22, r1
    2c40:	22 1f       	adc	r18, r18
    2c42:	74 9f       	mul	r23, r20
    2c44:	33 27       	eor	r19, r19
    2c46:	a0 0d       	add	r26, r0
    2c48:	61 1d       	adc	r22, r1
    2c4a:	23 1f       	adc	r18, r19
    2c4c:	84 9f       	mul	r24, r20
    2c4e:	60 0d       	add	r22, r0
    2c50:	21 1d       	adc	r18, r1
    2c52:	82 2f       	mov	r24, r18
    2c54:	76 2f       	mov	r23, r22
    2c56:	6a 2f       	mov	r22, r26
    2c58:	11 24       	eor	r1, r1
    2c5a:	9f 57       	subi	r25, 0x7F	; 127
    2c5c:	50 40       	sbci	r21, 0x00	; 0
    2c5e:	8a f0       	brmi	.+34     	; 0x2c82 <__mulsf3_pse+0x84>
    2c60:	e1 f0       	breq	.+56     	; 0x2c9a <__mulsf3_pse+0x9c>
    2c62:	88 23       	and	r24, r24
    2c64:	4a f0       	brmi	.+18     	; 0x2c78 <__mulsf3_pse+0x7a>
    2c66:	ee 0f       	add	r30, r30
    2c68:	ff 1f       	adc	r31, r31
    2c6a:	bb 1f       	adc	r27, r27
    2c6c:	66 1f       	adc	r22, r22
    2c6e:	77 1f       	adc	r23, r23
    2c70:	88 1f       	adc	r24, r24
    2c72:	91 50       	subi	r25, 0x01	; 1
    2c74:	50 40       	sbci	r21, 0x00	; 0
    2c76:	a9 f7       	brne	.-22     	; 0x2c62 <__mulsf3_pse+0x64>
    2c78:	9e 3f       	cpi	r25, 0xFE	; 254
    2c7a:	51 05       	cpc	r21, r1
    2c7c:	70 f0       	brcs	.+28     	; 0x2c9a <__mulsf3_pse+0x9c>
    2c7e:	60 cf       	rjmp	.-320    	; 0x2b40 <__fp_inf>
    2c80:	aa cf       	rjmp	.-172    	; 0x2bd6 <__fp_szero>
    2c82:	5f 3f       	cpi	r21, 0xFF	; 255
    2c84:	ec f3       	brlt	.-6      	; 0x2c80 <__mulsf3_pse+0x82>
    2c86:	98 3e       	cpi	r25, 0xE8	; 232
    2c88:	dc f3       	brlt	.-10     	; 0x2c80 <__mulsf3_pse+0x82>
    2c8a:	86 95       	lsr	r24
    2c8c:	77 95       	ror	r23
    2c8e:	67 95       	ror	r22
    2c90:	b7 95       	ror	r27
    2c92:	f7 95       	ror	r31
    2c94:	e7 95       	ror	r30
    2c96:	9f 5f       	subi	r25, 0xFF	; 255
    2c98:	c1 f7       	brne	.-16     	; 0x2c8a <__mulsf3_pse+0x8c>
    2c9a:	fe 2b       	or	r31, r30
    2c9c:	88 0f       	add	r24, r24
    2c9e:	91 1d       	adc	r25, r1
    2ca0:	96 95       	lsr	r25
    2ca2:	87 95       	ror	r24
    2ca4:	97 f9       	bld	r25, 7
    2ca6:	08 95       	ret

00002ca8 <__tablejump2__>:
    2ca8:	ee 0f       	add	r30, r30
    2caa:	ff 1f       	adc	r31, r31
    2cac:	88 1f       	adc	r24, r24
    2cae:	8b bf       	out	0x3b, r24	; 59
    2cb0:	07 90       	elpm	r0, Z+
    2cb2:	f6 91       	elpm	r31, Z
    2cb4:	e0 2d       	mov	r30, r0
    2cb6:	19 94       	eijmp

00002cb8 <malloc>:
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	cf 93       	push	r28
    2cbe:	df 93       	push	r29
    2cc0:	82 30       	cpi	r24, 0x02	; 2
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	10 f4       	brcc	.+4      	; 0x2cca <malloc+0x12>
    2cc6:	82 e0       	ldi	r24, 0x02	; 2
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	e0 91 1b 0d 	lds	r30, 0x0D1B	; 0x800d1b <__flp>
    2cce:	f0 91 1c 0d 	lds	r31, 0x0D1C	; 0x800d1c <__flp+0x1>
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	a0 e0       	ldi	r26, 0x00	; 0
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	30 97       	sbiw	r30, 0x00	; 0
    2cdc:	19 f1       	breq	.+70     	; 0x2d24 <malloc+0x6c>
    2cde:	40 81       	ld	r20, Z
    2ce0:	51 81       	ldd	r21, Z+1	; 0x01
    2ce2:	02 81       	ldd	r16, Z+2	; 0x02
    2ce4:	13 81       	ldd	r17, Z+3	; 0x03
    2ce6:	48 17       	cp	r20, r24
    2ce8:	59 07       	cpc	r21, r25
    2cea:	c8 f0       	brcs	.+50     	; 0x2d1e <malloc+0x66>
    2cec:	84 17       	cp	r24, r20
    2cee:	95 07       	cpc	r25, r21
    2cf0:	69 f4       	brne	.+26     	; 0x2d0c <malloc+0x54>
    2cf2:	10 97       	sbiw	r26, 0x00	; 0
    2cf4:	31 f0       	breq	.+12     	; 0x2d02 <malloc+0x4a>
    2cf6:	12 96       	adiw	r26, 0x02	; 2
    2cf8:	0c 93       	st	X, r16
    2cfa:	12 97       	sbiw	r26, 0x02	; 2
    2cfc:	13 96       	adiw	r26, 0x03	; 3
    2cfe:	1c 93       	st	X, r17
    2d00:	27 c0       	rjmp	.+78     	; 0x2d50 <malloc+0x98>
    2d02:	00 93 1b 0d 	sts	0x0D1B, r16	; 0x800d1b <__flp>
    2d06:	10 93 1c 0d 	sts	0x0D1C, r17	; 0x800d1c <__flp+0x1>
    2d0a:	22 c0       	rjmp	.+68     	; 0x2d50 <malloc+0x98>
    2d0c:	21 15       	cp	r18, r1
    2d0e:	31 05       	cpc	r19, r1
    2d10:	19 f0       	breq	.+6      	; 0x2d18 <malloc+0x60>
    2d12:	42 17       	cp	r20, r18
    2d14:	53 07       	cpc	r21, r19
    2d16:	18 f4       	brcc	.+6      	; 0x2d1e <malloc+0x66>
    2d18:	9a 01       	movw	r18, r20
    2d1a:	bd 01       	movw	r22, r26
    2d1c:	ef 01       	movw	r28, r30
    2d1e:	df 01       	movw	r26, r30
    2d20:	f8 01       	movw	r30, r16
    2d22:	db cf       	rjmp	.-74     	; 0x2cda <malloc+0x22>
    2d24:	21 15       	cp	r18, r1
    2d26:	31 05       	cpc	r19, r1
    2d28:	f9 f0       	breq	.+62     	; 0x2d68 <malloc+0xb0>
    2d2a:	28 1b       	sub	r18, r24
    2d2c:	39 0b       	sbc	r19, r25
    2d2e:	24 30       	cpi	r18, 0x04	; 4
    2d30:	31 05       	cpc	r19, r1
    2d32:	80 f4       	brcc	.+32     	; 0x2d54 <malloc+0x9c>
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	61 15       	cp	r22, r1
    2d3a:	71 05       	cpc	r23, r1
    2d3c:	21 f0       	breq	.+8      	; 0x2d46 <malloc+0x8e>
    2d3e:	fb 01       	movw	r30, r22
    2d40:	93 83       	std	Z+3, r25	; 0x03
    2d42:	82 83       	std	Z+2, r24	; 0x02
    2d44:	04 c0       	rjmp	.+8      	; 0x2d4e <malloc+0x96>
    2d46:	90 93 1c 0d 	sts	0x0D1C, r25	; 0x800d1c <__flp+0x1>
    2d4a:	80 93 1b 0d 	sts	0x0D1B, r24	; 0x800d1b <__flp>
    2d4e:	fe 01       	movw	r30, r28
    2d50:	32 96       	adiw	r30, 0x02	; 2
    2d52:	44 c0       	rjmp	.+136    	; 0x2ddc <malloc+0x124>
    2d54:	fe 01       	movw	r30, r28
    2d56:	e2 0f       	add	r30, r18
    2d58:	f3 1f       	adc	r31, r19
    2d5a:	81 93       	st	Z+, r24
    2d5c:	91 93       	st	Z+, r25
    2d5e:	22 50       	subi	r18, 0x02	; 2
    2d60:	31 09       	sbc	r19, r1
    2d62:	39 83       	std	Y+1, r19	; 0x01
    2d64:	28 83       	st	Y, r18
    2d66:	3a c0       	rjmp	.+116    	; 0x2ddc <malloc+0x124>
    2d68:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <__brkval>
    2d6c:	30 91 1a 0d 	lds	r19, 0x0D1A	; 0x800d1a <__brkval+0x1>
    2d70:	23 2b       	or	r18, r19
    2d72:	41 f4       	brne	.+16     	; 0x2d84 <malloc+0xcc>
    2d74:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    2d78:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    2d7c:	30 93 1a 0d 	sts	0x0D1A, r19	; 0x800d1a <__brkval+0x1>
    2d80:	20 93 19 0d 	sts	0x0D19, r18	; 0x800d19 <__brkval>
    2d84:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2d88:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2d8c:	21 15       	cp	r18, r1
    2d8e:	31 05       	cpc	r19, r1
    2d90:	41 f4       	brne	.+16     	; 0x2da2 <malloc+0xea>
    2d92:	2d b7       	in	r18, 0x3d	; 61
    2d94:	3e b7       	in	r19, 0x3e	; 62
    2d96:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2d9a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2d9e:	24 1b       	sub	r18, r20
    2da0:	35 0b       	sbc	r19, r21
    2da2:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <__brkval>
    2da6:	f0 91 1a 0d 	lds	r31, 0x0D1A	; 0x800d1a <__brkval+0x1>
    2daa:	e2 17       	cp	r30, r18
    2dac:	f3 07       	cpc	r31, r19
    2dae:	a0 f4       	brcc	.+40     	; 0x2dd8 <malloc+0x120>
    2db0:	2e 1b       	sub	r18, r30
    2db2:	3f 0b       	sbc	r19, r31
    2db4:	28 17       	cp	r18, r24
    2db6:	39 07       	cpc	r19, r25
    2db8:	78 f0       	brcs	.+30     	; 0x2dd8 <malloc+0x120>
    2dba:	ac 01       	movw	r20, r24
    2dbc:	4e 5f       	subi	r20, 0xFE	; 254
    2dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc0:	24 17       	cp	r18, r20
    2dc2:	35 07       	cpc	r19, r21
    2dc4:	48 f0       	brcs	.+18     	; 0x2dd8 <malloc+0x120>
    2dc6:	4e 0f       	add	r20, r30
    2dc8:	5f 1f       	adc	r21, r31
    2dca:	50 93 1a 0d 	sts	0x0D1A, r21	; 0x800d1a <__brkval+0x1>
    2dce:	40 93 19 0d 	sts	0x0D19, r20	; 0x800d19 <__brkval>
    2dd2:	81 93       	st	Z+, r24
    2dd4:	91 93       	st	Z+, r25
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <malloc+0x124>
    2dd8:	e0 e0       	ldi	r30, 0x00	; 0
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	cf 01       	movw	r24, r30
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	1f 91       	pop	r17
    2de4:	0f 91       	pop	r16
    2de6:	08 95       	ret

00002de8 <free>:
    2de8:	cf 93       	push	r28
    2dea:	df 93       	push	r29
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <free+0xa>
    2df0:	81 c0       	rjmp	.+258    	; 0x2ef4 <free+0x10c>
    2df2:	fc 01       	movw	r30, r24
    2df4:	32 97       	sbiw	r30, 0x02	; 2
    2df6:	13 82       	std	Z+3, r1	; 0x03
    2df8:	12 82       	std	Z+2, r1	; 0x02
    2dfa:	a0 91 1b 0d 	lds	r26, 0x0D1B	; 0x800d1b <__flp>
    2dfe:	b0 91 1c 0d 	lds	r27, 0x0D1C	; 0x800d1c <__flp+0x1>
    2e02:	10 97       	sbiw	r26, 0x00	; 0
    2e04:	81 f4       	brne	.+32     	; 0x2e26 <free+0x3e>
    2e06:	20 81       	ld	r18, Z
    2e08:	31 81       	ldd	r19, Z+1	; 0x01
    2e0a:	82 0f       	add	r24, r18
    2e0c:	93 1f       	adc	r25, r19
    2e0e:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <__brkval>
    2e12:	30 91 1a 0d 	lds	r19, 0x0D1A	; 0x800d1a <__brkval+0x1>
    2e16:	28 17       	cp	r18, r24
    2e18:	39 07       	cpc	r19, r25
    2e1a:	51 f5       	brne	.+84     	; 0x2e70 <free+0x88>
    2e1c:	f0 93 1a 0d 	sts	0x0D1A, r31	; 0x800d1a <__brkval+0x1>
    2e20:	e0 93 19 0d 	sts	0x0D19, r30	; 0x800d19 <__brkval>
    2e24:	67 c0       	rjmp	.+206    	; 0x2ef4 <free+0x10c>
    2e26:	ed 01       	movw	r28, r26
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	ce 17       	cp	r28, r30
    2e2e:	df 07       	cpc	r29, r31
    2e30:	40 f4       	brcc	.+16     	; 0x2e42 <free+0x5a>
    2e32:	4a 81       	ldd	r20, Y+2	; 0x02
    2e34:	5b 81       	ldd	r21, Y+3	; 0x03
    2e36:	9e 01       	movw	r18, r28
    2e38:	41 15       	cp	r20, r1
    2e3a:	51 05       	cpc	r21, r1
    2e3c:	f1 f0       	breq	.+60     	; 0x2e7a <free+0x92>
    2e3e:	ea 01       	movw	r28, r20
    2e40:	f5 cf       	rjmp	.-22     	; 0x2e2c <free+0x44>
    2e42:	d3 83       	std	Z+3, r29	; 0x03
    2e44:	c2 83       	std	Z+2, r28	; 0x02
    2e46:	40 81       	ld	r20, Z
    2e48:	51 81       	ldd	r21, Z+1	; 0x01
    2e4a:	84 0f       	add	r24, r20
    2e4c:	95 1f       	adc	r25, r21
    2e4e:	c8 17       	cp	r28, r24
    2e50:	d9 07       	cpc	r29, r25
    2e52:	59 f4       	brne	.+22     	; 0x2e6a <free+0x82>
    2e54:	88 81       	ld	r24, Y
    2e56:	99 81       	ldd	r25, Y+1	; 0x01
    2e58:	84 0f       	add	r24, r20
    2e5a:	95 1f       	adc	r25, r21
    2e5c:	02 96       	adiw	r24, 0x02	; 2
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
    2e62:	8a 81       	ldd	r24, Y+2	; 0x02
    2e64:	9b 81       	ldd	r25, Y+3	; 0x03
    2e66:	93 83       	std	Z+3, r25	; 0x03
    2e68:	82 83       	std	Z+2, r24	; 0x02
    2e6a:	21 15       	cp	r18, r1
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	29 f4       	brne	.+10     	; 0x2e7a <free+0x92>
    2e70:	f0 93 1c 0d 	sts	0x0D1C, r31	; 0x800d1c <__flp+0x1>
    2e74:	e0 93 1b 0d 	sts	0x0D1B, r30	; 0x800d1b <__flp>
    2e78:	3d c0       	rjmp	.+122    	; 0x2ef4 <free+0x10c>
    2e7a:	e9 01       	movw	r28, r18
    2e7c:	fb 83       	std	Y+3, r31	; 0x03
    2e7e:	ea 83       	std	Y+2, r30	; 0x02
    2e80:	49 91       	ld	r20, Y+
    2e82:	59 91       	ld	r21, Y+
    2e84:	c4 0f       	add	r28, r20
    2e86:	d5 1f       	adc	r29, r21
    2e88:	ec 17       	cp	r30, r28
    2e8a:	fd 07       	cpc	r31, r29
    2e8c:	61 f4       	brne	.+24     	; 0x2ea6 <free+0xbe>
    2e8e:	80 81       	ld	r24, Z
    2e90:	91 81       	ldd	r25, Z+1	; 0x01
    2e92:	84 0f       	add	r24, r20
    2e94:	95 1f       	adc	r25, r21
    2e96:	02 96       	adiw	r24, 0x02	; 2
    2e98:	e9 01       	movw	r28, r18
    2e9a:	99 83       	std	Y+1, r25	; 0x01
    2e9c:	88 83       	st	Y, r24
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	9b 83       	std	Y+3, r25	; 0x03
    2ea4:	8a 83       	std	Y+2, r24	; 0x02
    2ea6:	e0 e0       	ldi	r30, 0x00	; 0
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	12 96       	adiw	r26, 0x02	; 2
    2eac:	8d 91       	ld	r24, X+
    2eae:	9c 91       	ld	r25, X
    2eb0:	13 97       	sbiw	r26, 0x03	; 3
    2eb2:	00 97       	sbiw	r24, 0x00	; 0
    2eb4:	19 f0       	breq	.+6      	; 0x2ebc <free+0xd4>
    2eb6:	fd 01       	movw	r30, r26
    2eb8:	dc 01       	movw	r26, r24
    2eba:	f7 cf       	rjmp	.-18     	; 0x2eaa <free+0xc2>
    2ebc:	8d 91       	ld	r24, X+
    2ebe:	9c 91       	ld	r25, X
    2ec0:	11 97       	sbiw	r26, 0x01	; 1
    2ec2:	9d 01       	movw	r18, r26
    2ec4:	2e 5f       	subi	r18, 0xFE	; 254
    2ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec8:	82 0f       	add	r24, r18
    2eca:	93 1f       	adc	r25, r19
    2ecc:	20 91 19 0d 	lds	r18, 0x0D19	; 0x800d19 <__brkval>
    2ed0:	30 91 1a 0d 	lds	r19, 0x0D1A	; 0x800d1a <__brkval+0x1>
    2ed4:	28 17       	cp	r18, r24
    2ed6:	39 07       	cpc	r19, r25
    2ed8:	69 f4       	brne	.+26     	; 0x2ef4 <free+0x10c>
    2eda:	30 97       	sbiw	r30, 0x00	; 0
    2edc:	29 f4       	brne	.+10     	; 0x2ee8 <free+0x100>
    2ede:	10 92 1c 0d 	sts	0x0D1C, r1	; 0x800d1c <__flp+0x1>
    2ee2:	10 92 1b 0d 	sts	0x0D1B, r1	; 0x800d1b <__flp>
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <free+0x104>
    2ee8:	13 82       	std	Z+3, r1	; 0x03
    2eea:	12 82       	std	Z+2, r1	; 0x02
    2eec:	b0 93 1a 0d 	sts	0x0D1A, r27	; 0x800d1a <__brkval+0x1>
    2ef0:	a0 93 19 0d 	sts	0x0D19, r26	; 0x800d19 <__brkval>
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	08 95       	ret

00002efa <abort>:
    2efa:	81 e0       	ldi	r24, 0x01	; 1
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	f8 94       	cli
    2f00:	40 c0       	rjmp	.+128    	; 0x2f82 <_exit>

00002f02 <memcpy>:
    2f02:	fb 01       	movw	r30, r22
    2f04:	dc 01       	movw	r26, r24
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <memcpy+0xa>
    2f08:	01 90       	ld	r0, Z+
    2f0a:	0d 92       	st	X+, r0
    2f0c:	41 50       	subi	r20, 0x01	; 1
    2f0e:	50 40       	sbci	r21, 0x00	; 0
    2f10:	d8 f7       	brcc	.-10     	; 0x2f08 <memcpy+0x6>
    2f12:	08 95       	ret

00002f14 <memset>:
    2f14:	dc 01       	movw	r26, r24
    2f16:	01 c0       	rjmp	.+2      	; 0x2f1a <memset+0x6>
    2f18:	6d 93       	st	X+, r22
    2f1a:	41 50       	subi	r20, 0x01	; 1
    2f1c:	50 40       	sbci	r21, 0x00	; 0
    2f1e:	e0 f7       	brcc	.-8      	; 0x2f18 <memset+0x4>
    2f20:	08 95       	ret

00002f22 <puts>:
    2f22:	0f 93       	push	r16
    2f24:	1f 93       	push	r17
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	e0 91 1f 0d 	lds	r30, 0x0D1F	; 0x800d1f <__iob+0x2>
    2f2e:	f0 91 20 0d 	lds	r31, 0x0D20	; 0x800d20 <__iob+0x3>
    2f32:	23 81       	ldd	r18, Z+3	; 0x03
    2f34:	21 ff       	sbrs	r18, 1
    2f36:	1b c0       	rjmp	.+54     	; 0x2f6e <puts+0x4c>
    2f38:	8c 01       	movw	r16, r24
    2f3a:	d0 e0       	ldi	r29, 0x00	; 0
    2f3c:	c0 e0       	ldi	r28, 0x00	; 0
    2f3e:	f8 01       	movw	r30, r16
    2f40:	81 91       	ld	r24, Z+
    2f42:	8f 01       	movw	r16, r30
    2f44:	60 91 1f 0d 	lds	r22, 0x0D1F	; 0x800d1f <__iob+0x2>
    2f48:	70 91 20 0d 	lds	r23, 0x0D20	; 0x800d20 <__iob+0x3>
    2f4c:	db 01       	movw	r26, r22
    2f4e:	18 96       	adiw	r26, 0x08	; 8
    2f50:	ed 91       	ld	r30, X+
    2f52:	fc 91       	ld	r31, X
    2f54:	19 97       	sbiw	r26, 0x09	; 9
    2f56:	88 23       	and	r24, r24
    2f58:	31 f0       	breq	.+12     	; 0x2f66 <puts+0x44>
    2f5a:	19 95       	eicall
    2f5c:	89 2b       	or	r24, r25
    2f5e:	79 f3       	breq	.-34     	; 0x2f3e <puts+0x1c>
    2f60:	df ef       	ldi	r29, 0xFF	; 255
    2f62:	cf ef       	ldi	r28, 0xFF	; 255
    2f64:	ec cf       	rjmp	.-40     	; 0x2f3e <puts+0x1c>
    2f66:	8a e0       	ldi	r24, 0x0A	; 10
    2f68:	19 95       	eicall
    2f6a:	89 2b       	or	r24, r25
    2f6c:	19 f0       	breq	.+6      	; 0x2f74 <puts+0x52>
    2f6e:	8f ef       	ldi	r24, 0xFF	; 255
    2f70:	9f ef       	ldi	r25, 0xFF	; 255
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <puts+0x56>
    2f74:	8d 2f       	mov	r24, r29
    2f76:	9c 2f       	mov	r25, r28
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	08 95       	ret

00002f82 <_exit>:
    2f82:	f8 94       	cli

00002f84 <__stop_program>:
    2f84:	ff cf       	rjmp	.-2      	; 0x2f84 <__stop_program>
