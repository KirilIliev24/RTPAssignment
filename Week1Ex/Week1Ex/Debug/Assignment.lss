
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800200  00003716  000037aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ad8  00800248  00800248  000037f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000037f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  00003864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000082f1  00000000  00000000  00003ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020de  00000000  00000000  0000c1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000041e5  00000000  00000000  0000e28b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001728  00000000  00000000  00012470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002838  00000000  00000000  00013b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007675  00000000  00000000  000163d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  0001da45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	99 c3       	rjmp	.+1842   	; 0x764 <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__vector_25>
      68:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__vector_36>
      94:	0c 94 57 16 	jmp	0x2cae	; 0x2cae <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__vector_51>
      d0:	0c 94 ed 16 	jmp	0x2dda	; 0x2dda <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__vector_54>
      dc:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	54 12       	cpse	r5, r20
      e6:	54 12       	cpse	r5, r20
      e8:	54 12       	cpse	r5, r20
      ea:	8b 12       	cpse	r8, r27
      ec:	93 12       	cpse	r9, r19
      ee:	a8 12       	cpse	r10, r24
      f0:	54 12       	cpse	r5, r20
      f2:	54 12       	cpse	r5, r20
      f4:	8b 12       	cpse	r8, r27
      f6:	93 12       	cpse	r9, r19

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 83 08 	call	0x1106	; 0x1106 <prvCheckTasksWaitingTermination>
      fc:	80 91 6d 0c 	lds	r24, 0x0C6D	; 0x800c6d <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	6a d2       	rcall	.+1236   	; 0x5da <vPortYield>
     106:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 ca 11 	call	0x2394	; 0x2394 <prvProcessTimerOrBlockTask>
     124:	0e 94 1e 12 	call	0x243c	; 0x243c <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e6 e1       	ldi	r30, 0x16	; 22
     142:	f7 e3       	ldi	r31, 0x37	; 55
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a8 34       	cpi	r26, 0x48	; 72
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	2d e0       	ldi	r18, 0x0D	; 13
     156:	a8 e4       	ldi	r26, 0x48	; 72
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a0 32       	cpi	r26, 0x20	; 32
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 14 14 	call	0x2828	; 0x2828 <main>
     168:	0c 94 89 1b 	jmp	0x3712	; 0x3712 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     16e:	e8 e0       	ldi	r30, 0x08	; 8
     170:	f1 e0       	ldi	r31, 0x01	; 1
     172:	90 81       	ld	r25, Z
     174:	90 7f       	andi	r25, 0xF0	; 240
     176:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     178:	90 81       	ld	r25, Z
     17a:	8f 70       	andi	r24, 0x0F	; 15
     17c:	98 2b       	or	r25, r24
     17e:	90 83       	st	Z, r25
     180:	08 95       	ret

00000182 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     182:	e8 e0       	ldi	r30, 0x08	; 8
     184:	f1 e0       	ldi	r31, 0x01	; 1
     186:	80 81       	ld	r24, Z
     188:	80 7f       	andi	r24, 0xF0	; 240
     18a:	80 83       	st	Z, r24
     18c:	08 95       	ret

0000018e <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     18e:	e4 e5       	ldi	r30, 0x54	; 84
     190:	f2 e0       	ldi	r31, 0x02	; 2
     192:	a8 e5       	ldi	r26, 0x58	; 88
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	b1 83       	std	Z+1, r27	; 0x01
     198:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     19a:	13 82       	std	Z+3, r1	; 0x03
     19c:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     19e:	e8 e1       	ldi	r30, 0x18	; 24
     1a0:	fc e0       	ldi	r31, 0x0C	; 12
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     1a2:	f0 93 53 02 	sts	0x0253, r31	; 0x800253 <pxEnd+0x1>
     1a6:	e0 93 52 02 	sts	0x0252, r30	; 0x800252 <pxEnd>
    pxEnd->xBlockSize = 0;
     1aa:	13 82       	std	Z+3, r1	; 0x03
     1ac:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     1ae:	11 82       	std	Z+1, r1	; 0x01
     1b0:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     1b2:	80 ec       	ldi	r24, 0xC0	; 192
     1b4:	99 e0       	ldi	r25, 0x09	; 9
     1b6:	13 96       	adiw	r26, 0x03	; 3
     1b8:	9c 93       	st	X, r25
     1ba:	8e 93       	st	-X, r24
     1bc:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     1be:	ed 93       	st	X+, r30
     1c0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1c2:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <xMinimumEverFreeBytesRemaining+0x1>
     1c6:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     1ca:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <xFreeBytesRemaining+0x1>
     1ce:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e8       	ldi	r25, 0x80	; 128
     1d6:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <__data_end+0x1>
     1da:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <__data_end>
     1de:	08 95       	ret

000001e0 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     1e0:	cf 93       	push	r28
     1e2:	df 93       	push	r29
     1e4:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     1e6:	a4 e5       	ldi	r26, 0x54	; 84
     1e8:	b2 e0       	ldi	r27, 0x02	; 2
     1ea:	01 c0       	rjmp	.+2      	; 0x1ee <prvInsertBlockIntoFreeList+0xe>
     1ec:	df 01       	movw	r26, r30
     1ee:	ed 91       	ld	r30, X+
     1f0:	fc 91       	ld	r31, X
     1f2:	11 97       	sbiw	r26, 0x01	; 1
     1f4:	ec 17       	cp	r30, r28
     1f6:	fd 07       	cpc	r31, r29
     1f8:	c8 f3       	brcs	.-14     	; 0x1ec <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     1fa:	12 96       	adiw	r26, 0x02	; 2
     1fc:	8d 91       	ld	r24, X+
     1fe:	9c 91       	ld	r25, X
     200:	13 97       	sbiw	r26, 0x03	; 3
     202:	9d 01       	movw	r18, r26
     204:	28 0f       	add	r18, r24
     206:	39 1f       	adc	r19, r25
     208:	c2 17       	cp	r28, r18
     20a:	d3 07       	cpc	r29, r19
     20c:	49 f4       	brne	.+18     	; 0x220 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     20e:	2a 81       	ldd	r18, Y+2	; 0x02
     210:	3b 81       	ldd	r19, Y+3	; 0x03
     212:	82 0f       	add	r24, r18
     214:	93 1f       	adc	r25, r19
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 93       	st	X, r25
     21a:	8e 93       	st	-X, r24
     21c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     21e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     220:	8a 81       	ldd	r24, Y+2	; 0x02
     222:	9b 81       	ldd	r25, Y+3	; 0x03
     224:	9e 01       	movw	r18, r28
     226:	28 0f       	add	r18, r24
     228:	39 1f       	adc	r19, r25
     22a:	e2 17       	cp	r30, r18
     22c:	f3 07       	cpc	r31, r19
     22e:	c1 f4       	brne	.+48     	; 0x260 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     230:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <pxEnd>
     234:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <pxEnd+0x1>
     238:	e2 17       	cp	r30, r18
     23a:	f3 07       	cpc	r31, r19
     23c:	71 f0       	breq	.+28     	; 0x25a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     23e:	22 81       	ldd	r18, Z+2	; 0x02
     240:	33 81       	ldd	r19, Z+3	; 0x03
     242:	82 0f       	add	r24, r18
     244:	93 1f       	adc	r25, r19
     246:	9b 83       	std	Y+3, r25	; 0x03
     248:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     24a:	ed 91       	ld	r30, X+
     24c:	fc 91       	ld	r31, X
     24e:	11 97       	sbiw	r26, 0x01	; 1
     250:	80 81       	ld	r24, Z
     252:	91 81       	ldd	r25, Z+1	; 0x01
     254:	99 83       	std	Y+1, r25	; 0x01
     256:	88 83       	st	Y, r24
     258:	05 c0       	rjmp	.+10     	; 0x264 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     25a:	39 83       	std	Y+1, r19	; 0x01
     25c:	28 83       	st	Y, r18
     25e:	02 c0       	rjmp	.+4      	; 0x264 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     260:	f9 83       	std	Y+1, r31	; 0x01
     262:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     264:	ca 17       	cp	r28, r26
     266:	db 07       	cpc	r29, r27
     268:	11 f0       	breq	.+4      	; 0x26e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     26a:	cd 93       	st	X+, r28
     26c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     282:	0e 94 ce 09 	call	0x139c	; 0x139c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     286:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <pxEnd>
     28a:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <pxEnd+0x1>
     28e:	89 2b       	or	r24, r25
     290:	09 f4       	brne	.+2      	; 0x294 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     292:	7d df       	rcall	.-262    	; 0x18e <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     294:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <__data_end>
     298:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <__data_end+0x1>
     29c:	80 23       	and	r24, r16
     29e:	91 23       	and	r25, r17
     2a0:	89 2b       	or	r24, r25
     2a2:	09 f0       	breq	.+2      	; 0x2a6 <pvPortMalloc+0x32>
     2a4:	76 c0       	rjmp	.+236    	; 0x392 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2a6:	01 15       	cp	r16, r1
     2a8:	11 05       	cpc	r17, r1
     2aa:	49 f0       	breq	.+18     	; 0x2be <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     2ac:	c8 01       	movw	r24, r16
     2ae:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     2b0:	08 17       	cp	r16, r24
     2b2:	19 07       	cpc	r17, r25
     2b4:	18 f0       	brcs	.+6      	; 0x2bc <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     2b6:	00 e0       	ldi	r16, 0x00	; 0
     2b8:	10 e0       	ldi	r17, 0x00	; 0
     2ba:	01 c0       	rjmp	.+2      	; 0x2be <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     2bc:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     2be:	01 15       	cp	r16, r1
     2c0:	11 05       	cpc	r17, r1
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <pvPortMalloc+0x52>
     2c4:	69 c0       	rjmp	.+210    	; 0x398 <pvPortMalloc+0x124>
     2c6:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <xFreeBytesRemaining>
     2ca:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <xFreeBytesRemaining+0x1>
     2ce:	80 17       	cp	r24, r16
     2d0:	91 07       	cpc	r25, r17
     2d2:	08 f4       	brcc	.+2      	; 0x2d6 <pvPortMalloc+0x62>
     2d4:	64 c0       	rjmp	.+200    	; 0x39e <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     2d6:	c0 91 54 02 	lds	r28, 0x0254	; 0x800254 <xStart>
     2da:	d0 91 55 02 	lds	r29, 0x0255	; 0x800255 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     2de:	e4 e5       	ldi	r30, 0x54	; 84
     2e0:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     2e4:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     2e6:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     2e8:	8a 81       	ldd	r24, Y+2	; 0x02
     2ea:	9b 81       	ldd	r25, Y+3	; 0x03
     2ec:	80 17       	cp	r24, r16
     2ee:	91 07       	cpc	r25, r17
     2f0:	20 f4       	brcc	.+8      	; 0x2fa <pvPortMalloc+0x86>
     2f2:	88 81       	ld	r24, Y
     2f4:	99 81       	ldd	r25, Y+1	; 0x01
     2f6:	00 97       	sbiw	r24, 0x00	; 0
     2f8:	a9 f7       	brne	.-22     	; 0x2e4 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     2fa:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <pxEnd>
     2fe:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <pxEnd+0x1>
     302:	c8 17       	cp	r28, r24
     304:	d9 07       	cpc	r29, r25
     306:	09 f4       	brne	.+2      	; 0x30a <pvPortMalloc+0x96>
     308:	4d c0       	rjmp	.+154    	; 0x3a4 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     30a:	e0 80       	ld	r14, Z
     30c:	f1 80       	ldd	r15, Z+1	; 0x01
     30e:	84 e0       	ldi	r24, 0x04	; 4
     310:	e8 0e       	add	r14, r24
     312:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     314:	88 81       	ld	r24, Y
     316:	99 81       	ldd	r25, Y+1	; 0x01
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     31c:	2a 81       	ldd	r18, Y+2	; 0x02
     31e:	3b 81       	ldd	r19, Y+3	; 0x03
     320:	20 1b       	sub	r18, r16
     322:	31 0b       	sbc	r19, r17
     324:	29 30       	cpi	r18, 0x09	; 9
     326:	31 05       	cpc	r19, r1
     328:	48 f0       	brcs	.+18     	; 0x33c <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     32a:	ce 01       	movw	r24, r28
     32c:	80 0f       	add	r24, r16
     32e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     330:	fc 01       	movw	r30, r24
     332:	33 83       	std	Z+3, r19	; 0x03
     334:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     336:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     338:	0a 83       	std	Y+2, r16	; 0x02
     33a:	52 df       	rcall	.-348    	; 0x1e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <xFreeBytesRemaining>
     344:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <xFreeBytesRemaining+0x1>
     348:	82 1b       	sub	r24, r18
     34a:	93 0b       	sbc	r25, r19
     34c:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <xFreeBytesRemaining+0x1>
     350:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     354:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <xMinimumEverFreeBytesRemaining>
     358:	50 91 4f 02 	lds	r21, 0x024F	; 0x80024f <xMinimumEverFreeBytesRemaining+0x1>
     35c:	84 17       	cp	r24, r20
     35e:	95 07       	cpc	r25, r21
     360:	20 f4       	brcc	.+8      	; 0x36a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     362:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <xMinimumEverFreeBytesRemaining+0x1>
     366:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     36a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <__data_end>
     36e:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <__data_end+0x1>
     372:	28 2b       	or	r18, r24
     374:	39 2b       	or	r19, r25
     376:	3b 83       	std	Y+3, r19	; 0x03
     378:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     37a:	19 82       	std	Y+1, r1	; 0x01
     37c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     37e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <xNumberOfSuccessfulAllocations>
     382:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <xNumberOfSuccessfulAllocations+0x1>
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <xNumberOfSuccessfulAllocations+0x1>
     38c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <xNumberOfSuccessfulAllocations>
     390:	0b c0       	rjmp	.+22     	; 0x3a8 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     392:	e1 2c       	mov	r14, r1
     394:	f1 2c       	mov	r15, r1
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <pvPortMalloc+0x134>
     398:	e1 2c       	mov	r14, r1
     39a:	f1 2c       	mov	r15, r1
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <pvPortMalloc+0x134>
     39e:	e1 2c       	mov	r14, r1
     3a0:	f1 2c       	mov	r15, r1
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <pvPortMalloc+0x134>
     3a4:	e1 2c       	mov	r14, r1
     3a6:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3a8:	0e 94 0e 0b 	call	0x161c	; 0x161c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     3ac:	e1 14       	cp	r14, r1
     3ae:	f1 04       	cpc	r15, r1
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     3b2:	0e 94 dd 12 	call	0x25ba	; 0x25ba <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     3b6:	c7 01       	movw	r24, r14
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	08 95       	ret

000003c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     3ce:	00 97       	sbiw	r24, 0x00	; 0
     3d0:	89 f1       	breq	.+98     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     3d2:	ec 01       	movw	r28, r24
     3d4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     3d6:	4a 81       	ldd	r20, Y+2	; 0x02
     3d8:	5b 81       	ldd	r21, Y+3	; 0x03
     3da:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__data_end>
     3de:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <__data_end+0x1>
     3e2:	ba 01       	movw	r22, r20
     3e4:	62 23       	and	r22, r18
     3e6:	73 23       	and	r23, r19
     3e8:	67 2b       	or	r22, r23
     3ea:	21 f1       	breq	.+72     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     3ec:	68 81       	ld	r22, Y
     3ee:	79 81       	ldd	r23, Y+1	; 0x01
     3f0:	67 2b       	or	r22, r23
     3f2:	01 f5       	brne	.+64     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     3f4:	20 95       	com	r18
     3f6:	30 95       	com	r19
     3f8:	24 23       	and	r18, r20
     3fa:	35 23       	and	r19, r21
     3fc:	3b 83       	std	Y+3, r19	; 0x03
     3fe:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     400:	cd d7       	rcall	.+3994   	; 0x139c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     402:	8a 81       	ldd	r24, Y+2	; 0x02
     404:	9b 81       	ldd	r25, Y+3	; 0x03
     406:	20 91 50 02 	lds	r18, 0x0250	; 0x800250 <xFreeBytesRemaining>
     40a:	30 91 51 02 	lds	r19, 0x0251	; 0x800251 <xFreeBytesRemaining+0x1>
     40e:	82 0f       	add	r24, r18
     410:	93 1f       	adc	r25, r19
     412:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <xFreeBytesRemaining+0x1>
     416:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     41a:	ce 01       	movw	r24, r28
     41c:	e1 de       	rcall	.-574    	; 0x1e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     41e:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <xNumberOfSuccessfulFrees>
     422:	90 91 4b 02 	lds	r25, 0x024B	; 0x80024b <xNumberOfSuccessfulFrees+0x1>
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <xNumberOfSuccessfulFrees+0x1>
     42c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     430:	0e 94 0e 0b 	call	0x161c	; 0x161c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     43e:	fc 01       	movw	r30, r24
     440:	03 96       	adiw	r24, 0x03	; 3
     442:	92 83       	std	Z+2, r25	; 0x02
     444:	81 83       	std	Z+1, r24	; 0x01
     446:	4f ef       	ldi	r20, 0xFF	; 255
     448:	5f ef       	ldi	r21, 0xFF	; 255
     44a:	ba 01       	movw	r22, r20
     44c:	43 83       	std	Z+3, r20	; 0x03
     44e:	54 83       	std	Z+4, r21	; 0x04
     450:	65 83       	std	Z+5, r22	; 0x05
     452:	76 83       	std	Z+6, r23	; 0x06
     454:	90 87       	std	Z+8, r25	; 0x08
     456:	87 83       	std	Z+7, r24	; 0x07
     458:	92 87       	std	Z+10, r25	; 0x0a
     45a:	81 87       	std	Z+9, r24	; 0x09
     45c:	10 82       	st	Z, r1
     45e:	08 95       	ret

00000460 <vListInitialiseItem>:
     460:	fc 01       	movw	r30, r24
     462:	13 86       	std	Z+11, r1	; 0x0b
     464:	12 86       	std	Z+10, r1	; 0x0a
     466:	08 95       	ret

00000468 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     472:	08 81       	ld	r16, Y
     474:	19 81       	ldd	r17, Y+1	; 0x01
     476:	2a 81       	ldd	r18, Y+2	; 0x02
     478:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     47a:	0f 3f       	cpi	r16, 0xFF	; 255
     47c:	4f ef       	ldi	r20, 0xFF	; 255
     47e:	14 07       	cpc	r17, r20
     480:	24 07       	cpc	r18, r20
     482:	34 07       	cpc	r19, r20
     484:	21 f4       	brne	.+8      	; 0x48e <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     486:	fc 01       	movw	r30, r24
     488:	a1 85       	ldd	r26, Z+9	; 0x09
     48a:	b2 85       	ldd	r27, Z+10	; 0x0a
     48c:	11 c0       	rjmp	.+34     	; 0x4b0 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     48e:	dc 01       	movw	r26, r24
     490:	13 96       	adiw	r26, 0x03	; 3
     492:	01 c0       	rjmp	.+2      	; 0x496 <vListInsert+0x2e>
     494:	df 01       	movw	r26, r30
     496:	14 96       	adiw	r26, 0x04	; 4
     498:	ed 91       	ld	r30, X+
     49a:	fc 91       	ld	r31, X
     49c:	15 97       	sbiw	r26, 0x05	; 5
     49e:	40 81       	ld	r20, Z
     4a0:	51 81       	ldd	r21, Z+1	; 0x01
     4a2:	62 81       	ldd	r22, Z+2	; 0x02
     4a4:	73 81       	ldd	r23, Z+3	; 0x03
     4a6:	04 17       	cp	r16, r20
     4a8:	15 07       	cpc	r17, r21
     4aa:	26 07       	cpc	r18, r22
     4ac:	37 07       	cpc	r19, r23
     4ae:	90 f7       	brcc	.-28     	; 0x494 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4b0:	14 96       	adiw	r26, 0x04	; 4
     4b2:	ed 91       	ld	r30, X+
     4b4:	fc 91       	ld	r31, X
     4b6:	15 97       	sbiw	r26, 0x05	; 5
     4b8:	fd 83       	std	Y+5, r31	; 0x05
     4ba:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4bc:	d7 83       	std	Z+7, r29	; 0x07
     4be:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     4c0:	bf 83       	std	Y+7, r27	; 0x07
     4c2:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     4c4:	15 96       	adiw	r26, 0x05	; 5
     4c6:	dc 93       	st	X, r29
     4c8:	ce 93       	st	-X, r28
     4ca:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     4cc:	9b 87       	std	Y+11, r25	; 0x0b
     4ce:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 81       	ld	r18, Z
     4d4:	2f 5f       	subi	r18, 0xFF	; 255
     4d6:	20 83       	st	Z, r18
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     4e8:	a2 85       	ldd	r26, Z+10	; 0x0a
     4ea:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4ec:	c4 81       	ldd	r28, Z+4	; 0x04
     4ee:	d5 81       	ldd	r29, Z+5	; 0x05
     4f0:	86 81       	ldd	r24, Z+6	; 0x06
     4f2:	97 81       	ldd	r25, Z+7	; 0x07
     4f4:	9f 83       	std	Y+7, r25	; 0x07
     4f6:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4f8:	c6 81       	ldd	r28, Z+6	; 0x06
     4fa:	d7 81       	ldd	r29, Z+7	; 0x07
     4fc:	84 81       	ldd	r24, Z+4	; 0x04
     4fe:	95 81       	ldd	r25, Z+5	; 0x05
     500:	9d 83       	std	Y+5, r25	; 0x05
     502:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     504:	11 96       	adiw	r26, 0x01	; 1
     506:	8d 91       	ld	r24, X+
     508:	9c 91       	ld	r25, X
     50a:	12 97       	sbiw	r26, 0x02	; 2
     50c:	e8 17       	cp	r30, r24
     50e:	f9 07       	cpc	r31, r25
     510:	31 f4       	brne	.+12     	; 0x51e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     512:	86 81       	ldd	r24, Z+6	; 0x06
     514:	97 81       	ldd	r25, Z+7	; 0x07
     516:	12 96       	adiw	r26, 0x02	; 2
     518:	9c 93       	st	X, r25
     51a:	8e 93       	st	-X, r24
     51c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     51e:	13 86       	std	Z+11, r1	; 0x0b
     520:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     522:	8c 91       	ld	r24, X
     524:	81 50       	subi	r24, 0x01	; 1
     526:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     528:	8c 91       	ld	r24, X
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     530:	a8 95       	wdr
     532:	90 ec       	ldi	r25, 0xC0	; 192
     534:	88 e1       	ldi	r24, 0x18	; 24
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	a8 95       	wdr
     53c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     540:	0f be       	out	0x3f, r0	; 63
     542:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     546:	08 95       	ret

00000548 <pxPortInitialiseStack>:
     548:	fc 01       	movw	r30, r24
     54a:	60 83       	st	Z, r22
     54c:	31 97       	sbiw	r30, 0x01	; 1
     54e:	70 83       	st	Z, r23
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	10 82       	st	Z, r1
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	10 82       	st	Z, r1
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	20 e8       	ldi	r18, 0x80	; 128
     55c:	20 83       	st	Z, r18
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	10 82       	st	Z, r1
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	10 82       	st	Z, r1
     566:	31 97       	sbiw	r30, 0x01	; 1
     568:	10 82       	st	Z, r1
     56a:	77 97       	sbiw	r30, 0x17	; 23
     56c:	40 83       	st	Z, r20
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	50 83       	st	Z, r21
     572:	86 97       	sbiw	r24, 0x26	; 38
     574:	08 95       	ret

00000576 <xPortStartScheduler>:
     576:	dc df       	rcall	.-72     	; 0x530 <prvSetupTimerInterrupt>
     578:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
     57c:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
     580:	cd 91       	ld	r28, X+
     582:	cd bf       	out	0x3d, r28	; 61
     584:	dd 91       	ld	r29, X+
     586:	de bf       	out	0x3e, r29	; 62
     588:	ff 91       	pop	r31
     58a:	ef 91       	pop	r30
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	bf 91       	pop	r27
     592:	af 91       	pop	r26
     594:	9f 91       	pop	r25
     596:	8f 91       	pop	r24
     598:	7f 91       	pop	r23
     59a:	6f 91       	pop	r22
     59c:	5f 91       	pop	r21
     59e:	4f 91       	pop	r20
     5a0:	3f 91       	pop	r19
     5a2:	2f 91       	pop	r18
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	ef 90       	pop	r14
     5ac:	df 90       	pop	r13
     5ae:	cf 90       	pop	r12
     5b0:	bf 90       	pop	r11
     5b2:	af 90       	pop	r10
     5b4:	9f 90       	pop	r9
     5b6:	8f 90       	pop	r8
     5b8:	7f 90       	pop	r7
     5ba:	6f 90       	pop	r6
     5bc:	5f 90       	pop	r5
     5be:	4f 90       	pop	r4
     5c0:	3f 90       	pop	r3
     5c2:	2f 90       	pop	r2
     5c4:	1f 90       	pop	r1
     5c6:	0f 90       	pop	r0
     5c8:	0c be       	out	0x3c, r0	; 60
     5ca:	0f 90       	pop	r0
     5cc:	0b be       	out	0x3b, r0	; 59
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f 90       	pop	r0
     5d4:	08 95       	ret
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	08 95       	ret

000005da <vPortYield>:
     5da:	0f 92       	push	r0
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	0f 92       	push	r0
     5e2:	0b b6       	in	r0, 0x3b	; 59
     5e4:	0f 92       	push	r0
     5e6:	0c b6       	in	r0, 0x3c	; 60
     5e8:	0f 92       	push	r0
     5ea:	1f 92       	push	r1
     5ec:	11 24       	eor	r1, r1
     5ee:	2f 92       	push	r2
     5f0:	3f 92       	push	r3
     5f2:	4f 92       	push	r4
     5f4:	5f 92       	push	r5
     5f6:	6f 92       	push	r6
     5f8:	7f 92       	push	r7
     5fa:	8f 92       	push	r8
     5fc:	9f 92       	push	r9
     5fe:	af 92       	push	r10
     600:	bf 92       	push	r11
     602:	cf 92       	push	r12
     604:	df 92       	push	r13
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	2f 93       	push	r18
     610:	3f 93       	push	r19
     612:	4f 93       	push	r20
     614:	5f 93       	push	r21
     616:	6f 93       	push	r22
     618:	7f 93       	push	r23
     61a:	8f 93       	push	r24
     61c:	9f 93       	push	r25
     61e:	af 93       	push	r26
     620:	bf 93       	push	r27
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	ef 93       	push	r30
     628:	ff 93       	push	r31
     62a:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
     62e:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
     632:	0d b6       	in	r0, 0x3d	; 61
     634:	0d 92       	st	X+, r0
     636:	0e b6       	in	r0, 0x3e	; 62
     638:	0d 92       	st	X+, r0
     63a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vTaskSwitchContext>
     63e:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
     642:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
     646:	cd 91       	ld	r28, X+
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	dd 91       	ld	r29, X+
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	ff 91       	pop	r31
     650:	ef 91       	pop	r30
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	bf 91       	pop	r27
     658:	af 91       	pop	r26
     65a:	9f 91       	pop	r25
     65c:	8f 91       	pop	r24
     65e:	7f 91       	pop	r23
     660:	6f 91       	pop	r22
     662:	5f 91       	pop	r21
     664:	4f 91       	pop	r20
     666:	3f 91       	pop	r19
     668:	2f 91       	pop	r18
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	ef 90       	pop	r14
     672:	df 90       	pop	r13
     674:	cf 90       	pop	r12
     676:	bf 90       	pop	r11
     678:	af 90       	pop	r10
     67a:	9f 90       	pop	r9
     67c:	8f 90       	pop	r8
     67e:	7f 90       	pop	r7
     680:	6f 90       	pop	r6
     682:	5f 90       	pop	r5
     684:	4f 90       	pop	r4
     686:	3f 90       	pop	r3
     688:	2f 90       	pop	r2
     68a:	1f 90       	pop	r1
     68c:	0f 90       	pop	r0
     68e:	0c be       	out	0x3c, r0	; 60
     690:	0f 90       	pop	r0
     692:	0b be       	out	0x3b, r0	; 59
     694:	0f 90       	pop	r0
     696:	0f be       	out	0x3f, r0	; 63
     698:	0f 90       	pop	r0
     69a:	08 95       	ret

0000069c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	0f 92       	push	r0
     6a4:	0b b6       	in	r0, 0x3b	; 59
     6a6:	0f 92       	push	r0
     6a8:	0c b6       	in	r0, 0x3c	; 60
     6aa:	0f 92       	push	r0
     6ac:	1f 92       	push	r1
     6ae:	11 24       	eor	r1, r1
     6b0:	2f 92       	push	r2
     6b2:	3f 92       	push	r3
     6b4:	4f 92       	push	r4
     6b6:	5f 92       	push	r5
     6b8:	6f 92       	push	r6
     6ba:	7f 92       	push	r7
     6bc:	8f 92       	push	r8
     6be:	9f 92       	push	r9
     6c0:	af 92       	push	r10
     6c2:	bf 92       	push	r11
     6c4:	cf 92       	push	r12
     6c6:	df 92       	push	r13
     6c8:	ef 92       	push	r14
     6ca:	ff 92       	push	r15
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	2f 93       	push	r18
     6d2:	3f 93       	push	r19
     6d4:	4f 93       	push	r20
     6d6:	5f 93       	push	r21
     6d8:	6f 93       	push	r22
     6da:	7f 93       	push	r23
     6dc:	8f 93       	push	r24
     6de:	9f 93       	push	r25
     6e0:	af 93       	push	r26
     6e2:	bf 93       	push	r27
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ef 93       	push	r30
     6ea:	ff 93       	push	r31
     6ec:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
     6f0:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
     6f4:	0d b6       	in	r0, 0x3d	; 61
     6f6:	0d 92       	st	X+, r0
     6f8:	0e b6       	in	r0, 0x3e	; 62
     6fa:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     6fc:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     6fe:	62 d6       	rcall	.+3268   	; 0x13c4 <xTaskIncrementTick>
     700:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     702:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     706:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
     70a:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
     70e:	cd 91       	ld	r28, X+
     710:	cd bf       	out	0x3d, r28	; 61
     712:	dd 91       	ld	r29, X+
     714:	de bf       	out	0x3e, r29	; 62
     716:	ff 91       	pop	r31
     718:	ef 91       	pop	r30
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	bf 91       	pop	r27
     720:	af 91       	pop	r26
     722:	9f 91       	pop	r25
     724:	8f 91       	pop	r24
     726:	7f 91       	pop	r23
     728:	6f 91       	pop	r22
     72a:	5f 91       	pop	r21
     72c:	4f 91       	pop	r20
     72e:	3f 91       	pop	r19
     730:	2f 91       	pop	r18
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	bf 90       	pop	r11
     740:	af 90       	pop	r10
     742:	9f 90       	pop	r9
     744:	8f 90       	pop	r8
     746:	7f 90       	pop	r7
     748:	6f 90       	pop	r6
     74a:	5f 90       	pop	r5
     74c:	4f 90       	pop	r4
     74e:	3f 90       	pop	r3
     750:	2f 90       	pop	r2
     752:	1f 90       	pop	r1
     754:	0f 90       	pop	r0
     756:	0c be       	out	0x3c, r0	; 60
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	0f be       	out	0x3f, r0	; 63
     760:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     762:	08 95       	ret

00000764 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     764:	9b df       	rcall	.-202    	; 0x69c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     766:	18 95       	reti

00000768 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     768:	dc 01       	movw	r26, r24
     76a:	53 96       	adiw	r26, 0x13	; 19
     76c:	2c 91       	ld	r18, X
     76e:	53 97       	sbiw	r26, 0x13	; 19
     770:	22 23       	and	r18, r18
     772:	41 f0       	breq	.+16     	; 0x784 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     774:	5a 96       	adiw	r26, 0x1a	; 26
     776:	ed 91       	ld	r30, X+
     778:	fc 91       	ld	r31, X
     77a:	5b 97       	sbiw	r26, 0x1b	; 27
     77c:	90 81       	ld	r25, Z
     77e:	8a e0       	ldi	r24, 0x0A	; 10
     780:	89 1b       	sub	r24, r25
     782:	08 95       	ret
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	08 95       	ret

00000788 <prvIsQueueEmpty>:
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	0f 92       	push	r0
     78e:	fc 01       	movw	r30, r24
     790:	86 8d       	ldd	r24, Z+30	; 0x1e
     792:	81 11       	cpse	r24, r1
     794:	02 c0       	rjmp	.+4      	; 0x79a <prvIsQueueEmpty+0x12>
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	01 c0       	rjmp	.+2      	; 0x79c <prvIsQueueEmpty+0x14>
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0f 90       	pop	r0
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	08 95       	ret

000007a2 <prvIsQueueFull>:
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	0f 92       	push	r0
     7a8:	fc 01       	movw	r30, r24
     7aa:	26 8d       	ldd	r18, Z+30	; 0x1e
     7ac:	87 8d       	ldd	r24, Z+31	; 0x1f
     7ae:	28 13       	cpse	r18, r24
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <prvIsQueueFull+0x14>
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <prvIsQueueFull+0x16>
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	0f 90       	pop	r0
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	08 95       	ret

000007be <prvCopyDataToQueue>:
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	ec 01       	movw	r28, r24
     7c8:	04 2f       	mov	r16, r20
     7ca:	1e 8d       	ldd	r17, Y+30	; 0x1e
     7cc:	48 a1       	ldd	r20, Y+32	; 0x20
     7ce:	41 11       	cpse	r20, r1
     7d0:	0c c0       	rjmp	.+24     	; 0x7ea <prvCopyDataToQueue+0x2c>
     7d2:	88 81       	ld	r24, Y
     7d4:	99 81       	ldd	r25, Y+1	; 0x01
     7d6:	89 2b       	or	r24, r25
     7d8:	09 f0       	breq	.+2      	; 0x7dc <prvCopyDataToQueue+0x1e>
     7da:	42 c0       	rjmp	.+132    	; 0x860 <prvCopyDataToQueue+0xa2>
     7dc:	8c 81       	ldd	r24, Y+4	; 0x04
     7de:	9d 81       	ldd	r25, Y+5	; 0x05
     7e0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <xTaskPriorityDisinherit>
     7e4:	1d 82       	std	Y+5, r1	; 0x05
     7e6:	1c 82       	std	Y+4, r1	; 0x04
     7e8:	42 c0       	rjmp	.+132    	; 0x86e <prvCopyDataToQueue+0xb0>
     7ea:	01 11       	cpse	r16, r1
     7ec:	17 c0       	rjmp	.+46     	; 0x81c <prvCopyDataToQueue+0x5e>
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	9b 81       	ldd	r25, Y+3	; 0x03
     7f4:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <memcpy>
     7f8:	28 a1       	ldd	r18, Y+32	; 0x20
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	9b 81       	ldd	r25, Y+3	; 0x03
     7fe:	82 0f       	add	r24, r18
     800:	91 1d       	adc	r25, r1
     802:	9b 83       	std	Y+3, r25	; 0x03
     804:	8a 83       	std	Y+2, r24	; 0x02
     806:	2c 81       	ldd	r18, Y+4	; 0x04
     808:	3d 81       	ldd	r19, Y+5	; 0x05
     80a:	82 17       	cp	r24, r18
     80c:	93 07       	cpc	r25, r19
     80e:	50 f1       	brcs	.+84     	; 0x864 <prvCopyDataToQueue+0xa6>
     810:	88 81       	ld	r24, Y
     812:	99 81       	ldd	r25, Y+1	; 0x01
     814:	9b 83       	std	Y+3, r25	; 0x03
     816:	8a 83       	std	Y+2, r24	; 0x02
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	29 c0       	rjmp	.+82     	; 0x86e <prvCopyDataToQueue+0xb0>
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	8e 81       	ldd	r24, Y+6	; 0x06
     820:	9f 81       	ldd	r25, Y+7	; 0x07
     822:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <memcpy>
     826:	88 a1       	ldd	r24, Y+32	; 0x20
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	91 95       	neg	r25
     82c:	81 95       	neg	r24
     82e:	91 09       	sbc	r25, r1
     830:	2e 81       	ldd	r18, Y+6	; 0x06
     832:	3f 81       	ldd	r19, Y+7	; 0x07
     834:	28 0f       	add	r18, r24
     836:	39 1f       	adc	r19, r25
     838:	3f 83       	std	Y+7, r19	; 0x07
     83a:	2e 83       	std	Y+6, r18	; 0x06
     83c:	48 81       	ld	r20, Y
     83e:	59 81       	ldd	r21, Y+1	; 0x01
     840:	24 17       	cp	r18, r20
     842:	35 07       	cpc	r19, r21
     844:	30 f4       	brcc	.+12     	; 0x852 <prvCopyDataToQueue+0x94>
     846:	2c 81       	ldd	r18, Y+4	; 0x04
     848:	3d 81       	ldd	r19, Y+5	; 0x05
     84a:	82 0f       	add	r24, r18
     84c:	93 1f       	adc	r25, r19
     84e:	9f 83       	std	Y+7, r25	; 0x07
     850:	8e 83       	std	Y+6, r24	; 0x06
     852:	02 30       	cpi	r16, 0x02	; 2
     854:	49 f4       	brne	.+18     	; 0x868 <prvCopyDataToQueue+0xaa>
     856:	11 23       	and	r17, r17
     858:	49 f0       	breq	.+18     	; 0x86c <prvCopyDataToQueue+0xae>
     85a:	11 50       	subi	r17, 0x01	; 1
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	07 c0       	rjmp	.+14     	; 0x86e <prvCopyDataToQueue+0xb0>
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	05 c0       	rjmp	.+10     	; 0x86e <prvCopyDataToQueue+0xb0>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	03 c0       	rjmp	.+6      	; 0x86e <prvCopyDataToQueue+0xb0>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	01 c0       	rjmp	.+2      	; 0x86e <prvCopyDataToQueue+0xb0>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	1f 5f       	subi	r17, 0xFF	; 255
     870:	1e 8f       	std	Y+30, r17	; 0x1e
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <prvCopyDataFromQueue>:
     87c:	fc 01       	movw	r30, r24
     87e:	40 a1       	ldd	r20, Z+32	; 0x20
     880:	44 23       	and	r20, r20
     882:	a9 f0       	breq	.+42     	; 0x8ae <prvCopyDataFromQueue+0x32>
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	26 81       	ldd	r18, Z+6	; 0x06
     888:	37 81       	ldd	r19, Z+7	; 0x07
     88a:	24 0f       	add	r18, r20
     88c:	35 1f       	adc	r19, r21
     88e:	37 83       	std	Z+7, r19	; 0x07
     890:	26 83       	std	Z+6, r18	; 0x06
     892:	84 81       	ldd	r24, Z+4	; 0x04
     894:	95 81       	ldd	r25, Z+5	; 0x05
     896:	28 17       	cp	r18, r24
     898:	39 07       	cpc	r19, r25
     89a:	20 f0       	brcs	.+8      	; 0x8a4 <prvCopyDataFromQueue+0x28>
     89c:	80 81       	ld	r24, Z
     89e:	91 81       	ldd	r25, Z+1	; 0x01
     8a0:	97 83       	std	Z+7, r25	; 0x07
     8a2:	86 83       	std	Z+6, r24	; 0x06
     8a4:	cb 01       	movw	r24, r22
     8a6:	66 81       	ldd	r22, Z+6	; 0x06
     8a8:	77 81       	ldd	r23, Z+7	; 0x07
     8aa:	0c 94 fa 1a 	jmp	0x35f4	; 0x35f4 <memcpy>
     8ae:	08 95       	ret

000008b0 <prvUnlockQueue>:
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	ec 01       	movw	r28, r24
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	0f 92       	push	r0
     8be:	1a a1       	ldd	r17, Y+34	; 0x22
     8c0:	0b c0       	rjmp	.+22     	; 0x8d8 <prvUnlockQueue+0x28>
     8c2:	8b 89       	ldd	r24, Y+19	; 0x13
     8c4:	88 23       	and	r24, r24
     8c6:	51 f0       	breq	.+20     	; 0x8dc <prvUnlockQueue+0x2c>
     8c8:	ce 01       	movw	r24, r28
     8ca:	43 96       	adiw	r24, 0x13	; 19
     8cc:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <xTaskRemoveFromEventList>
     8d0:	81 11       	cpse	r24, r1
     8d2:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <vTaskMissedYield>
     8d6:	11 50       	subi	r17, 0x01	; 1
     8d8:	11 16       	cp	r1, r17
     8da:	9c f3       	brlt	.-26     	; 0x8c2 <prvUnlockQueue+0x12>
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	8a a3       	std	Y+34, r24	; 0x22
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	0f 92       	push	r0
     8ea:	19 a1       	ldd	r17, Y+33	; 0x21
     8ec:	0b c0       	rjmp	.+22     	; 0x904 <prvUnlockQueue+0x54>
     8ee:	88 85       	ldd	r24, Y+8	; 0x08
     8f0:	88 23       	and	r24, r24
     8f2:	51 f0       	breq	.+20     	; 0x908 <prvUnlockQueue+0x58>
     8f4:	ce 01       	movw	r24, r28
     8f6:	08 96       	adiw	r24, 0x08	; 8
     8f8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <xTaskRemoveFromEventList>
     8fc:	81 11       	cpse	r24, r1
     8fe:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <vTaskMissedYield>
     902:	11 50       	subi	r17, 0x01	; 1
     904:	11 16       	cp	r1, r17
     906:	9c f3       	brlt	.-26     	; 0x8ee <prvUnlockQueue+0x3e>
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	89 a3       	std	Y+33, r24	; 0x21
     90c:	0f 90       	pop	r0
     90e:	0f be       	out	0x3f, r0	; 63
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	08 95       	ret

00000918 <xQueueGenericReset>:
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	ec 01       	movw	r28, r24
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	0f 92       	push	r0
     924:	e8 81       	ld	r30, Y
     926:	f9 81       	ldd	r31, Y+1	; 0x01
     928:	8f 8d       	ldd	r24, Y+31	; 0x1f
     92a:	28 a1       	ldd	r18, Y+32	; 0x20
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	82 9f       	mul	r24, r18
     932:	a0 01       	movw	r20, r0
     934:	83 9f       	mul	r24, r19
     936:	50 0d       	add	r21, r0
     938:	92 9f       	mul	r25, r18
     93a:	50 0d       	add	r21, r0
     93c:	11 24       	eor	r1, r1
     93e:	4e 0f       	add	r20, r30
     940:	5f 1f       	adc	r21, r31
     942:	5d 83       	std	Y+5, r21	; 0x05
     944:	4c 83       	std	Y+4, r20	; 0x04
     946:	1e 8e       	std	Y+30, r1	; 0x1e
     948:	fb 83       	std	Y+3, r31	; 0x03
     94a:	ea 83       	std	Y+2, r30	; 0x02
     94c:	01 97       	sbiw	r24, 0x01	; 1
     94e:	28 9f       	mul	r18, r24
     950:	a0 01       	movw	r20, r0
     952:	29 9f       	mul	r18, r25
     954:	50 0d       	add	r21, r0
     956:	38 9f       	mul	r19, r24
     958:	50 0d       	add	r21, r0
     95a:	11 24       	eor	r1, r1
     95c:	cf 01       	movw	r24, r30
     95e:	84 0f       	add	r24, r20
     960:	95 1f       	adc	r25, r21
     962:	9f 83       	std	Y+7, r25	; 0x07
     964:	8e 83       	std	Y+6, r24	; 0x06
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	89 a3       	std	Y+33, r24	; 0x21
     96a:	8a a3       	std	Y+34, r24	; 0x22
     96c:	61 11       	cpse	r22, r1
     96e:	0b c0       	rjmp	.+22     	; 0x986 <xQueueGenericReset+0x6e>
     970:	88 85       	ldd	r24, Y+8	; 0x08
     972:	88 23       	and	r24, r24
     974:	71 f0       	breq	.+28     	; 0x992 <xQueueGenericReset+0x7a>
     976:	ce 01       	movw	r24, r28
     978:	08 96       	adiw	r24, 0x08	; 8
     97a:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <xTaskRemoveFromEventList>
     97e:	88 23       	and	r24, r24
     980:	41 f0       	breq	.+16     	; 0x992 <xQueueGenericReset+0x7a>
     982:	2b de       	rcall	.-938    	; 0x5da <vPortYield>
     984:	06 c0       	rjmp	.+12     	; 0x992 <xQueueGenericReset+0x7a>
     986:	ce 01       	movw	r24, r28
     988:	08 96       	adiw	r24, 0x08	; 8
     98a:	59 dd       	rcall	.-1358   	; 0x43e <vListInitialise>
     98c:	ce 01       	movw	r24, r28
     98e:	43 96       	adiw	r24, 0x13	; 19
     990:	56 dd       	rcall	.-1364   	; 0x43e <vListInitialise>
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <prvInitialiseNewQueue>:
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	f8 01       	movw	r30, r16
     9a4:	61 11       	cpse	r22, r1
     9a6:	03 c0       	rjmp	.+6      	; 0x9ae <prvInitialiseNewQueue+0x10>
     9a8:	11 83       	std	Z+1, r17	; 0x01
     9aa:	00 83       	st	Z, r16
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <prvInitialiseNewQueue+0x14>
     9ae:	51 83       	std	Z+1, r21	; 0x01
     9b0:	40 83       	st	Z, r20
     9b2:	87 8f       	std	Z+31, r24	; 0x1f
     9b4:	60 a3       	std	Z+32, r22	; 0x20
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	cf 01       	movw	r24, r30
     9ba:	ae df       	rcall	.-164    	; 0x918 <xQueueGenericReset>
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	08 95       	ret

000009c2 <xQueueGenericCreate>:
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	f8 2e       	mov	r15, r24
     9d2:	e6 2e       	mov	r14, r22
     9d4:	d4 2e       	mov	r13, r20
     9d6:	86 9f       	mul	r24, r22
     9d8:	c0 01       	movw	r24, r0
     9da:	11 24       	eor	r1, r1
     9dc:	83 96       	adiw	r24, 0x23	; 35
     9de:	4a dc       	rcall	.-1900   	; 0x274 <pvPortMalloc>
     9e0:	ec 01       	movw	r28, r24
     9e2:	00 97       	sbiw	r24, 0x00	; 0
     9e4:	41 f0       	breq	.+16     	; 0x9f6 <xQueueGenericCreate+0x34>
     9e6:	8c 01       	movw	r16, r24
     9e8:	2d 2d       	mov	r18, r13
     9ea:	ac 01       	movw	r20, r24
     9ec:	4d 5d       	subi	r20, 0xDD	; 221
     9ee:	5f 4f       	sbci	r21, 0xFF	; 255
     9f0:	6e 2d       	mov	r22, r14
     9f2:	8f 2d       	mov	r24, r15
     9f4:	d4 df       	rcall	.-88     	; 0x99e <prvInitialiseNewQueue>
     9f6:	ce 01       	movw	r24, r28
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	08 95       	ret

00000a08 <xQueueGenericSend>:
     a08:	cf 92       	push	r12
     a0a:	df 92       	push	r13
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	29 97       	sbiw	r28, 0x09	; 9
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	7c 01       	movw	r14, r24
     a2a:	6b 01       	movw	r12, r22
     a2c:	2e 83       	std	Y+6, r18	; 0x06
     a2e:	3f 83       	std	Y+7, r19	; 0x07
     a30:	48 87       	std	Y+8, r20	; 0x08
     a32:	59 87       	std	Y+9, r21	; 0x09
     a34:	10 e0       	ldi	r17, 0x00	; 0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	0f 92       	push	r0
     a3c:	f7 01       	movw	r30, r14
     a3e:	96 8d       	ldd	r25, Z+30	; 0x1e
     a40:	87 8d       	ldd	r24, Z+31	; 0x1f
     a42:	98 17       	cp	r25, r24
     a44:	10 f0       	brcs	.+4      	; 0xa4a <xQueueGenericSend+0x42>
     a46:	02 30       	cpi	r16, 0x02	; 2
     a48:	b1 f4       	brne	.+44     	; 0xa76 <xQueueGenericSend+0x6e>
     a4a:	40 2f       	mov	r20, r16
     a4c:	b6 01       	movw	r22, r12
     a4e:	c7 01       	movw	r24, r14
     a50:	b6 de       	rcall	.-660    	; 0x7be <prvCopyDataToQueue>
     a52:	f7 01       	movw	r30, r14
     a54:	93 89       	ldd	r25, Z+19	; 0x13
     a56:	99 23       	and	r25, r25
     a58:	41 f0       	breq	.+16     	; 0xa6a <xQueueGenericSend+0x62>
     a5a:	c7 01       	movw	r24, r14
     a5c:	43 96       	adiw	r24, 0x13	; 19
     a5e:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <xTaskRemoveFromEventList>
     a62:	88 23       	and	r24, r24
     a64:	21 f0       	breq	.+8      	; 0xa6e <xQueueGenericSend+0x66>
     a66:	b9 dd       	rcall	.-1166   	; 0x5da <vPortYield>
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <xQueueGenericSend+0x66>
     a6a:	81 11       	cpse	r24, r1
     a6c:	b6 dd       	rcall	.-1172   	; 0x5da <vPortYield>
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	48 c0       	rjmp	.+144    	; 0xb06 <xQueueGenericSend+0xfe>
     a76:	8e 81       	ldd	r24, Y+6	; 0x06
     a78:	9f 81       	ldd	r25, Y+7	; 0x07
     a7a:	a8 85       	ldd	r26, Y+8	; 0x08
     a7c:	b9 85       	ldd	r27, Y+9	; 0x09
     a7e:	89 2b       	or	r24, r25
     a80:	8a 2b       	or	r24, r26
     a82:	8b 2b       	or	r24, r27
     a84:	21 f4       	brne	.+8      	; 0xa8e <xQueueGenericSend+0x86>
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	3c c0       	rjmp	.+120    	; 0xb06 <xQueueGenericSend+0xfe>
     a8e:	11 11       	cpse	r17, r1
     a90:	05 c0       	rjmp	.+10     	; 0xa9c <xQueueGenericSend+0x94>
     a92:	ce 01       	movw	r24, r28
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <vTaskInternalSetTimeOutState>
     a9a:	11 e0       	ldi	r17, 0x01	; 1
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	7d d4       	rcall	.+2298   	; 0x139c <vTaskSuspendAll>
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	0f 92       	push	r0
     aa8:	f7 01       	movw	r30, r14
     aaa:	81 a1       	ldd	r24, Z+33	; 0x21
     aac:	8f 3f       	cpi	r24, 0xFF	; 255
     aae:	09 f4       	brne	.+2      	; 0xab2 <xQueueGenericSend+0xaa>
     ab0:	11 a2       	std	Z+33, r1	; 0x21
     ab2:	f7 01       	movw	r30, r14
     ab4:	82 a1       	ldd	r24, Z+34	; 0x22
     ab6:	8f 3f       	cpi	r24, 0xFF	; 255
     ab8:	09 f4       	brne	.+2      	; 0xabc <xQueueGenericSend+0xb4>
     aba:	12 a2       	std	Z+34, r1	; 0x22
     abc:	0f 90       	pop	r0
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	be 01       	movw	r22, r28
     ac2:	6a 5f       	subi	r22, 0xFA	; 250
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	ce 01       	movw	r24, r28
     ac8:	01 96       	adiw	r24, 0x01	; 1
     aca:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <xTaskCheckForTimeOut>
     ace:	81 11       	cpse	r24, r1
     ad0:	16 c0       	rjmp	.+44     	; 0xafe <xQueueGenericSend+0xf6>
     ad2:	c7 01       	movw	r24, r14
     ad4:	66 de       	rcall	.-820    	; 0x7a2 <prvIsQueueFull>
     ad6:	88 23       	and	r24, r24
     ad8:	71 f0       	breq	.+28     	; 0xaf6 <xQueueGenericSend+0xee>
     ada:	4e 81       	ldd	r20, Y+6	; 0x06
     adc:	5f 81       	ldd	r21, Y+7	; 0x07
     ade:	68 85       	ldd	r22, Y+8	; 0x08
     ae0:	79 85       	ldd	r23, Y+9	; 0x09
     ae2:	c7 01       	movw	r24, r14
     ae4:	08 96       	adiw	r24, 0x08	; 8
     ae6:	77 d7       	rcall	.+3822   	; 0x19d6 <vTaskPlaceOnEventList>
     ae8:	c7 01       	movw	r24, r14
     aea:	e2 de       	rcall	.-572    	; 0x8b0 <prvUnlockQueue>
     aec:	97 d5       	rcall	.+2862   	; 0x161c <xTaskResumeAll>
     aee:	81 11       	cpse	r24, r1
     af0:	a2 cf       	rjmp	.-188    	; 0xa36 <xQueueGenericSend+0x2e>
     af2:	73 dd       	rcall	.-1306   	; 0x5da <vPortYield>
     af4:	a0 cf       	rjmp	.-192    	; 0xa36 <xQueueGenericSend+0x2e>
     af6:	c7 01       	movw	r24, r14
     af8:	db de       	rcall	.-586    	; 0x8b0 <prvUnlockQueue>
     afa:	90 d5       	rcall	.+2848   	; 0x161c <xTaskResumeAll>
     afc:	9c cf       	rjmp	.-200    	; 0xa36 <xQueueGenericSend+0x2e>
     afe:	c7 01       	movw	r24, r14
     b00:	d7 de       	rcall	.-594    	; 0x8b0 <prvUnlockQueue>
     b02:	8c d5       	rcall	.+2840   	; 0x161c <xTaskResumeAll>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	29 96       	adiw	r28, 0x09	; 9
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	ff 90       	pop	r15
     b1c:	ef 90       	pop	r14
     b1e:	df 90       	pop	r13
     b20:	cf 90       	pop	r12
     b22:	08 95       	ret

00000b24 <prvInitialiseMutex>:
     b24:	0f 93       	push	r16
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	69 f0       	breq	.+26     	; 0xb44 <prvInitialiseMutex+0x20>
     b2a:	fc 01       	movw	r30, r24
     b2c:	15 82       	std	Z+5, r1	; 0x05
     b2e:	14 82       	std	Z+4, r1	; 0x04
     b30:	11 82       	std	Z+1, r1	; 0x01
     b32:	10 82       	st	Z, r1
     b34:	16 82       	std	Z+6, r1	; 0x06
     b36:	00 e0       	ldi	r16, 0x00	; 0
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	a9 01       	movw	r20, r18
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	62 df       	rcall	.-316    	; 0xa08 <xQueueGenericSend>
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <xQueueCreateMutex>:
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	48 2f       	mov	r20, r24
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	37 df       	rcall	.-402    	; 0x9c2 <xQueueGenericCreate>
     b54:	ec 01       	movw	r28, r24
     b56:	e6 df       	rcall	.-52     	; 0xb24 <prvInitialiseMutex>
     b58:	ce 01       	movw	r24, r28
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <xQueueGenericSendFromISR>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	8a 01       	movw	r16, r20
     b6e:	fc 01       	movw	r30, r24
     b70:	56 8d       	ldd	r21, Z+30	; 0x1e
     b72:	37 8d       	ldd	r19, Z+31	; 0x1f
     b74:	53 17       	cp	r21, r19
     b76:	10 f0       	brcs	.+4      	; 0xb7c <xQueueGenericSendFromISR+0x1c>
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	f1 f4       	brne	.+60     	; 0xbb8 <xQueueGenericSendFromISR+0x58>
     b7c:	42 2f       	mov	r20, r18
     b7e:	78 01       	movw	r14, r16
     b80:	ec 01       	movw	r28, r24
     b82:	1a a1       	ldd	r17, Y+34	; 0x22
     b84:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b86:	ce 01       	movw	r24, r28
     b88:	1a de       	rcall	.-972    	; 0x7be <prvCopyDataToQueue>
     b8a:	1f 3f       	cpi	r17, 0xFF	; 255
     b8c:	79 f4       	brne	.+30     	; 0xbac <xQueueGenericSendFromISR+0x4c>
     b8e:	8b 89       	ldd	r24, Y+19	; 0x13
     b90:	88 23       	and	r24, r24
     b92:	a1 f0       	breq	.+40     	; 0xbbc <xQueueGenericSendFromISR+0x5c>
     b94:	ce 01       	movw	r24, r28
     b96:	43 96       	adiw	r24, 0x13	; 19
     b98:	77 d7       	rcall	.+3822   	; 0x1a88 <xTaskRemoveFromEventList>
     b9a:	88 23       	and	r24, r24
     b9c:	89 f0       	breq	.+34     	; 0xbc0 <xQueueGenericSendFromISR+0x60>
     b9e:	e1 14       	cp	r14, r1
     ba0:	f1 04       	cpc	r15, r1
     ba2:	81 f0       	breq	.+32     	; 0xbc4 <xQueueGenericSendFromISR+0x64>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	f7 01       	movw	r30, r14
     ba8:	80 83       	st	Z, r24
     baa:	0d c0       	rjmp	.+26     	; 0xbc6 <xQueueGenericSendFromISR+0x66>
     bac:	ff 24       	eor	r15, r15
     bae:	f3 94       	inc	r15
     bb0:	f1 0e       	add	r15, r17
     bb2:	fa a2       	std	Y+34, r15	; 0x22
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	07 c0       	rjmp	.+14     	; 0xbc6 <xQueueGenericSendFromISR+0x66>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <xQueueGenericSendFromISR+0x66>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <xQueueGenericSendFromISR+0x66>
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <xQueueGenericSendFromISR+0x66>
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	08 95       	ret

00000bd4 <xQueueReceive>:
     bd4:	cf 92       	push	r12
     bd6:	df 92       	push	r13
     bd8:	ef 92       	push	r14
     bda:	ff 92       	push	r15
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	29 97       	sbiw	r28, 0x09	; 9
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	de bf       	out	0x3e, r29	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	cd bf       	out	0x3d, r28	; 61
     bf4:	8c 01       	movw	r16, r24
     bf6:	6b 01       	movw	r12, r22
     bf8:	2e 83       	std	Y+6, r18	; 0x06
     bfa:	3f 83       	std	Y+7, r19	; 0x07
     bfc:	48 87       	std	Y+8, r20	; 0x08
     bfe:	59 87       	std	Y+9, r21	; 0x09
     c00:	e1 2c       	mov	r14, r1
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	0f 92       	push	r0
     c08:	f8 01       	movw	r30, r16
     c0a:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c0c:	ff 20       	and	r15, r15
     c0e:	91 f0       	breq	.+36     	; 0xc34 <xQueueReceive+0x60>
     c10:	b6 01       	movw	r22, r12
     c12:	c8 01       	movw	r24, r16
     c14:	33 de       	rcall	.-922    	; 0x87c <prvCopyDataFromQueue>
     c16:	fa 94       	dec	r15
     c18:	f8 01       	movw	r30, r16
     c1a:	f6 8e       	std	Z+30, r15	; 0x1e
     c1c:	80 85       	ldd	r24, Z+8	; 0x08
     c1e:	88 23       	and	r24, r24
     c20:	29 f0       	breq	.+10     	; 0xc2c <xQueueReceive+0x58>
     c22:	c8 01       	movw	r24, r16
     c24:	08 96       	adiw	r24, 0x08	; 8
     c26:	30 d7       	rcall	.+3680   	; 0x1a88 <xTaskRemoveFromEventList>
     c28:	81 11       	cpse	r24, r1
     c2a:	d7 dc       	rcall	.-1618   	; 0x5da <vPortYield>
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	4c c0       	rjmp	.+152    	; 0xccc <xQueueReceive+0xf8>
     c34:	8e 81       	ldd	r24, Y+6	; 0x06
     c36:	9f 81       	ldd	r25, Y+7	; 0x07
     c38:	a8 85       	ldd	r26, Y+8	; 0x08
     c3a:	b9 85       	ldd	r27, Y+9	; 0x09
     c3c:	89 2b       	or	r24, r25
     c3e:	8a 2b       	or	r24, r26
     c40:	8b 2b       	or	r24, r27
     c42:	21 f4       	brne	.+8      	; 0xc4c <xQueueReceive+0x78>
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	40 c0       	rjmp	.+128    	; 0xccc <xQueueReceive+0xf8>
     c4c:	e1 10       	cpse	r14, r1
     c4e:	05 c0       	rjmp	.+10     	; 0xc5a <xQueueReceive+0x86>
     c50:	ce 01       	movw	r24, r28
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	c8 d7       	rcall	.+3984   	; 0x1be6 <vTaskInternalSetTimeOutState>
     c56:	ee 24       	eor	r14, r14
     c58:	e3 94       	inc	r14
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	9e d3       	rcall	.+1852   	; 0x139c <vTaskSuspendAll>
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	0f 92       	push	r0
     c66:	f8 01       	movw	r30, r16
     c68:	81 a1       	ldd	r24, Z+33	; 0x21
     c6a:	8f 3f       	cpi	r24, 0xFF	; 255
     c6c:	09 f4       	brne	.+2      	; 0xc70 <xQueueReceive+0x9c>
     c6e:	11 a2       	std	Z+33, r1	; 0x21
     c70:	f8 01       	movw	r30, r16
     c72:	82 a1       	ldd	r24, Z+34	; 0x22
     c74:	8f 3f       	cpi	r24, 0xFF	; 255
     c76:	09 f4       	brne	.+2      	; 0xc7a <xQueueReceive+0xa6>
     c78:	12 a2       	std	Z+34, r1	; 0x22
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	be 01       	movw	r22, r28
     c80:	6a 5f       	subi	r22, 0xFA	; 250
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	bf d7       	rcall	.+3966   	; 0x1c08 <xTaskCheckForTimeOut>
     c8a:	81 11       	cpse	r24, r1
     c8c:	16 c0       	rjmp	.+44     	; 0xcba <xQueueReceive+0xe6>
     c8e:	c8 01       	movw	r24, r16
     c90:	7b dd       	rcall	.-1290   	; 0x788 <prvIsQueueEmpty>
     c92:	88 23       	and	r24, r24
     c94:	71 f0       	breq	.+28     	; 0xcb2 <xQueueReceive+0xde>
     c96:	4e 81       	ldd	r20, Y+6	; 0x06
     c98:	5f 81       	ldd	r21, Y+7	; 0x07
     c9a:	68 85       	ldd	r22, Y+8	; 0x08
     c9c:	79 85       	ldd	r23, Y+9	; 0x09
     c9e:	c8 01       	movw	r24, r16
     ca0:	43 96       	adiw	r24, 0x13	; 19
     ca2:	99 d6       	rcall	.+3378   	; 0x19d6 <vTaskPlaceOnEventList>
     ca4:	c8 01       	movw	r24, r16
     ca6:	04 de       	rcall	.-1016   	; 0x8b0 <prvUnlockQueue>
     ca8:	b9 d4       	rcall	.+2418   	; 0x161c <xTaskResumeAll>
     caa:	81 11       	cpse	r24, r1
     cac:	aa cf       	rjmp	.-172    	; 0xc02 <xQueueReceive+0x2e>
     cae:	95 dc       	rcall	.-1750   	; 0x5da <vPortYield>
     cb0:	a8 cf       	rjmp	.-176    	; 0xc02 <xQueueReceive+0x2e>
     cb2:	c8 01       	movw	r24, r16
     cb4:	fd dd       	rcall	.-1030   	; 0x8b0 <prvUnlockQueue>
     cb6:	b2 d4       	rcall	.+2404   	; 0x161c <xTaskResumeAll>
     cb8:	a4 cf       	rjmp	.-184    	; 0xc02 <xQueueReceive+0x2e>
     cba:	c8 01       	movw	r24, r16
     cbc:	f9 dd       	rcall	.-1038   	; 0x8b0 <prvUnlockQueue>
     cbe:	ae d4       	rcall	.+2396   	; 0x161c <xTaskResumeAll>
     cc0:	c8 01       	movw	r24, r16
     cc2:	62 dd       	rcall	.-1340   	; 0x788 <prvIsQueueEmpty>
     cc4:	88 23       	and	r24, r24
     cc6:	09 f4       	brne	.+2      	; 0xcca <xQueueReceive+0xf6>
     cc8:	9c cf       	rjmp	.-200    	; 0xc02 <xQueueReceive+0x2e>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	29 96       	adiw	r28, 0x09	; 9
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	cf 90       	pop	r12
     ce8:	08 95       	ret

00000cea <xQueueSemaphoreTake>:
     cea:	ef 92       	push	r14
     cec:	ff 92       	push	r15
     cee:	0f 93       	push	r16
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	29 97       	sbiw	r28, 0x09	; 9
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	8c 01       	movw	r16, r24
     d08:	4e 83       	std	Y+6, r20	; 0x06
     d0a:	5f 83       	std	Y+7, r21	; 0x07
     d0c:	68 87       	std	Y+8, r22	; 0x08
     d0e:	79 87       	std	Y+9, r23	; 0x09
     d10:	e1 2c       	mov	r14, r1
     d12:	f1 2c       	mov	r15, r1
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	0f 92       	push	r0
     d1a:	f8 01       	movw	r30, r16
     d1c:	86 8d       	ldd	r24, Z+30	; 0x1e
     d1e:	88 23       	and	r24, r24
     d20:	c1 f0       	breq	.+48     	; 0xd52 <xQueueSemaphoreTake+0x68>
     d22:	81 50       	subi	r24, 0x01	; 1
     d24:	86 8f       	std	Z+30, r24	; 0x1e
     d26:	80 81       	ld	r24, Z
     d28:	91 81       	ldd	r25, Z+1	; 0x01
     d2a:	89 2b       	or	r24, r25
     d2c:	29 f4       	brne	.+10     	; 0xd38 <xQueueSemaphoreTake+0x4e>
     d2e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <pvTaskIncrementMutexHeldCount>
     d32:	f8 01       	movw	r30, r16
     d34:	95 83       	std	Z+5, r25	; 0x05
     d36:	84 83       	std	Z+4, r24	; 0x04
     d38:	f8 01       	movw	r30, r16
     d3a:	80 85       	ldd	r24, Z+8	; 0x08
     d3c:	88 23       	and	r24, r24
     d3e:	29 f0       	breq	.+10     	; 0xd4a <xQueueSemaphoreTake+0x60>
     d40:	c8 01       	movw	r24, r16
     d42:	08 96       	adiw	r24, 0x08	; 8
     d44:	a1 d6       	rcall	.+3394   	; 0x1a88 <xTaskRemoveFromEventList>
     d46:	81 11       	cpse	r24, r1
     d48:	48 dc       	rcall	.-1904   	; 0x5da <vPortYield>
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	6b c0       	rjmp	.+214    	; 0xe28 <xQueueSemaphoreTake+0x13e>
     d52:	8e 81       	ldd	r24, Y+6	; 0x06
     d54:	9f 81       	ldd	r25, Y+7	; 0x07
     d56:	a8 85       	ldd	r26, Y+8	; 0x08
     d58:	b9 85       	ldd	r27, Y+9	; 0x09
     d5a:	89 2b       	or	r24, r25
     d5c:	8a 2b       	or	r24, r26
     d5e:	8b 2b       	or	r24, r27
     d60:	21 f4       	brne	.+8      	; 0xd6a <xQueueSemaphoreTake+0x80>
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	5f c0       	rjmp	.+190    	; 0xe28 <xQueueSemaphoreTake+0x13e>
     d6a:	f1 10       	cpse	r15, r1
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <xQueueSemaphoreTake+0x8e>
     d6e:	ce 01       	movw	r24, r28
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	39 d7       	rcall	.+3698   	; 0x1be6 <vTaskInternalSetTimeOutState>
     d74:	ff 24       	eor	r15, r15
     d76:	f3 94       	inc	r15
     d78:	0f 90       	pop	r0
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	0f d3       	rcall	.+1566   	; 0x139c <vTaskSuspendAll>
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	0f 92       	push	r0
     d84:	f8 01       	movw	r30, r16
     d86:	81 a1       	ldd	r24, Z+33	; 0x21
     d88:	8f 3f       	cpi	r24, 0xFF	; 255
     d8a:	09 f4       	brne	.+2      	; 0xd8e <xQueueSemaphoreTake+0xa4>
     d8c:	11 a2       	std	Z+33, r1	; 0x21
     d8e:	f8 01       	movw	r30, r16
     d90:	82 a1       	ldd	r24, Z+34	; 0x22
     d92:	8f 3f       	cpi	r24, 0xFF	; 255
     d94:	09 f4       	brne	.+2      	; 0xd98 <xQueueSemaphoreTake+0xae>
     d96:	12 a2       	std	Z+34, r1	; 0x22
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	be 01       	movw	r22, r28
     d9e:	6a 5f       	subi	r22, 0xFA	; 250
     da0:	7f 4f       	sbci	r23, 0xFF	; 255
     da2:	ce 01       	movw	r24, r28
     da4:	01 96       	adiw	r24, 0x01	; 1
     da6:	30 d7       	rcall	.+3680   	; 0x1c08 <xTaskCheckForTimeOut>
     da8:	81 11       	cpse	r24, r1
     daa:	24 c0       	rjmp	.+72     	; 0xdf4 <xQueueSemaphoreTake+0x10a>
     dac:	c8 01       	movw	r24, r16
     dae:	ec dc       	rcall	.-1576   	; 0x788 <prvIsQueueEmpty>
     db0:	88 23       	and	r24, r24
     db2:	e1 f0       	breq	.+56     	; 0xdec <xQueueSemaphoreTake+0x102>
     db4:	f8 01       	movw	r30, r16
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	89 2b       	or	r24, r25
     dbc:	49 f4       	brne	.+18     	; 0xdd0 <xQueueSemaphoreTake+0xe6>
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	0f 92       	push	r0
     dc4:	84 81       	ldd	r24, Z+4	; 0x04
     dc6:	95 81       	ldd	r25, Z+5	; 0x05
     dc8:	97 d7       	rcall	.+3886   	; 0x1cf8 <xTaskPriorityInherit>
     dca:	e8 2e       	mov	r14, r24
     dcc:	0f 90       	pop	r0
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	4e 81       	ldd	r20, Y+6	; 0x06
     dd2:	5f 81       	ldd	r21, Y+7	; 0x07
     dd4:	68 85       	ldd	r22, Y+8	; 0x08
     dd6:	79 85       	ldd	r23, Y+9	; 0x09
     dd8:	c8 01       	movw	r24, r16
     dda:	43 96       	adiw	r24, 0x13	; 19
     ddc:	fc d5       	rcall	.+3064   	; 0x19d6 <vTaskPlaceOnEventList>
     dde:	c8 01       	movw	r24, r16
     de0:	67 dd       	rcall	.-1330   	; 0x8b0 <prvUnlockQueue>
     de2:	1c d4       	rcall	.+2104   	; 0x161c <xTaskResumeAll>
     de4:	81 11       	cpse	r24, r1
     de6:	96 cf       	rjmp	.-212    	; 0xd14 <xQueueSemaphoreTake+0x2a>
     de8:	f8 db       	rcall	.-2064   	; 0x5da <vPortYield>
     dea:	94 cf       	rjmp	.-216    	; 0xd14 <xQueueSemaphoreTake+0x2a>
     dec:	c8 01       	movw	r24, r16
     dee:	60 dd       	rcall	.-1344   	; 0x8b0 <prvUnlockQueue>
     df0:	15 d4       	rcall	.+2090   	; 0x161c <xTaskResumeAll>
     df2:	90 cf       	rjmp	.-224    	; 0xd14 <xQueueSemaphoreTake+0x2a>
     df4:	c8 01       	movw	r24, r16
     df6:	5c dd       	rcall	.-1352   	; 0x8b0 <prvUnlockQueue>
     df8:	11 d4       	rcall	.+2082   	; 0x161c <xTaskResumeAll>
     dfa:	c8 01       	movw	r24, r16
     dfc:	c5 dc       	rcall	.-1654   	; 0x788 <prvIsQueueEmpty>
     dfe:	88 23       	and	r24, r24
     e00:	09 f4       	brne	.+2      	; 0xe04 <xQueueSemaphoreTake+0x11a>
     e02:	88 cf       	rjmp	.-240    	; 0xd14 <xQueueSemaphoreTake+0x2a>
     e04:	ee 20       	and	r14, r14
     e06:	79 f0       	breq	.+30     	; 0xe26 <xQueueSemaphoreTake+0x13c>
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	0f 92       	push	r0
     e0e:	c8 01       	movw	r24, r16
     e10:	ab dc       	rcall	.-1706   	; 0x768 <prvGetDisinheritPriorityAfterTimeout>
     e12:	68 2f       	mov	r22, r24
     e14:	f8 01       	movw	r30, r16
     e16:	84 81       	ldd	r24, Z+4	; 0x04
     e18:	95 81       	ldd	r25, Z+5	; 0x05
     e1a:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <vTaskPriorityDisinheritAfterTimeout>
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <xQueueSemaphoreTake+0x13e>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	29 96       	adiw	r28, 0x09	; 9
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	08 95       	ret

00000e42 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	0f 92       	push	r0
     e4e:	89 a1       	ldd	r24, Y+33	; 0x21
     e50:	8f 3f       	cpi	r24, 0xFF	; 255
     e52:	09 f4       	brne	.+2      	; 0xe56 <vQueueWaitForMessageRestricted+0x14>
     e54:	19 a2       	std	Y+33, r1	; 0x21
     e56:	8a a1       	ldd	r24, Y+34	; 0x22
     e58:	8f 3f       	cpi	r24, 0xFF	; 255
     e5a:	09 f4       	brne	.+2      	; 0xe5e <vQueueWaitForMessageRestricted+0x1c>
     e5c:	1a a2       	std	Y+34, r1	; 0x22
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     e62:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e64:	81 11       	cpse	r24, r1
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     e68:	ce 01       	movw	r24, r28
     e6a:	43 96       	adiw	r24, 0x13	; 19
     e6c:	cb d5       	rcall	.+2966   	; 0x1a04 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     e6e:	ce 01       	movw	r24, r28
     e70:	1f dd       	rcall	.-1474   	; 0x8b0 <prvUnlockQueue>
    }
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <prvResetNextTaskUnblockTime>:
     e78:	e0 91 55 0c 	lds	r30, 0x0C55	; 0x800c55 <pxDelayedTaskList>
     e7c:	f0 91 56 0c 	lds	r31, 0x0C56	; 0x800c56 <pxDelayedTaskList+0x1>
     e80:	80 81       	ld	r24, Z
     e82:	81 11       	cpse	r24, r1
     e84:	0c c0       	rjmp	.+24     	; 0xe9e <prvResetNextTaskUnblockTime+0x26>
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	9f ef       	ldi	r25, 0xFF	; 255
     e8a:	dc 01       	movw	r26, r24
     e8c:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <xNextTaskUnblockTime>
     e90:	90 93 20 0c 	sts	0x0C20, r25	; 0x800c20 <xNextTaskUnblockTime+0x1>
     e94:	a0 93 21 0c 	sts	0x0C21, r26	; 0x800c21 <xNextTaskUnblockTime+0x2>
     e98:	b0 93 22 0c 	sts	0x0C22, r27	; 0x800c22 <xNextTaskUnblockTime+0x3>
     e9c:	08 95       	ret
     e9e:	e0 91 55 0c 	lds	r30, 0x0C55	; 0x800c55 <pxDelayedTaskList>
     ea2:	f0 91 56 0c 	lds	r31, 0x0C56	; 0x800c56 <pxDelayedTaskList+0x1>
     ea6:	07 80       	ldd	r0, Z+7	; 0x07
     ea8:	f0 85       	ldd	r31, Z+8	; 0x08
     eaa:	e0 2d       	mov	r30, r0
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	a2 81       	ldd	r26, Z+2	; 0x02
     eb2:	b3 81       	ldd	r27, Z+3	; 0x03
     eb4:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <xNextTaskUnblockTime>
     eb8:	90 93 20 0c 	sts	0x0C20, r25	; 0x800c20 <xNextTaskUnblockTime+0x1>
     ebc:	a0 93 21 0c 	sts	0x0C21, r26	; 0x800c21 <xNextTaskUnblockTime+0x2>
     ec0:	b0 93 22 0c 	sts	0x0C22, r27	; 0x800c22 <xNextTaskUnblockTime+0x3>
     ec4:	08 95       	ret

00000ec6 <prvDeleteTCB>:
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	ec 01       	movw	r28, r24
     ecc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ece:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed0:	7a da       	rcall	.-2828   	; 0x3c6 <vPortFree>
     ed2:	ce 01       	movw	r24, r28
     ed4:	78 da       	rcall	.-2832   	; 0x3c6 <vPortFree>
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <prvInitialiseNewTask>:
     edc:	4f 92       	push	r4
     ede:	5f 92       	push	r5
     ee0:	6f 92       	push	r6
     ee2:	7f 92       	push	r7
     ee4:	8f 92       	push	r8
     ee6:	9f 92       	push	r9
     ee8:	af 92       	push	r10
     eea:	bf 92       	push	r11
     eec:	cf 92       	push	r12
     eee:	df 92       	push	r13
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	2c 01       	movw	r4, r24
     efc:	5b 01       	movw	r10, r22
     efe:	4a 01       	movw	r8, r20
     f00:	39 01       	movw	r6, r18
     f02:	e6 01       	movw	r28, r12
     f04:	65 ea       	ldi	r22, 0xA5	; 165
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f0c:	0e 94 03 1b 	call	0x3606	; 0x3606 <memset>
     f10:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f12:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f14:	21 e0       	ldi	r18, 0x01	; 1
     f16:	82 1a       	sub	r8, r18
     f18:	91 08       	sbc	r9, r1
     f1a:	88 0e       	add	r8, r24
     f1c:	99 1e       	adc	r9, r25
     f1e:	a1 14       	cp	r10, r1
     f20:	b1 04       	cpc	r11, r1
     f22:	89 f4       	brne	.+34     	; 0xf46 <prvInitialiseNewTask+0x6a>
     f24:	15 c0       	rjmp	.+42     	; 0xf50 <prvInitialiseNewTask+0x74>
     f26:	82 2f       	mov	r24, r18
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	f5 01       	movw	r30, r10
     f2c:	e8 0f       	add	r30, r24
     f2e:	f9 1f       	adc	r31, r25
     f30:	30 81       	ld	r19, Z
     f32:	de 01       	movw	r26, r28
     f34:	a8 0f       	add	r26, r24
     f36:	b9 1f       	adc	r27, r25
     f38:	5d 96       	adiw	r26, 0x1d	; 29
     f3a:	3c 93       	st	X, r19
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	29 f0       	breq	.+10     	; 0xf4c <prvInitialiseNewTask+0x70>
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <prvInitialiseNewTask+0x6c>
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	20 31       	cpi	r18, 0x10	; 16
     f4a:	68 f3       	brcs	.-38     	; 0xf26 <prvInitialiseNewTask+0x4a>
     f4c:	1c a6       	std	Y+44, r1	; 0x2c
     f4e:	01 c0       	rjmp	.+2      	; 0xf52 <prvInitialiseNewTask+0x76>
     f50:	1d 8e       	std	Y+29, r1	; 0x1d
     f52:	0a 30       	cpi	r16, 0x0A	; 10
     f54:	08 f0       	brcs	.+2      	; 0xf58 <prvInitialiseNewTask+0x7c>
     f56:	09 e0       	ldi	r16, 0x09	; 9
     f58:	0a 8f       	std	Y+26, r16	; 0x1a
     f5a:	0d a7       	std	Y+45, r16	; 0x2d
     f5c:	1e a6       	std	Y+46, r1	; 0x2e
     f5e:	ce 01       	movw	r24, r28
     f60:	02 96       	adiw	r24, 0x02	; 2
     f62:	7e da       	rcall	.-2820   	; 0x460 <vListInitialiseItem>
     f64:	ce 01       	movw	r24, r28
     f66:	0e 96       	adiw	r24, 0x0e	; 14
     f68:	7b da       	rcall	.-2826   	; 0x460 <vListInitialiseItem>
     f6a:	db 87       	std	Y+11, r29	; 0x0b
     f6c:	ca 87       	std	Y+10, r28	; 0x0a
     f6e:	8a e0       	ldi	r24, 0x0A	; 10
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	a0 e0       	ldi	r26, 0x00	; 0
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	80 1b       	sub	r24, r16
     f78:	91 09       	sbc	r25, r1
     f7a:	a1 09       	sbc	r26, r1
     f7c:	b1 09       	sbc	r27, r1
     f7e:	8e 87       	std	Y+14, r24	; 0x0e
     f80:	9f 87       	std	Y+15, r25	; 0x0f
     f82:	a8 8b       	std	Y+16, r26	; 0x10
     f84:	b9 8b       	std	Y+17, r27	; 0x11
     f86:	df 8b       	std	Y+23, r29	; 0x17
     f88:	ce 8b       	std	Y+22, r28	; 0x16
     f8a:	18 aa       	std	Y+48, r1	; 0x30
     f8c:	1f a6       	std	Y+47, r1	; 0x2f
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	fe 01       	movw	r30, r28
     f92:	f1 96       	adiw	r30, 0x31	; 49
     f94:	df 01       	movw	r26, r30
     f96:	1d 92       	st	X+, r1
     f98:	8a 95       	dec	r24
     f9a:	e9 f7       	brne	.-6      	; 0xf96 <prvInitialiseNewTask+0xba>
     f9c:	1d aa       	std	Y+53, r1	; 0x35
     f9e:	a3 01       	movw	r20, r6
     fa0:	b2 01       	movw	r22, r4
     fa2:	c4 01       	movw	r24, r8
     fa4:	d1 da       	rcall	.-2654   	; 0x548 <pxPortInitialiseStack>
     fa6:	99 83       	std	Y+1, r25	; 0x01
     fa8:	88 83       	st	Y, r24
     faa:	e1 14       	cp	r14, r1
     fac:	f1 04       	cpc	r15, r1
     fae:	19 f0       	breq	.+6      	; 0xfb6 <prvInitialiseNewTask+0xda>
     fb0:	f7 01       	movw	r30, r14
     fb2:	d1 83       	std	Z+1, r29	; 0x01
     fb4:	c0 83       	st	Z, r28
     fb6:	df 91       	pop	r29
     fb8:	cf 91       	pop	r28
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	df 90       	pop	r13
     fc2:	cf 90       	pop	r12
     fc4:	bf 90       	pop	r11
     fc6:	af 90       	pop	r10
     fc8:	9f 90       	pop	r9
     fca:	8f 90       	pop	r8
     fcc:	7f 90       	pop	r7
     fce:	6f 90       	pop	r6
     fd0:	5f 90       	pop	r5
     fd2:	4f 90       	pop	r4
     fd4:	08 95       	ret

00000fd6 <prvInitialiseTaskLists>:
     fd6:	cf 93       	push	r28
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	08 c0       	rjmp	.+16     	; 0xfec <prvInitialiseTaskLists+0x16>
     fdc:	2b e0       	ldi	r18, 0x0B	; 11
     fde:	c2 9f       	mul	r28, r18
     fe0:	c0 01       	movw	r24, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	83 59       	subi	r24, 0x93	; 147
     fe6:	93 4f       	sbci	r25, 0xF3	; 243
     fe8:	2a da       	rcall	.-2988   	; 0x43e <vListInitialise>
     fea:	cf 5f       	subi	r28, 0xFF	; 255
     fec:	ca 30       	cpi	r28, 0x0A	; 10
     fee:	b0 f3       	brcs	.-20     	; 0xfdc <prvInitialiseTaskLists+0x6>
     ff0:	82 e6       	ldi	r24, 0x62	; 98
     ff2:	9c e0       	ldi	r25, 0x0C	; 12
     ff4:	24 da       	rcall	.-3000   	; 0x43e <vListInitialise>
     ff6:	87 e5       	ldi	r24, 0x57	; 87
     ff8:	9c e0       	ldi	r25, 0x0C	; 12
     ffa:	21 da       	rcall	.-3006   	; 0x43e <vListInitialise>
     ffc:	88 e4       	ldi	r24, 0x48	; 72
     ffe:	9c e0       	ldi	r25, 0x0C	; 12
    1000:	1e da       	rcall	.-3012   	; 0x43e <vListInitialise>
    1002:	8d e3       	ldi	r24, 0x3D	; 61
    1004:	9c e0       	ldi	r25, 0x0C	; 12
    1006:	1b da       	rcall	.-3018   	; 0x43e <vListInitialise>
    1008:	81 e3       	ldi	r24, 0x31	; 49
    100a:	9c e0       	ldi	r25, 0x0C	; 12
    100c:	18 da       	rcall	.-3024   	; 0x43e <vListInitialise>
    100e:	82 e6       	ldi	r24, 0x62	; 98
    1010:	9c e0       	ldi	r25, 0x0C	; 12
    1012:	90 93 56 0c 	sts	0x0C56, r25	; 0x800c56 <pxDelayedTaskList+0x1>
    1016:	80 93 55 0c 	sts	0x0C55, r24	; 0x800c55 <pxDelayedTaskList>
    101a:	87 e5       	ldi	r24, 0x57	; 87
    101c:	9c e0       	ldi	r25, 0x0C	; 12
    101e:	90 93 54 0c 	sts	0x0C54, r25	; 0x800c54 <pxOverflowDelayedTaskList+0x1>
    1022:	80 93 53 0c 	sts	0x0C53, r24	; 0x800c53 <pxOverflowDelayedTaskList>
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <prvAddNewTaskToReadyList>:
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	0f 92       	push	r0
    1036:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <uxCurrentNumberOfTasks>
    103a:	8f 5f       	subi	r24, 0xFF	; 255
    103c:	80 93 30 0c 	sts	0x0C30, r24	; 0x800c30 <uxCurrentNumberOfTasks>
    1040:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1044:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1048:	89 2b       	or	r24, r25
    104a:	51 f4       	brne	.+20     	; 0x1060 <prvAddNewTaskToReadyList+0x36>
    104c:	d0 93 dc 0c 	sts	0x0CDC, r29	; 0x800cdc <pxCurrentTCB+0x1>
    1050:	c0 93 db 0c 	sts	0x0CDB, r28	; 0x800cdb <pxCurrentTCB>
    1054:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <uxCurrentNumberOfTasks>
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 f4       	brne	.+36     	; 0x1080 <prvAddNewTaskToReadyList+0x56>
    105c:	bc df       	rcall	.-136    	; 0xfd6 <prvInitialiseTaskLists>
    105e:	10 c0       	rjmp	.+32     	; 0x1080 <prvAddNewTaskToReadyList+0x56>
    1060:	80 91 2a 0c 	lds	r24, 0x0C2A	; 0x800c2a <xSchedulerRunning>
    1064:	81 11       	cpse	r24, r1
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <prvAddNewTaskToReadyList+0x56>
    1068:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    106c:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1070:	92 8d       	ldd	r25, Z+26	; 0x1a
    1072:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1074:	89 17       	cp	r24, r25
    1076:	20 f0       	brcs	.+8      	; 0x1080 <prvAddNewTaskToReadyList+0x56>
    1078:	d0 93 dc 0c 	sts	0x0CDC, r29	; 0x800cdc <pxCurrentTCB+0x1>
    107c:	c0 93 db 0c 	sts	0x0CDB, r28	; 0x800cdb <pxCurrentTCB>
    1080:	80 91 23 0c 	lds	r24, 0x0C23	; 0x800c23 <uxTaskNumber>
    1084:	8f 5f       	subi	r24, 0xFF	; 255
    1086:	80 93 23 0c 	sts	0x0C23, r24	; 0x800c23 <uxTaskNumber>
    108a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    108c:	80 91 2b 0c 	lds	r24, 0x0C2B	; 0x800c2b <uxTopReadyPriority>
    1090:	8e 17       	cp	r24, r30
    1092:	10 f4       	brcc	.+4      	; 0x1098 <prvAddNewTaskToReadyList+0x6e>
    1094:	e0 93 2b 0c 	sts	0x0C2B, r30	; 0x800c2b <uxTopReadyPriority>
    1098:	8b e0       	ldi	r24, 0x0B	; 11
    109a:	8e 9f       	mul	r24, r30
    109c:	f0 01       	movw	r30, r0
    109e:	11 24       	eor	r1, r1
    10a0:	e3 59       	subi	r30, 0x93	; 147
    10a2:	f3 4f       	sbci	r31, 0xF3	; 243
    10a4:	01 80       	ldd	r0, Z+1	; 0x01
    10a6:	f2 81       	ldd	r31, Z+2	; 0x02
    10a8:	e0 2d       	mov	r30, r0
    10aa:	ff 83       	std	Y+7, r31	; 0x07
    10ac:	ee 83       	std	Y+6, r30	; 0x06
    10ae:	26 81       	ldd	r18, Z+6	; 0x06
    10b0:	37 81       	ldd	r19, Z+7	; 0x07
    10b2:	39 87       	std	Y+9, r19	; 0x09
    10b4:	28 87       	std	Y+8, r18	; 0x08
    10b6:	a6 81       	ldd	r26, Z+6	; 0x06
    10b8:	b7 81       	ldd	r27, Z+7	; 0x07
    10ba:	9e 01       	movw	r18, r28
    10bc:	2e 5f       	subi	r18, 0xFE	; 254
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	15 96       	adiw	r26, 0x05	; 5
    10c2:	3c 93       	st	X, r19
    10c4:	2e 93       	st	-X, r18
    10c6:	14 97       	sbiw	r26, 0x04	; 4
    10c8:	37 83       	std	Z+7, r19	; 0x07
    10ca:	26 83       	std	Z+6, r18	; 0x06
    10cc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    10ce:	8e 9f       	mul	r24, r30
    10d0:	f0 01       	movw	r30, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	e3 59       	subi	r30, 0x93	; 147
    10d6:	f3 4f       	sbci	r31, 0xF3	; 243
    10d8:	fd 87       	std	Y+13, r31	; 0x0d
    10da:	ec 87       	std	Y+12, r30	; 0x0c
    10dc:	80 81       	ld	r24, Z
    10de:	8f 5f       	subi	r24, 0xFF	; 255
    10e0:	80 83       	st	Z, r24
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	80 91 2a 0c 	lds	r24, 0x0C2A	; 0x800c2a <xSchedulerRunning>
    10ea:	88 23       	and	r24, r24
    10ec:	49 f0       	breq	.+18     	; 0x1100 <prvAddNewTaskToReadyList+0xd6>
    10ee:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    10f2:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    10f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    10f8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10fa:	98 17       	cp	r25, r24
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <prvAddNewTaskToReadyList+0xd6>
    10fe:	6d da       	rcall	.-2854   	; 0x5da <vPortYield>
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <prvCheckTasksWaitingTermination>:
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	1a c0       	rjmp	.+52     	; 0x1140 <prvCheckTasksWaitingTermination+0x3a>
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	0f 92       	push	r0
    1112:	e0 91 44 0c 	lds	r30, 0x0C44	; 0x800c44 <xTasksWaitingTermination+0x7>
    1116:	f0 91 45 0c 	lds	r31, 0x0C45	; 0x800c45 <xTasksWaitingTermination+0x8>
    111a:	c0 85       	ldd	r28, Z+8	; 0x08
    111c:	d1 85       	ldd	r29, Z+9	; 0x09
    111e:	ce 01       	movw	r24, r28
    1120:	02 96       	adiw	r24, 0x02	; 2
    1122:	df d9       	rcall	.-3138   	; 0x4e2 <uxListRemove>
    1124:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <uxCurrentNumberOfTasks>
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	80 93 30 0c 	sts	0x0C30, r24	; 0x800c30 <uxCurrentNumberOfTasks>
    112e:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <uxDeletedTasksWaitingCleanUp>
    1132:	81 50       	subi	r24, 0x01	; 1
    1134:	80 93 3c 0c 	sts	0x0C3C, r24	; 0x800c3c <uxDeletedTasksWaitingCleanUp>
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	ce 01       	movw	r24, r28
    113e:	c3 de       	rcall	.-634    	; 0xec6 <prvDeleteTCB>
    1140:	80 91 3c 0c 	lds	r24, 0x0C3C	; 0x800c3c <uxDeletedTasksWaitingCleanUp>
    1144:	81 11       	cpse	r24, r1
    1146:	e2 cf       	rjmp	.-60     	; 0x110c <prvCheckTasksWaitingTermination+0x6>
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <prvAddCurrentTaskToDelayedList>:
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	ff 92       	push	r15
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	6b 01       	movw	r12, r22
    1164:	7c 01       	movw	r14, r24
    1166:	c4 2f       	mov	r28, r20
    1168:	80 90 2c 0c 	lds	r8, 0x0C2C	; 0x800c2c <xTickCount>
    116c:	90 90 2d 0c 	lds	r9, 0x0C2D	; 0x800c2d <xTickCount+0x1>
    1170:	a0 90 2e 0c 	lds	r10, 0x0C2E	; 0x800c2e <xTickCount+0x2>
    1174:	b0 90 2f 0c 	lds	r11, 0x0C2F	; 0x800c2f <xTickCount+0x3>
    1178:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    117c:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1180:	02 96       	adiw	r24, 0x02	; 2
    1182:	af d9       	rcall	.-3234   	; 0x4e2 <uxListRemove>
    1184:	8f ef       	ldi	r24, 0xFF	; 255
    1186:	c8 16       	cp	r12, r24
    1188:	d8 06       	cpc	r13, r24
    118a:	e8 06       	cpc	r14, r24
    118c:	f8 06       	cpc	r15, r24
    118e:	b1 f5       	brne	.+108    	; 0x11fc <prvAddCurrentTaskToDelayedList+0xae>
    1190:	cc 23       	and	r28, r28
    1192:	a1 f1       	breq	.+104    	; 0x11fc <prvAddCurrentTaskToDelayedList+0xae>
    1194:	e1 e3       	ldi	r30, 0x31	; 49
    1196:	fc e0       	ldi	r31, 0x0C	; 12
    1198:	a1 81       	ldd	r26, Z+1	; 0x01
    119a:	b2 81       	ldd	r27, Z+2	; 0x02
    119c:	c0 91 db 0c 	lds	r28, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    11a0:	d0 91 dc 0c 	lds	r29, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    11a4:	bf 83       	std	Y+7, r27	; 0x07
    11a6:	ae 83       	std	Y+6, r26	; 0x06
    11a8:	c0 91 db 0c 	lds	r28, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    11ac:	d0 91 dc 0c 	lds	r29, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    11b0:	16 96       	adiw	r26, 0x06	; 6
    11b2:	8d 91       	ld	r24, X+
    11b4:	9c 91       	ld	r25, X
    11b6:	17 97       	sbiw	r26, 0x07	; 7
    11b8:	99 87       	std	Y+9, r25	; 0x09
    11ba:	88 87       	std	Y+8, r24	; 0x08
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	cd 91       	ld	r28, X+
    11c0:	dc 91       	ld	r29, X
    11c2:	17 97       	sbiw	r26, 0x07	; 7
    11c4:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    11c8:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    11cc:	02 96       	adiw	r24, 0x02	; 2
    11ce:	9d 83       	std	Y+5, r25	; 0x05
    11d0:	8c 83       	std	Y+4, r24	; 0x04
    11d2:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    11d6:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    11da:	02 96       	adiw	r24, 0x02	; 2
    11dc:	17 96       	adiw	r26, 0x07	; 7
    11de:	9c 93       	st	X, r25
    11e0:	8e 93       	st	-X, r24
    11e2:	16 97       	sbiw	r26, 0x06	; 6
    11e4:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    11e8:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    11ec:	1d 96       	adiw	r26, 0x0d	; 13
    11ee:	fc 93       	st	X, r31
    11f0:	ee 93       	st	-X, r30
    11f2:	1c 97       	sbiw	r26, 0x0c	; 12
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	80 83       	st	Z, r24
    11fa:	3d c0       	rjmp	.+122    	; 0x1276 <prvAddCurrentTaskToDelayedList+0x128>
    11fc:	c8 0c       	add	r12, r8
    11fe:	d9 1c       	adc	r13, r9
    1200:	ea 1c       	adc	r14, r10
    1202:	fb 1c       	adc	r15, r11
    1204:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1208:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    120c:	c2 82       	std	Z+2, r12	; 0x02
    120e:	d3 82       	std	Z+3, r13	; 0x03
    1210:	e4 82       	std	Z+4, r14	; 0x04
    1212:	f5 82       	std	Z+5, r15	; 0x05
    1214:	c8 14       	cp	r12, r8
    1216:	d9 04       	cpc	r13, r9
    1218:	ea 04       	cpc	r14, r10
    121a:	fb 04       	cpc	r15, r11
    121c:	60 f4       	brcc	.+24     	; 0x1236 <prvAddCurrentTaskToDelayedList+0xe8>
    121e:	60 91 db 0c 	lds	r22, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1222:	70 91 dc 0c 	lds	r23, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1226:	80 91 53 0c 	lds	r24, 0x0C53	; 0x800c53 <pxOverflowDelayedTaskList>
    122a:	90 91 54 0c 	lds	r25, 0x0C54	; 0x800c54 <pxOverflowDelayedTaskList+0x1>
    122e:	6e 5f       	subi	r22, 0xFE	; 254
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	1a d9       	rcall	.-3532   	; 0x468 <vListInsert>
    1234:	20 c0       	rjmp	.+64     	; 0x1276 <prvAddCurrentTaskToDelayedList+0x128>
    1236:	60 91 db 0c 	lds	r22, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    123a:	70 91 dc 0c 	lds	r23, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    123e:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <pxDelayedTaskList>
    1242:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <pxDelayedTaskList+0x1>
    1246:	6e 5f       	subi	r22, 0xFE	; 254
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	0e d9       	rcall	.-3556   	; 0x468 <vListInsert>
    124c:	80 91 1f 0c 	lds	r24, 0x0C1F	; 0x800c1f <xNextTaskUnblockTime>
    1250:	90 91 20 0c 	lds	r25, 0x0C20	; 0x800c20 <xNextTaskUnblockTime+0x1>
    1254:	a0 91 21 0c 	lds	r26, 0x0C21	; 0x800c21 <xNextTaskUnblockTime+0x2>
    1258:	b0 91 22 0c 	lds	r27, 0x0C22	; 0x800c22 <xNextTaskUnblockTime+0x3>
    125c:	c8 16       	cp	r12, r24
    125e:	d9 06       	cpc	r13, r25
    1260:	ea 06       	cpc	r14, r26
    1262:	fb 06       	cpc	r15, r27
    1264:	40 f4       	brcc	.+16     	; 0x1276 <prvAddCurrentTaskToDelayedList+0x128>
    1266:	c0 92 1f 0c 	sts	0x0C1F, r12	; 0x800c1f <xNextTaskUnblockTime>
    126a:	d0 92 20 0c 	sts	0x0C20, r13	; 0x800c20 <xNextTaskUnblockTime+0x1>
    126e:	e0 92 21 0c 	sts	0x0C21, r14	; 0x800c21 <xNextTaskUnblockTime+0x2>
    1272:	f0 92 22 0c 	sts	0x0C22, r15	; 0x800c22 <xNextTaskUnblockTime+0x3>
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	ff 90       	pop	r15
    127c:	ef 90       	pop	r14
    127e:	df 90       	pop	r13
    1280:	cf 90       	pop	r12
    1282:	bf 90       	pop	r11
    1284:	af 90       	pop	r10
    1286:	9f 90       	pop	r9
    1288:	8f 90       	pop	r8
    128a:	08 95       	ret

0000128c <xTaskCreate>:
    128c:	2f 92       	push	r2
    128e:	3f 92       	push	r3
    1290:	4f 92       	push	r4
    1292:	5f 92       	push	r5
    1294:	6f 92       	push	r6
    1296:	7f 92       	push	r7
    1298:	8f 92       	push	r8
    129a:	9f 92       	push	r9
    129c:	af 92       	push	r10
    129e:	bf 92       	push	r11
    12a0:	cf 92       	push	r12
    12a2:	df 92       	push	r13
    12a4:	ef 92       	push	r14
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	3c 01       	movw	r6, r24
    12b0:	1b 01       	movw	r2, r22
    12b2:	4a 01       	movw	r8, r20
    12b4:	29 01       	movw	r4, r18
    12b6:	ca 01       	movw	r24, r20
    12b8:	0e 94 3a 01 	call	0x274	; 0x274 <pvPortMalloc>
    12bc:	6c 01       	movw	r12, r24
    12be:	89 2b       	or	r24, r25
    12c0:	69 f0       	breq	.+26     	; 0x12dc <xTaskCreate+0x50>
    12c2:	86 e3       	ldi	r24, 0x36	; 54
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 3a 01 	call	0x274	; 0x274 <pvPortMalloc>
    12ca:	ec 01       	movw	r28, r24
    12cc:	89 2b       	or	r24, r25
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <xTaskCreate+0x4a>
    12d0:	dc 8e       	std	Y+28, r13	; 0x1c
    12d2:	cb 8e       	std	Y+27, r12	; 0x1b
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <xTaskCreate+0x54>
    12d6:	c6 01       	movw	r24, r12
    12d8:	76 d8       	rcall	.-3860   	; 0x3c6 <vPortFree>
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <xTaskCreate+0x54>
    12dc:	c0 e0       	ldi	r28, 0x00	; 0
    12de:	d0 e0       	ldi	r29, 0x00	; 0
    12e0:	20 97       	sbiw	r28, 0x00	; 0
    12e2:	61 f0       	breq	.+24     	; 0x12fc <xTaskCreate+0x70>
    12e4:	a1 2c       	mov	r10, r1
    12e6:	b1 2c       	mov	r11, r1
    12e8:	6e 01       	movw	r12, r28
    12ea:	92 01       	movw	r18, r4
    12ec:	a4 01       	movw	r20, r8
    12ee:	b1 01       	movw	r22, r2
    12f0:	c3 01       	movw	r24, r6
    12f2:	f4 dd       	rcall	.-1048   	; 0xedc <prvInitialiseNewTask>
    12f4:	ce 01       	movw	r24, r28
    12f6:	99 de       	rcall	.-718    	; 0x102a <prvAddNewTaskToReadyList>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <xTaskCreate+0x72>
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	df 90       	pop	r13
    130a:	cf 90       	pop	r12
    130c:	bf 90       	pop	r11
    130e:	af 90       	pop	r10
    1310:	9f 90       	pop	r9
    1312:	8f 90       	pop	r8
    1314:	7f 90       	pop	r7
    1316:	6f 90       	pop	r6
    1318:	5f 90       	pop	r5
    131a:	4f 90       	pop	r4
    131c:	3f 90       	pop	r3
    131e:	2f 90       	pop	r2
    1320:	08 95       	ret

00001322 <vTaskStartScheduler>:
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	0f 2e       	mov	r0, r31
    132a:	fd e1       	ldi	r31, 0x1D	; 29
    132c:	ef 2e       	mov	r14, r31
    132e:	fc e0       	ldi	r31, 0x0C	; 12
    1330:	ff 2e       	mov	r15, r31
    1332:	f0 2d       	mov	r31, r0
    1334:	00 e0       	ldi	r16, 0x00	; 0
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 ec       	ldi	r20, 0xC0	; 192
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	6d e1       	ldi	r22, 0x1D	; 29
    1340:	72 e0       	ldi	r23, 0x02	; 2
    1342:	8c e7       	ldi	r24, 0x7C	; 124
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a2 df       	rcall	.-188    	; 0x128c <xTaskCreate>
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	09 f4       	brne	.+2      	; 0x134e <vTaskStartScheduler+0x2c>
    134c:	ba d6       	rcall	.+3444   	; 0x20c2 <xTimerCreateTimerTask>
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	f9 f4       	brne	.+62     	; 0x1390 <vTaskStartScheduler+0x6e>
    1352:	f8 94       	cli
    1354:	8f ef       	ldi	r24, 0xFF	; 255
    1356:	9f ef       	ldi	r25, 0xFF	; 255
    1358:	dc 01       	movw	r26, r24
    135a:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <xNextTaskUnblockTime>
    135e:	90 93 20 0c 	sts	0x0C20, r25	; 0x800c20 <xNextTaskUnblockTime+0x1>
    1362:	a0 93 21 0c 	sts	0x0C21, r26	; 0x800c21 <xNextTaskUnblockTime+0x2>
    1366:	b0 93 22 0c 	sts	0x0C22, r27	; 0x800c22 <xNextTaskUnblockTime+0x3>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	80 93 2a 0c 	sts	0x0C2A, r24	; 0x800c2a <xSchedulerRunning>
    1370:	10 92 2c 0c 	sts	0x0C2C, r1	; 0x800c2c <xTickCount>
    1374:	10 92 2d 0c 	sts	0x0C2D, r1	; 0x800c2d <xTickCount+0x1>
    1378:	10 92 2e 0c 	sts	0x0C2E, r1	; 0x800c2e <xTickCount+0x2>
    137c:	10 92 2f 0c 	sts	0x0C2F, r1	; 0x800c2f <xTickCount+0x3>
    1380:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1384:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1388:	87 a5       	ldd	r24, Z+47	; 0x2f
    138a:	0e 94 b7 00 	call	0x16e	; 0x16e <task_switch_in>
    138e:	f3 d8       	rcall	.-3610   	; 0x576 <xPortStartScheduler>
    1390:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	08 95       	ret

0000139c <vTaskSuspendAll>:
    139c:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <uxSchedulerSuspended>
    13a0:	8f 5f       	subi	r24, 0xFF	; 255
    13a2:	80 93 1c 0c 	sts	0x0C1C, r24	; 0x800c1c <uxSchedulerSuspended>
    13a6:	08 95       	ret

000013a8 <xTaskGetTickCount>:
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	0f 92       	push	r0
    13ae:	60 91 2c 0c 	lds	r22, 0x0C2C	; 0x800c2c <xTickCount>
    13b2:	70 91 2d 0c 	lds	r23, 0x0C2D	; 0x800c2d <xTickCount+0x1>
    13b6:	80 91 2e 0c 	lds	r24, 0x0C2E	; 0x800c2e <xTickCount+0x2>
    13ba:	90 91 2f 0c 	lds	r25, 0x0C2F	; 0x800c2f <xTickCount+0x3>
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	08 95       	ret

000013c4 <xTaskIncrementTick>:
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <uxSchedulerSuspended>
    13d4:	81 11       	cpse	r24, r1
    13d6:	05 c1       	rjmp	.+522    	; 0x15e2 <xTaskIncrementTick+0x21e>
    13d8:	c0 90 2c 0c 	lds	r12, 0x0C2C	; 0x800c2c <xTickCount>
    13dc:	d0 90 2d 0c 	lds	r13, 0x0C2D	; 0x800c2d <xTickCount+0x1>
    13e0:	e0 90 2e 0c 	lds	r14, 0x0C2E	; 0x800c2e <xTickCount+0x2>
    13e4:	f0 90 2f 0c 	lds	r15, 0x0C2F	; 0x800c2f <xTickCount+0x3>
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	c8 1a       	sub	r12, r24
    13ec:	d8 0a       	sbc	r13, r24
    13ee:	e8 0a       	sbc	r14, r24
    13f0:	f8 0a       	sbc	r15, r24
    13f2:	c0 92 2c 0c 	sts	0x0C2C, r12	; 0x800c2c <xTickCount>
    13f6:	d0 92 2d 0c 	sts	0x0C2D, r13	; 0x800c2d <xTickCount+0x1>
    13fa:	e0 92 2e 0c 	sts	0x0C2E, r14	; 0x800c2e <xTickCount+0x2>
    13fe:	f0 92 2f 0c 	sts	0x0C2F, r15	; 0x800c2f <xTickCount+0x3>
    1402:	c1 14       	cp	r12, r1
    1404:	d1 04       	cpc	r13, r1
    1406:	e1 04       	cpc	r14, r1
    1408:	f1 04       	cpc	r15, r1
    140a:	b1 f4       	brne	.+44     	; 0x1438 <xTaskIncrementTick+0x74>
    140c:	80 91 55 0c 	lds	r24, 0x0C55	; 0x800c55 <pxDelayedTaskList>
    1410:	90 91 56 0c 	lds	r25, 0x0C56	; 0x800c56 <pxDelayedTaskList+0x1>
    1414:	20 91 53 0c 	lds	r18, 0x0C53	; 0x800c53 <pxOverflowDelayedTaskList>
    1418:	30 91 54 0c 	lds	r19, 0x0C54	; 0x800c54 <pxOverflowDelayedTaskList+0x1>
    141c:	30 93 56 0c 	sts	0x0C56, r19	; 0x800c56 <pxDelayedTaskList+0x1>
    1420:	20 93 55 0c 	sts	0x0C55, r18	; 0x800c55 <pxDelayedTaskList>
    1424:	90 93 54 0c 	sts	0x0C54, r25	; 0x800c54 <pxOverflowDelayedTaskList+0x1>
    1428:	80 93 53 0c 	sts	0x0C53, r24	; 0x800c53 <pxOverflowDelayedTaskList>
    142c:	80 91 24 0c 	lds	r24, 0x0C24	; 0x800c24 <xNumOfOverflows>
    1430:	8f 5f       	subi	r24, 0xFF	; 255
    1432:	80 93 24 0c 	sts	0x0C24, r24	; 0x800c24 <xNumOfOverflows>
    1436:	20 dd       	rcall	.-1472   	; 0xe78 <prvResetNextTaskUnblockTime>
    1438:	80 91 1f 0c 	lds	r24, 0x0C1F	; 0x800c1f <xNextTaskUnblockTime>
    143c:	90 91 20 0c 	lds	r25, 0x0C20	; 0x800c20 <xNextTaskUnblockTime+0x1>
    1440:	a0 91 21 0c 	lds	r26, 0x0C21	; 0x800c21 <xNextTaskUnblockTime+0x2>
    1444:	b0 91 22 0c 	lds	r27, 0x0C22	; 0x800c22 <xNextTaskUnblockTime+0x3>
    1448:	c8 16       	cp	r12, r24
    144a:	d9 06       	cpc	r13, r25
    144c:	ea 06       	cpc	r14, r26
    144e:	fb 06       	cpc	r15, r27
    1450:	20 f4       	brcc	.+8      	; 0x145a <xTaskIncrementTick+0x96>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	b2 c0       	rjmp	.+356    	; 0x15ba <xTaskIncrementTick+0x1f6>
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	01 c0       	rjmp	.+2      	; 0x145c <xTaskIncrementTick+0x98>
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	e0 91 55 0c 	lds	r30, 0x0C55	; 0x800c55 <pxDelayedTaskList>
    1460:	f0 91 56 0c 	lds	r31, 0x0C56	; 0x800c56 <pxDelayedTaskList+0x1>
    1464:	90 81       	ld	r25, Z
    1466:	91 11       	cpse	r25, r1
    1468:	0c c0       	rjmp	.+24     	; 0x1482 <xTaskIncrementTick+0xbe>
    146a:	4f ef       	ldi	r20, 0xFF	; 255
    146c:	5f ef       	ldi	r21, 0xFF	; 255
    146e:	ba 01       	movw	r22, r20
    1470:	40 93 1f 0c 	sts	0x0C1F, r20	; 0x800c1f <xNextTaskUnblockTime>
    1474:	50 93 20 0c 	sts	0x0C20, r21	; 0x800c20 <xNextTaskUnblockTime+0x1>
    1478:	60 93 21 0c 	sts	0x0C21, r22	; 0x800c21 <xNextTaskUnblockTime+0x2>
    147c:	70 93 22 0c 	sts	0x0C22, r23	; 0x800c22 <xNextTaskUnblockTime+0x3>
    1480:	9c c0       	rjmp	.+312    	; 0x15ba <xTaskIncrementTick+0x1f6>
    1482:	e0 91 55 0c 	lds	r30, 0x0C55	; 0x800c55 <pxDelayedTaskList>
    1486:	f0 91 56 0c 	lds	r31, 0x0C56	; 0x800c56 <pxDelayedTaskList+0x1>
    148a:	07 80       	ldd	r0, Z+7	; 0x07
    148c:	f0 85       	ldd	r31, Z+8	; 0x08
    148e:	e0 2d       	mov	r30, r0
    1490:	00 84       	ldd	r0, Z+8	; 0x08
    1492:	f1 85       	ldd	r31, Z+9	; 0x09
    1494:	e0 2d       	mov	r30, r0
    1496:	42 81       	ldd	r20, Z+2	; 0x02
    1498:	53 81       	ldd	r21, Z+3	; 0x03
    149a:	64 81       	ldd	r22, Z+4	; 0x04
    149c:	75 81       	ldd	r23, Z+5	; 0x05
    149e:	c4 16       	cp	r12, r20
    14a0:	d5 06       	cpc	r13, r21
    14a2:	e6 06       	cpc	r14, r22
    14a4:	f7 06       	cpc	r15, r23
    14a6:	48 f4       	brcc	.+18     	; 0x14ba <xTaskIncrementTick+0xf6>
    14a8:	40 93 1f 0c 	sts	0x0C1F, r20	; 0x800c1f <xNextTaskUnblockTime>
    14ac:	50 93 20 0c 	sts	0x0C20, r21	; 0x800c20 <xNextTaskUnblockTime+0x1>
    14b0:	60 93 21 0c 	sts	0x0C21, r22	; 0x800c21 <xNextTaskUnblockTime+0x2>
    14b4:	70 93 22 0c 	sts	0x0C22, r23	; 0x800c22 <xNextTaskUnblockTime+0x3>
    14b8:	80 c0       	rjmp	.+256    	; 0x15ba <xTaskIncrementTick+0x1f6>
    14ba:	a4 85       	ldd	r26, Z+12	; 0x0c
    14bc:	b5 85       	ldd	r27, Z+13	; 0x0d
    14be:	c6 81       	ldd	r28, Z+6	; 0x06
    14c0:	d7 81       	ldd	r29, Z+7	; 0x07
    14c2:	20 85       	ldd	r18, Z+8	; 0x08
    14c4:	31 85       	ldd	r19, Z+9	; 0x09
    14c6:	3f 83       	std	Y+7, r19	; 0x07
    14c8:	2e 83       	std	Y+6, r18	; 0x06
    14ca:	c0 85       	ldd	r28, Z+8	; 0x08
    14cc:	d1 85       	ldd	r29, Z+9	; 0x09
    14ce:	26 81       	ldd	r18, Z+6	; 0x06
    14d0:	37 81       	ldd	r19, Z+7	; 0x07
    14d2:	3d 83       	std	Y+5, r19	; 0x05
    14d4:	2c 83       	std	Y+4, r18	; 0x04
    14d6:	11 96       	adiw	r26, 0x01	; 1
    14d8:	4d 91       	ld	r20, X+
    14da:	5c 91       	ld	r21, X
    14dc:	12 97       	sbiw	r26, 0x02	; 2
    14de:	9f 01       	movw	r18, r30
    14e0:	2e 5f       	subi	r18, 0xFE	; 254
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	42 17       	cp	r20, r18
    14e6:	53 07       	cpc	r21, r19
    14e8:	31 f4       	brne	.+12     	; 0x14f6 <xTaskIncrementTick+0x132>
    14ea:	40 85       	ldd	r20, Z+8	; 0x08
    14ec:	51 85       	ldd	r21, Z+9	; 0x09
    14ee:	12 96       	adiw	r26, 0x02	; 2
    14f0:	5c 93       	st	X, r21
    14f2:	4e 93       	st	-X, r20
    14f4:	11 97       	sbiw	r26, 0x01	; 1
    14f6:	15 86       	std	Z+13, r1	; 0x0d
    14f8:	14 86       	std	Z+12, r1	; 0x0c
    14fa:	9c 91       	ld	r25, X
    14fc:	91 50       	subi	r25, 0x01	; 1
    14fe:	9c 93       	st	X, r25
    1500:	a0 8d       	ldd	r26, Z+24	; 0x18
    1502:	b1 8d       	ldd	r27, Z+25	; 0x19
    1504:	10 97       	sbiw	r26, 0x00	; 0
    1506:	09 f1       	breq	.+66     	; 0x154a <xTaskIncrementTick+0x186>
    1508:	c2 89       	ldd	r28, Z+18	; 0x12
    150a:	d3 89       	ldd	r29, Z+19	; 0x13
    150c:	44 89       	ldd	r20, Z+20	; 0x14
    150e:	55 89       	ldd	r21, Z+21	; 0x15
    1510:	5f 83       	std	Y+7, r21	; 0x07
    1512:	4e 83       	std	Y+6, r20	; 0x06
    1514:	c4 89       	ldd	r28, Z+20	; 0x14
    1516:	d5 89       	ldd	r29, Z+21	; 0x15
    1518:	42 89       	ldd	r20, Z+18	; 0x12
    151a:	53 89       	ldd	r21, Z+19	; 0x13
    151c:	5d 83       	std	Y+5, r21	; 0x05
    151e:	4c 83       	std	Y+4, r20	; 0x04
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	6d 91       	ld	r22, X+
    1524:	7c 91       	ld	r23, X
    1526:	12 97       	sbiw	r26, 0x02	; 2
    1528:	af 01       	movw	r20, r30
    152a:	42 5f       	subi	r20, 0xF2	; 242
    152c:	5f 4f       	sbci	r21, 0xFF	; 255
    152e:	64 17       	cp	r22, r20
    1530:	75 07       	cpc	r23, r21
    1532:	31 f4       	brne	.+12     	; 0x1540 <xTaskIncrementTick+0x17c>
    1534:	44 89       	ldd	r20, Z+20	; 0x14
    1536:	55 89       	ldd	r21, Z+21	; 0x15
    1538:	12 96       	adiw	r26, 0x02	; 2
    153a:	5c 93       	st	X, r21
    153c:	4e 93       	st	-X, r20
    153e:	11 97       	sbiw	r26, 0x01	; 1
    1540:	11 8e       	std	Z+25, r1	; 0x19
    1542:	10 8e       	std	Z+24, r1	; 0x18
    1544:	9c 91       	ld	r25, X
    1546:	91 50       	subi	r25, 0x01	; 1
    1548:	9c 93       	st	X, r25
    154a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    154c:	90 91 2b 0c 	lds	r25, 0x0C2B	; 0x800c2b <uxTopReadyPriority>
    1550:	9a 17       	cp	r25, r26
    1552:	10 f4       	brcc	.+4      	; 0x1558 <xTaskIncrementTick+0x194>
    1554:	a0 93 2b 0c 	sts	0x0C2B, r26	; 0x800c2b <uxTopReadyPriority>
    1558:	9b e0       	ldi	r25, 0x0B	; 11
    155a:	9a 9f       	mul	r25, r26
    155c:	d0 01       	movw	r26, r0
    155e:	11 24       	eor	r1, r1
    1560:	a3 59       	subi	r26, 0x93	; 147
    1562:	b3 4f       	sbci	r27, 0xF3	; 243
    1564:	11 96       	adiw	r26, 0x01	; 1
    1566:	0d 90       	ld	r0, X+
    1568:	bc 91       	ld	r27, X
    156a:	a0 2d       	mov	r26, r0
    156c:	b7 83       	std	Z+7, r27	; 0x07
    156e:	a6 83       	std	Z+6, r26	; 0x06
    1570:	16 96       	adiw	r26, 0x06	; 6
    1572:	4d 91       	ld	r20, X+
    1574:	5c 91       	ld	r21, X
    1576:	17 97       	sbiw	r26, 0x07	; 7
    1578:	51 87       	std	Z+9, r21	; 0x09
    157a:	40 87       	std	Z+8, r20	; 0x08
    157c:	16 96       	adiw	r26, 0x06	; 6
    157e:	cd 91       	ld	r28, X+
    1580:	dc 91       	ld	r29, X
    1582:	17 97       	sbiw	r26, 0x07	; 7
    1584:	3d 83       	std	Y+5, r19	; 0x05
    1586:	2c 83       	std	Y+4, r18	; 0x04
    1588:	17 96       	adiw	r26, 0x07	; 7
    158a:	3c 93       	st	X, r19
    158c:	2e 93       	st	-X, r18
    158e:	16 97       	sbiw	r26, 0x06	; 6
    1590:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1592:	9a 9f       	mul	r25, r26
    1594:	d0 01       	movw	r26, r0
    1596:	11 24       	eor	r1, r1
    1598:	a3 59       	subi	r26, 0x93	; 147
    159a:	b3 4f       	sbci	r27, 0xF3	; 243
    159c:	b5 87       	std	Z+13, r27	; 0x0d
    159e:	a4 87       	std	Z+12, r26	; 0x0c
    15a0:	9c 91       	ld	r25, X
    15a2:	9f 5f       	subi	r25, 0xFF	; 255
    15a4:	9c 93       	st	X, r25
    15a6:	22 8d       	ldd	r18, Z+26	; 0x1a
    15a8:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    15ac:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    15b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    15b2:	29 17       	cp	r18, r25
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <xTaskIncrementTick+0x1f4>
    15b6:	4f cf       	rjmp	.-354    	; 0x1456 <xTaskIncrementTick+0x92>
    15b8:	51 cf       	rjmp	.-350    	; 0x145c <xTaskIncrementTick+0x98>
    15ba:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    15be:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    15c2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    15c4:	9b e0       	ldi	r25, 0x0B	; 11
    15c6:	e9 9f       	mul	r30, r25
    15c8:	f0 01       	movw	r30, r0
    15ca:	11 24       	eor	r1, r1
    15cc:	e3 59       	subi	r30, 0x93	; 147
    15ce:	f3 4f       	sbci	r31, 0xF3	; 243
    15d0:	90 81       	ld	r25, Z
    15d2:	92 30       	cpi	r25, 0x02	; 2
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <xTaskIncrementTick+0x214>
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 91 25 0c 	lds	r25, 0x0C25	; 0x800c25 <xYieldPending>
    15dc:	91 11       	cpse	r25, r1
    15de:	16 c0       	rjmp	.+44     	; 0x160c <xTaskIncrementTick+0x248>
    15e0:	16 c0       	rjmp	.+44     	; 0x160e <xTaskIncrementTick+0x24a>
    15e2:	80 91 26 0c 	lds	r24, 0x0C26	; 0x800c26 <xPendedTicks>
    15e6:	90 91 27 0c 	lds	r25, 0x0C27	; 0x800c27 <xPendedTicks+0x1>
    15ea:	a0 91 28 0c 	lds	r26, 0x0C28	; 0x800c28 <xPendedTicks+0x2>
    15ee:	b0 91 29 0c 	lds	r27, 0x0C29	; 0x800c29 <xPendedTicks+0x3>
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	a1 1d       	adc	r26, r1
    15f6:	b1 1d       	adc	r27, r1
    15f8:	80 93 26 0c 	sts	0x0C26, r24	; 0x800c26 <xPendedTicks>
    15fc:	90 93 27 0c 	sts	0x0C27, r25	; 0x800c27 <xPendedTicks+0x1>
    1600:	a0 93 28 0c 	sts	0x0C28, r26	; 0x800c28 <xPendedTicks+0x2>
    1604:	b0 93 29 0c 	sts	0x0C29, r27	; 0x800c29 <xPendedTicks+0x3>
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	01 c0       	rjmp	.+2      	; 0x160e <xTaskIncrementTick+0x24a>
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	ff 90       	pop	r15
    1614:	ef 90       	pop	r14
    1616:	df 90       	pop	r13
    1618:	cf 90       	pop	r12
    161a:	08 95       	ret

0000161c <xTaskResumeAll>:
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	0f 92       	push	r0
    162e:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <uxSchedulerSuspended>
    1632:	81 50       	subi	r24, 0x01	; 1
    1634:	80 93 1c 0c 	sts	0x0C1C, r24	; 0x800c1c <uxSchedulerSuspended>
    1638:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <uxSchedulerSuspended>
    163c:	81 11       	cpse	r24, r1
    163e:	be c0       	rjmp	.+380    	; 0x17bc <xTaskResumeAll+0x1a0>
    1640:	80 91 30 0c 	lds	r24, 0x0C30	; 0x800c30 <uxCurrentNumberOfTasks>
    1644:	81 11       	cpse	r24, r1
    1646:	88 c0       	rjmp	.+272    	; 0x1758 <xTaskResumeAll+0x13c>
    1648:	bc c0       	rjmp	.+376    	; 0x17c2 <xTaskResumeAll+0x1a6>
    164a:	e0 91 4f 0c 	lds	r30, 0x0C4F	; 0x800c4f <xPendingReadyList+0x7>
    164e:	f0 91 50 0c 	lds	r31, 0x0C50	; 0x800c50 <xPendingReadyList+0x8>
    1652:	00 84       	ldd	r0, Z+8	; 0x08
    1654:	f1 85       	ldd	r31, Z+9	; 0x09
    1656:	e0 2d       	mov	r30, r0
    1658:	a0 8d       	ldd	r26, Z+24	; 0x18
    165a:	b1 8d       	ldd	r27, Z+25	; 0x19
    165c:	c2 89       	ldd	r28, Z+18	; 0x12
    165e:	d3 89       	ldd	r29, Z+19	; 0x13
    1660:	84 89       	ldd	r24, Z+20	; 0x14
    1662:	95 89       	ldd	r25, Z+21	; 0x15
    1664:	9f 83       	std	Y+7, r25	; 0x07
    1666:	8e 83       	std	Y+6, r24	; 0x06
    1668:	c4 89       	ldd	r28, Z+20	; 0x14
    166a:	d5 89       	ldd	r29, Z+21	; 0x15
    166c:	82 89       	ldd	r24, Z+18	; 0x12
    166e:	93 89       	ldd	r25, Z+19	; 0x13
    1670:	9d 83       	std	Y+5, r25	; 0x05
    1672:	8c 83       	std	Y+4, r24	; 0x04
    1674:	11 96       	adiw	r26, 0x01	; 1
    1676:	2d 91       	ld	r18, X+
    1678:	3c 91       	ld	r19, X
    167a:	12 97       	sbiw	r26, 0x02	; 2
    167c:	cf 01       	movw	r24, r30
    167e:	0e 96       	adiw	r24, 0x0e	; 14
    1680:	28 17       	cp	r18, r24
    1682:	39 07       	cpc	r19, r25
    1684:	31 f4       	brne	.+12     	; 0x1692 <xTaskResumeAll+0x76>
    1686:	84 89       	ldd	r24, Z+20	; 0x14
    1688:	95 89       	ldd	r25, Z+21	; 0x15
    168a:	12 96       	adiw	r26, 0x02	; 2
    168c:	9c 93       	st	X, r25
    168e:	8e 93       	st	-X, r24
    1690:	11 97       	sbiw	r26, 0x01	; 1
    1692:	11 8e       	std	Z+25, r1	; 0x19
    1694:	10 8e       	std	Z+24, r1	; 0x18
    1696:	8c 91       	ld	r24, X
    1698:	81 50       	subi	r24, 0x01	; 1
    169a:	8c 93       	st	X, r24
    169c:	a4 85       	ldd	r26, Z+12	; 0x0c
    169e:	b5 85       	ldd	r27, Z+13	; 0x0d
    16a0:	c6 81       	ldd	r28, Z+6	; 0x06
    16a2:	d7 81       	ldd	r29, Z+7	; 0x07
    16a4:	80 85       	ldd	r24, Z+8	; 0x08
    16a6:	91 85       	ldd	r25, Z+9	; 0x09
    16a8:	9f 83       	std	Y+7, r25	; 0x07
    16aa:	8e 83       	std	Y+6, r24	; 0x06
    16ac:	c0 85       	ldd	r28, Z+8	; 0x08
    16ae:	d1 85       	ldd	r29, Z+9	; 0x09
    16b0:	86 81       	ldd	r24, Z+6	; 0x06
    16b2:	97 81       	ldd	r25, Z+7	; 0x07
    16b4:	9d 83       	std	Y+5, r25	; 0x05
    16b6:	8c 83       	std	Y+4, r24	; 0x04
    16b8:	11 96       	adiw	r26, 0x01	; 1
    16ba:	8d 91       	ld	r24, X+
    16bc:	9c 91       	ld	r25, X
    16be:	12 97       	sbiw	r26, 0x02	; 2
    16c0:	9f 01       	movw	r18, r30
    16c2:	2e 5f       	subi	r18, 0xFE	; 254
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	82 17       	cp	r24, r18
    16c8:	93 07       	cpc	r25, r19
    16ca:	31 f4       	brne	.+12     	; 0x16d8 <xTaskResumeAll+0xbc>
    16cc:	80 85       	ldd	r24, Z+8	; 0x08
    16ce:	91 85       	ldd	r25, Z+9	; 0x09
    16d0:	12 96       	adiw	r26, 0x02	; 2
    16d2:	9c 93       	st	X, r25
    16d4:	8e 93       	st	-X, r24
    16d6:	11 97       	sbiw	r26, 0x01	; 1
    16d8:	15 86       	std	Z+13, r1	; 0x0d
    16da:	14 86       	std	Z+12, r1	; 0x0c
    16dc:	8c 91       	ld	r24, X
    16de:	81 50       	subi	r24, 0x01	; 1
    16e0:	8c 93       	st	X, r24
    16e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    16e4:	80 91 2b 0c 	lds	r24, 0x0C2B	; 0x800c2b <uxTopReadyPriority>
    16e8:	8a 17       	cp	r24, r26
    16ea:	10 f4       	brcc	.+4      	; 0x16f0 <xTaskResumeAll+0xd4>
    16ec:	a0 93 2b 0c 	sts	0x0C2B, r26	; 0x800c2b <uxTopReadyPriority>
    16f0:	8b e0       	ldi	r24, 0x0B	; 11
    16f2:	8a 9f       	mul	r24, r26
    16f4:	d0 01       	movw	r26, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	a3 59       	subi	r26, 0x93	; 147
    16fa:	b3 4f       	sbci	r27, 0xF3	; 243
    16fc:	11 96       	adiw	r26, 0x01	; 1
    16fe:	0d 90       	ld	r0, X+
    1700:	bc 91       	ld	r27, X
    1702:	a0 2d       	mov	r26, r0
    1704:	b7 83       	std	Z+7, r27	; 0x07
    1706:	a6 83       	std	Z+6, r26	; 0x06
    1708:	16 96       	adiw	r26, 0x06	; 6
    170a:	4d 91       	ld	r20, X+
    170c:	5c 91       	ld	r21, X
    170e:	17 97       	sbiw	r26, 0x07	; 7
    1710:	51 87       	std	Z+9, r21	; 0x09
    1712:	40 87       	std	Z+8, r20	; 0x08
    1714:	16 96       	adiw	r26, 0x06	; 6
    1716:	cd 91       	ld	r28, X+
    1718:	dc 91       	ld	r29, X
    171a:	17 97       	sbiw	r26, 0x07	; 7
    171c:	3d 83       	std	Y+5, r19	; 0x05
    171e:	2c 83       	std	Y+4, r18	; 0x04
    1720:	17 96       	adiw	r26, 0x07	; 7
    1722:	3c 93       	st	X, r19
    1724:	2e 93       	st	-X, r18
    1726:	16 97       	sbiw	r26, 0x06	; 6
    1728:	a2 8d       	ldd	r26, Z+26	; 0x1a
    172a:	8a 9f       	mul	r24, r26
    172c:	d0 01       	movw	r26, r0
    172e:	11 24       	eor	r1, r1
    1730:	a3 59       	subi	r26, 0x93	; 147
    1732:	b3 4f       	sbci	r27, 0xF3	; 243
    1734:	b5 87       	std	Z+13, r27	; 0x0d
    1736:	a4 87       	std	Z+12, r26	; 0x0c
    1738:	8c 91       	ld	r24, X
    173a:	8f 5f       	subi	r24, 0xFF	; 255
    173c:	8c 93       	st	X, r24
    173e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1740:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1744:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1748:	5a 96       	adiw	r26, 0x1a	; 26
    174a:	8c 91       	ld	r24, X
    174c:	98 17       	cp	r25, r24
    174e:	30 f0       	brcs	.+12     	; 0x175c <xTaskResumeAll+0x140>
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <xYieldPending>
    1756:	02 c0       	rjmp	.+4      	; 0x175c <xTaskResumeAll+0x140>
    1758:	e0 e0       	ldi	r30, 0x00	; 0
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 91 48 0c 	lds	r24, 0x0C48	; 0x800c48 <xPendingReadyList>
    1760:	81 11       	cpse	r24, r1
    1762:	73 cf       	rjmp	.-282    	; 0x164a <xTaskResumeAll+0x2e>
    1764:	ef 2b       	or	r30, r31
    1766:	09 f0       	breq	.+2      	; 0x176a <xTaskResumeAll+0x14e>
    1768:	87 db       	rcall	.-2290   	; 0xe78 <prvResetNextTaskUnblockTime>
    176a:	c0 90 26 0c 	lds	r12, 0x0C26	; 0x800c26 <xPendedTicks>
    176e:	d0 90 27 0c 	lds	r13, 0x0C27	; 0x800c27 <xPendedTicks+0x1>
    1772:	e0 90 28 0c 	lds	r14, 0x0C28	; 0x800c28 <xPendedTicks+0x2>
    1776:	f0 90 29 0c 	lds	r15, 0x0C29	; 0x800c29 <xPendedTicks+0x3>
    177a:	c1 14       	cp	r12, r1
    177c:	d1 04       	cpc	r13, r1
    177e:	e1 04       	cpc	r14, r1
    1780:	f1 04       	cpc	r15, r1
    1782:	a1 f0       	breq	.+40     	; 0x17ac <xTaskResumeAll+0x190>
    1784:	1f de       	rcall	.-962    	; 0x13c4 <xTaskIncrementTick>
    1786:	88 23       	and	r24, r24
    1788:	19 f0       	breq	.+6      	; 0x1790 <xTaskResumeAll+0x174>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <xYieldPending>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	c8 1a       	sub	r12, r24
    1794:	d1 08       	sbc	r13, r1
    1796:	e1 08       	sbc	r14, r1
    1798:	f1 08       	sbc	r15, r1
    179a:	a1 f7       	brne	.-24     	; 0x1784 <xTaskResumeAll+0x168>
    179c:	10 92 26 0c 	sts	0x0C26, r1	; 0x800c26 <xPendedTicks>
    17a0:	10 92 27 0c 	sts	0x0C27, r1	; 0x800c27 <xPendedTicks+0x1>
    17a4:	10 92 28 0c 	sts	0x0C28, r1	; 0x800c28 <xPendedTicks+0x2>
    17a8:	10 92 29 0c 	sts	0x0C29, r1	; 0x800c29 <xPendedTicks+0x3>
    17ac:	80 91 25 0c 	lds	r24, 0x0C25	; 0x800c25 <xYieldPending>
    17b0:	88 23       	and	r24, r24
    17b2:	31 f0       	breq	.+12     	; 0x17c0 <xTaskResumeAll+0x1a4>
    17b4:	0e 94 ed 02 	call	0x5da	; 0x5da <vPortYield>
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	03 c0       	rjmp	.+6      	; 0x17c2 <xTaskResumeAll+0x1a6>
    17bc:	80 e0       	ldi	r24, 0x00	; 0
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <xTaskResumeAll+0x1a6>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	0f 90       	pop	r0
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	df 90       	pop	r13
    17d0:	cf 90       	pop	r12
    17d2:	08 95       	ret

000017d4 <xTaskDelayUntil>:
    17d4:	8f 92       	push	r8
    17d6:	9f 92       	push	r9
    17d8:	af 92       	push	r10
    17da:	bf 92       	push	r11
    17dc:	cf 92       	push	r12
    17de:	df 92       	push	r13
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	ec 01       	movw	r28, r24
    17ec:	6a 01       	movw	r12, r20
    17ee:	7b 01       	movw	r14, r22
    17f0:	d5 dd       	rcall	.-1110   	; 0x139c <vTaskSuspendAll>
    17f2:	80 90 2c 0c 	lds	r8, 0x0C2C	; 0x800c2c <xTickCount>
    17f6:	90 90 2d 0c 	lds	r9, 0x0C2D	; 0x800c2d <xTickCount+0x1>
    17fa:	a0 90 2e 0c 	lds	r10, 0x0C2E	; 0x800c2e <xTickCount+0x2>
    17fe:	b0 90 2f 0c 	lds	r11, 0x0C2F	; 0x800c2f <xTickCount+0x3>
    1802:	88 81       	ld	r24, Y
    1804:	99 81       	ldd	r25, Y+1	; 0x01
    1806:	aa 81       	ldd	r26, Y+2	; 0x02
    1808:	bb 81       	ldd	r27, Y+3	; 0x03
    180a:	ac 01       	movw	r20, r24
    180c:	bd 01       	movw	r22, r26
    180e:	4c 0d       	add	r20, r12
    1810:	5d 1d       	adc	r21, r13
    1812:	6e 1d       	adc	r22, r14
    1814:	7f 1d       	adc	r23, r15
    1816:	88 16       	cp	r8, r24
    1818:	99 06       	cpc	r9, r25
    181a:	aa 06       	cpc	r10, r26
    181c:	bb 06       	cpc	r11, r27
    181e:	60 f4       	brcc	.+24     	; 0x1838 <xTaskDelayUntil+0x64>
    1820:	48 17       	cp	r20, r24
    1822:	59 07       	cpc	r21, r25
    1824:	6a 07       	cpc	r22, r26
    1826:	7b 07       	cpc	r23, r27
    1828:	98 f4       	brcc	.+38     	; 0x1850 <xTaskDelayUntil+0x7c>
    182a:	84 16       	cp	r8, r20
    182c:	95 06       	cpc	r9, r21
    182e:	a6 06       	cpc	r10, r22
    1830:	b7 06       	cpc	r11, r23
    1832:	80 f0       	brcs	.+32     	; 0x1854 <xTaskDelayUntil+0x80>
    1834:	10 e0       	ldi	r17, 0x00	; 0
    1836:	13 c0       	rjmp	.+38     	; 0x185e <xTaskDelayUntil+0x8a>
    1838:	48 17       	cp	r20, r24
    183a:	59 07       	cpc	r21, r25
    183c:	6a 07       	cpc	r22, r26
    183e:	7b 07       	cpc	r23, r27
    1840:	58 f0       	brcs	.+22     	; 0x1858 <xTaskDelayUntil+0x84>
    1842:	84 16       	cp	r8, r20
    1844:	95 06       	cpc	r9, r21
    1846:	a6 06       	cpc	r10, r22
    1848:	b7 06       	cpc	r11, r23
    184a:	40 f0       	brcs	.+16     	; 0x185c <xTaskDelayUntil+0x88>
    184c:	10 e0       	ldi	r17, 0x00	; 0
    184e:	07 c0       	rjmp	.+14     	; 0x185e <xTaskDelayUntil+0x8a>
    1850:	10 e0       	ldi	r17, 0x00	; 0
    1852:	05 c0       	rjmp	.+10     	; 0x185e <xTaskDelayUntil+0x8a>
    1854:	11 e0       	ldi	r17, 0x01	; 1
    1856:	03 c0       	rjmp	.+6      	; 0x185e <xTaskDelayUntil+0x8a>
    1858:	11 e0       	ldi	r17, 0x01	; 1
    185a:	01 c0       	rjmp	.+2      	; 0x185e <xTaskDelayUntil+0x8a>
    185c:	11 e0       	ldi	r17, 0x01	; 1
    185e:	48 83       	st	Y, r20
    1860:	59 83       	std	Y+1, r21	; 0x01
    1862:	6a 83       	std	Y+2, r22	; 0x02
    1864:	7b 83       	std	Y+3, r23	; 0x03
    1866:	11 23       	and	r17, r17
    1868:	41 f0       	breq	.+16     	; 0x187a <xTaskDelayUntil+0xa6>
    186a:	cb 01       	movw	r24, r22
    186c:	ba 01       	movw	r22, r20
    186e:	68 19       	sub	r22, r8
    1870:	79 09       	sbc	r23, r9
    1872:	8a 09       	sbc	r24, r10
    1874:	9b 09       	sbc	r25, r11
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	6a dc       	rcall	.-1836   	; 0x114e <prvAddCurrentTaskToDelayedList>
    187a:	d0 de       	rcall	.-608    	; 0x161c <xTaskResumeAll>
    187c:	81 11       	cpse	r24, r1
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <xTaskDelayUntil+0xb0>
    1880:	0e 94 ed 02 	call	0x5da	; 0x5da <vPortYield>
    1884:	81 2f       	mov	r24, r17
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
    1890:	df 90       	pop	r13
    1892:	cf 90       	pop	r12
    1894:	bf 90       	pop	r11
    1896:	af 90       	pop	r10
    1898:	9f 90       	pop	r9
    189a:	8f 90       	pop	r8
    189c:	08 95       	ret

0000189e <vTaskDelay>:
    189e:	cf 92       	push	r12
    18a0:	df 92       	push	r13
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	6b 01       	movw	r12, r22
    18a8:	7c 01       	movw	r14, r24
    18aa:	67 2b       	or	r22, r23
    18ac:	68 2b       	or	r22, r24
    18ae:	69 2b       	or	r22, r25
    18b0:	39 f0       	breq	.+14     	; 0x18c0 <vTaskDelay+0x22>
    18b2:	74 dd       	rcall	.-1304   	; 0x139c <vTaskSuspendAll>
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	c7 01       	movw	r24, r14
    18b8:	b6 01       	movw	r22, r12
    18ba:	49 dc       	rcall	.-1902   	; 0x114e <prvAddCurrentTaskToDelayedList>
    18bc:	af de       	rcall	.-674    	; 0x161c <xTaskResumeAll>
    18be:	01 c0       	rjmp	.+2      	; 0x18c2 <vTaskDelay+0x24>
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	81 11       	cpse	r24, r1
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <vTaskDelay+0x2c>
    18c6:	0e 94 ed 02 	call	0x5da	; 0x5da <vPortYield>
    18ca:	ff 90       	pop	r15
    18cc:	ef 90       	pop	r14
    18ce:	df 90       	pop	r13
    18d0:	cf 90       	pop	r12
    18d2:	08 95       	ret

000018d4 <vTaskSetApplicationTaskTag>:
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	21 f4       	brne	.+8      	; 0x18e0 <vTaskSetApplicationTaskTag+0xc>
    18d8:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    18dc:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	0f 92       	push	r0
    18e6:	fc 01       	movw	r30, r24
    18e8:	70 ab       	std	Z+48, r23	; 0x30
    18ea:	67 a7       	std	Z+47, r22	; 0x2f
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	08 95       	ret

000018f2 <vTaskSwitchContext>:
    18f2:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <uxSchedulerSuspended>
    18f6:	88 23       	and	r24, r24
    18f8:	21 f0       	breq	.+8      	; 0x1902 <vTaskSwitchContext+0x10>
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <xYieldPending>
    1900:	08 95       	ret
    1902:	10 92 25 0c 	sts	0x0C25, r1	; 0x800c25 <xYieldPending>
    1906:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    190a:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    190e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1910:	0e 94 c1 00 	call	0x182	; 0x182 <task_switch_out>
    1914:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1918:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    191c:	20 81       	ld	r18, Z
    191e:	31 81       	ldd	r19, Z+1	; 0x01
    1920:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1924:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1928:	83 8d       	ldd	r24, Z+27	; 0x1b
    192a:	94 8d       	ldd	r25, Z+28	; 0x1c
    192c:	82 17       	cp	r24, r18
    192e:	93 07       	cpc	r25, r19
    1930:	58 f0       	brcs	.+22     	; 0x1948 <vTaskSwitchContext+0x56>
    1932:	60 91 db 0c 	lds	r22, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1936:	70 91 dc 0c 	lds	r23, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    193a:	63 5e       	subi	r22, 0xE3	; 227
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1942:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1946:	45 d6       	rcall	.+3210   	; 0x25d2 <vApplicationStackOverflowHook>
    1948:	80 91 2b 0c 	lds	r24, 0x0C2B	; 0x800c2b <uxTopReadyPriority>
    194c:	01 c0       	rjmp	.+2      	; 0x1950 <vTaskSwitchContext+0x5e>
    194e:	81 50       	subi	r24, 0x01	; 1
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	9b e0       	ldi	r25, 0x0B	; 11
    1956:	92 9f       	mul	r25, r18
    1958:	f0 01       	movw	r30, r0
    195a:	93 9f       	mul	r25, r19
    195c:	f0 0d       	add	r31, r0
    195e:	11 24       	eor	r1, r1
    1960:	e3 59       	subi	r30, 0x93	; 147
    1962:	f3 4f       	sbci	r31, 0xF3	; 243
    1964:	90 81       	ld	r25, Z
    1966:	99 23       	and	r25, r25
    1968:	91 f3       	breq	.-28     	; 0x194e <vTaskSwitchContext+0x5c>
    196a:	9b e0       	ldi	r25, 0x0B	; 11
    196c:	92 9f       	mul	r25, r18
    196e:	a0 01       	movw	r20, r0
    1970:	93 9f       	mul	r25, r19
    1972:	50 0d       	add	r21, r0
    1974:	11 24       	eor	r1, r1
    1976:	df 01       	movw	r26, r30
    1978:	01 80       	ldd	r0, Z+1	; 0x01
    197a:	f2 81       	ldd	r31, Z+2	; 0x02
    197c:	e0 2d       	mov	r30, r0
    197e:	04 80       	ldd	r0, Z+4	; 0x04
    1980:	f5 81       	ldd	r31, Z+5	; 0x05
    1982:	e0 2d       	mov	r30, r0
    1984:	12 96       	adiw	r26, 0x02	; 2
    1986:	fc 93       	st	X, r31
    1988:	ee 93       	st	-X, r30
    198a:	11 97       	sbiw	r26, 0x01	; 1
    198c:	40 59       	subi	r20, 0x90	; 144
    198e:	53 4f       	sbci	r21, 0xF3	; 243
    1990:	e4 17       	cp	r30, r20
    1992:	f5 07       	cpc	r31, r21
    1994:	29 f4       	brne	.+10     	; 0x19a0 <vTaskSwitchContext+0xae>
    1996:	44 81       	ldd	r20, Z+4	; 0x04
    1998:	55 81       	ldd	r21, Z+5	; 0x05
    199a:	fd 01       	movw	r30, r26
    199c:	52 83       	std	Z+2, r21	; 0x02
    199e:	41 83       	std	Z+1, r20	; 0x01
    19a0:	9b e0       	ldi	r25, 0x0B	; 11
    19a2:	92 9f       	mul	r25, r18
    19a4:	f0 01       	movw	r30, r0
    19a6:	93 9f       	mul	r25, r19
    19a8:	f0 0d       	add	r31, r0
    19aa:	11 24       	eor	r1, r1
    19ac:	e3 59       	subi	r30, 0x93	; 147
    19ae:	f3 4f       	sbci	r31, 0xF3	; 243
    19b0:	01 80       	ldd	r0, Z+1	; 0x01
    19b2:	f2 81       	ldd	r31, Z+2	; 0x02
    19b4:	e0 2d       	mov	r30, r0
    19b6:	20 85       	ldd	r18, Z+8	; 0x08
    19b8:	31 85       	ldd	r19, Z+9	; 0x09
    19ba:	30 93 dc 0c 	sts	0x0CDC, r19	; 0x800cdc <pxCurrentTCB+0x1>
    19be:	20 93 db 0c 	sts	0x0CDB, r18	; 0x800cdb <pxCurrentTCB>
    19c2:	80 93 2b 0c 	sts	0x0C2B, r24	; 0x800c2b <uxTopReadyPriority>
    19c6:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    19ca:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    19ce:	87 a5       	ldd	r24, Z+47	; 0x2f
    19d0:	0c 94 b7 00 	jmp	0x16e	; 0x16e <task_switch_in>
    19d4:	08 95       	ret

000019d6 <vTaskPlaceOnEventList>:
    19d6:	cf 92       	push	r12
    19d8:	df 92       	push	r13
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	6a 01       	movw	r12, r20
    19e0:	7b 01       	movw	r14, r22
    19e2:	60 91 db 0c 	lds	r22, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    19e6:	70 91 dc 0c 	lds	r23, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    19ea:	62 5f       	subi	r22, 0xF2	; 242
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	0e 94 34 02 	call	0x468	; 0x468 <vListInsert>
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	c7 01       	movw	r24, r14
    19f6:	b6 01       	movw	r22, r12
    19f8:	aa db       	rcall	.-2220   	; 0x114e <prvAddCurrentTaskToDelayedList>
    19fa:	ff 90       	pop	r15
    19fc:	ef 90       	pop	r14
    19fe:	df 90       	pop	r13
    1a00:	cf 90       	pop	r12
    1a02:	08 95       	ret

00001a04 <vTaskPlaceOnEventListRestricted>:
    1a04:	cf 93       	push	r28
    1a06:	df 93       	push	r29
    1a08:	fc 01       	movw	r30, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	ba 01       	movw	r22, r20
    1a0e:	a1 81       	ldd	r26, Z+1	; 0x01
    1a10:	b2 81       	ldd	r27, Z+2	; 0x02
    1a12:	c0 91 db 0c 	lds	r28, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1a16:	d0 91 dc 0c 	lds	r29, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1a1a:	bb 8b       	std	Y+19, r27	; 0x13
    1a1c:	aa 8b       	std	Y+18, r26	; 0x12
    1a1e:	c0 91 db 0c 	lds	r28, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1a22:	d0 91 dc 0c 	lds	r29, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1a26:	16 96       	adiw	r26, 0x06	; 6
    1a28:	4d 91       	ld	r20, X+
    1a2a:	5c 91       	ld	r21, X
    1a2c:	17 97       	sbiw	r26, 0x07	; 7
    1a2e:	5d 8b       	std	Y+21, r21	; 0x15
    1a30:	4c 8b       	std	Y+20, r20	; 0x14
    1a32:	16 96       	adiw	r26, 0x06	; 6
    1a34:	cd 91       	ld	r28, X+
    1a36:	dc 91       	ld	r29, X
    1a38:	17 97       	sbiw	r26, 0x07	; 7
    1a3a:	40 91 db 0c 	lds	r20, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1a3e:	50 91 dc 0c 	lds	r21, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1a42:	42 5f       	subi	r20, 0xF2	; 242
    1a44:	5f 4f       	sbci	r21, 0xFF	; 255
    1a46:	5d 83       	std	Y+5, r21	; 0x05
    1a48:	4c 83       	std	Y+4, r20	; 0x04
    1a4a:	40 91 db 0c 	lds	r20, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1a4e:	50 91 dc 0c 	lds	r21, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1a52:	42 5f       	subi	r20, 0xF2	; 242
    1a54:	5f 4f       	sbci	r21, 0xFF	; 255
    1a56:	17 96       	adiw	r26, 0x07	; 7
    1a58:	5c 93       	st	X, r21
    1a5a:	4e 93       	st	-X, r20
    1a5c:	16 97       	sbiw	r26, 0x06	; 6
    1a5e:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1a62:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1a66:	59 96       	adiw	r26, 0x19	; 25
    1a68:	fc 93       	st	X, r31
    1a6a:	ee 93       	st	-X, r30
    1a6c:	58 97       	sbiw	r26, 0x18	; 24
    1a6e:	30 81       	ld	r19, Z
    1a70:	3f 5f       	subi	r19, 0xFF	; 255
    1a72:	30 83       	st	Z, r19
    1a74:	22 23       	and	r18, r18
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <vTaskPlaceOnEventListRestricted+0x7a>
    1a78:	6f ef       	ldi	r22, 0xFF	; 255
    1a7a:	7f ef       	ldi	r23, 0xFF	; 255
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	42 2f       	mov	r20, r18
    1a80:	66 db       	rcall	.-2356   	; 0x114e <prvAddCurrentTaskToDelayedList>
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <xTaskRemoveFromEventList>:
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	17 96       	adiw	r26, 0x07	; 7
    1a90:	ed 91       	ld	r30, X+
    1a92:	fc 91       	ld	r31, X
    1a94:	18 97       	sbiw	r26, 0x08	; 8
    1a96:	00 84       	ldd	r0, Z+8	; 0x08
    1a98:	f1 85       	ldd	r31, Z+9	; 0x09
    1a9a:	e0 2d       	mov	r30, r0
    1a9c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a9e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1aa0:	c2 89       	ldd	r28, Z+18	; 0x12
    1aa2:	d3 89       	ldd	r29, Z+19	; 0x13
    1aa4:	84 89       	ldd	r24, Z+20	; 0x14
    1aa6:	95 89       	ldd	r25, Z+21	; 0x15
    1aa8:	9f 83       	std	Y+7, r25	; 0x07
    1aaa:	8e 83       	std	Y+6, r24	; 0x06
    1aac:	c4 89       	ldd	r28, Z+20	; 0x14
    1aae:	d5 89       	ldd	r29, Z+21	; 0x15
    1ab0:	82 89       	ldd	r24, Z+18	; 0x12
    1ab2:	93 89       	ldd	r25, Z+19	; 0x13
    1ab4:	9d 83       	std	Y+5, r25	; 0x05
    1ab6:	8c 83       	std	Y+4, r24	; 0x04
    1ab8:	11 96       	adiw	r26, 0x01	; 1
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	12 97       	sbiw	r26, 0x02	; 2
    1ac0:	9f 01       	movw	r18, r30
    1ac2:	22 5f       	subi	r18, 0xF2	; 242
    1ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac6:	82 17       	cp	r24, r18
    1ac8:	93 07       	cpc	r25, r19
    1aca:	31 f4       	brne	.+12     	; 0x1ad8 <xTaskRemoveFromEventList+0x50>
    1acc:	84 89       	ldd	r24, Z+20	; 0x14
    1ace:	95 89       	ldd	r25, Z+21	; 0x15
    1ad0:	12 96       	adiw	r26, 0x02	; 2
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
    1ad8:	11 8e       	std	Z+25, r1	; 0x19
    1ada:	10 8e       	std	Z+24, r1	; 0x18
    1adc:	8c 91       	ld	r24, X
    1ade:	81 50       	subi	r24, 0x01	; 1
    1ae0:	8c 93       	st	X, r24
    1ae2:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <uxSchedulerSuspended>
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	52 c0       	rjmp	.+164    	; 0x1b8e <xTaskRemoveFromEventList+0x106>
    1aea:	a4 85       	ldd	r26, Z+12	; 0x0c
    1aec:	b5 85       	ldd	r27, Z+13	; 0x0d
    1aee:	c6 81       	ldd	r28, Z+6	; 0x06
    1af0:	d7 81       	ldd	r29, Z+7	; 0x07
    1af2:	80 85       	ldd	r24, Z+8	; 0x08
    1af4:	91 85       	ldd	r25, Z+9	; 0x09
    1af6:	9f 83       	std	Y+7, r25	; 0x07
    1af8:	8e 83       	std	Y+6, r24	; 0x06
    1afa:	c0 85       	ldd	r28, Z+8	; 0x08
    1afc:	d1 85       	ldd	r29, Z+9	; 0x09
    1afe:	86 81       	ldd	r24, Z+6	; 0x06
    1b00:	97 81       	ldd	r25, Z+7	; 0x07
    1b02:	9d 83       	std	Y+5, r25	; 0x05
    1b04:	8c 83       	std	Y+4, r24	; 0x04
    1b06:	11 96       	adiw	r26, 0x01	; 1
    1b08:	8d 91       	ld	r24, X+
    1b0a:	9c 91       	ld	r25, X
    1b0c:	12 97       	sbiw	r26, 0x02	; 2
    1b0e:	9f 01       	movw	r18, r30
    1b10:	2e 5f       	subi	r18, 0xFE	; 254
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	82 17       	cp	r24, r18
    1b16:	93 07       	cpc	r25, r19
    1b18:	31 f4       	brne	.+12     	; 0x1b26 <xTaskRemoveFromEventList+0x9e>
    1b1a:	80 85       	ldd	r24, Z+8	; 0x08
    1b1c:	91 85       	ldd	r25, Z+9	; 0x09
    1b1e:	12 96       	adiw	r26, 0x02	; 2
    1b20:	9c 93       	st	X, r25
    1b22:	8e 93       	st	-X, r24
    1b24:	11 97       	sbiw	r26, 0x01	; 1
    1b26:	15 86       	std	Z+13, r1	; 0x0d
    1b28:	14 86       	std	Z+12, r1	; 0x0c
    1b2a:	8c 91       	ld	r24, X
    1b2c:	81 50       	subi	r24, 0x01	; 1
    1b2e:	8c 93       	st	X, r24
    1b30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b32:	80 91 2b 0c 	lds	r24, 0x0C2B	; 0x800c2b <uxTopReadyPriority>
    1b36:	8a 17       	cp	r24, r26
    1b38:	10 f4       	brcc	.+4      	; 0x1b3e <xTaskRemoveFromEventList+0xb6>
    1b3a:	a0 93 2b 0c 	sts	0x0C2B, r26	; 0x800c2b <uxTopReadyPriority>
    1b3e:	8b e0       	ldi	r24, 0x0B	; 11
    1b40:	8a 9f       	mul	r24, r26
    1b42:	d0 01       	movw	r26, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	a3 59       	subi	r26, 0x93	; 147
    1b48:	b3 4f       	sbci	r27, 0xF3	; 243
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	0d 90       	ld	r0, X+
    1b4e:	bc 91       	ld	r27, X
    1b50:	a0 2d       	mov	r26, r0
    1b52:	b7 83       	std	Z+7, r27	; 0x07
    1b54:	a6 83       	std	Z+6, r26	; 0x06
    1b56:	16 96       	adiw	r26, 0x06	; 6
    1b58:	4d 91       	ld	r20, X+
    1b5a:	5c 91       	ld	r21, X
    1b5c:	17 97       	sbiw	r26, 0x07	; 7
    1b5e:	51 87       	std	Z+9, r21	; 0x09
    1b60:	40 87       	std	Z+8, r20	; 0x08
    1b62:	16 96       	adiw	r26, 0x06	; 6
    1b64:	cd 91       	ld	r28, X+
    1b66:	dc 91       	ld	r29, X
    1b68:	17 97       	sbiw	r26, 0x07	; 7
    1b6a:	3d 83       	std	Y+5, r19	; 0x05
    1b6c:	2c 83       	std	Y+4, r18	; 0x04
    1b6e:	17 96       	adiw	r26, 0x07	; 7
    1b70:	3c 93       	st	X, r19
    1b72:	2e 93       	st	-X, r18
    1b74:	16 97       	sbiw	r26, 0x06	; 6
    1b76:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b78:	8a 9f       	mul	r24, r26
    1b7a:	d0 01       	movw	r26, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	a3 59       	subi	r26, 0x93	; 147
    1b80:	b3 4f       	sbci	r27, 0xF3	; 243
    1b82:	b5 87       	std	Z+13, r27	; 0x0d
    1b84:	a4 87       	std	Z+12, r26	; 0x0c
    1b86:	8c 91       	ld	r24, X
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	8c 93       	st	X, r24
    1b8c:	1c c0       	rjmp	.+56     	; 0x1bc6 <xTaskRemoveFromEventList+0x13e>
    1b8e:	48 e4       	ldi	r20, 0x48	; 72
    1b90:	5c e0       	ldi	r21, 0x0C	; 12
    1b92:	da 01       	movw	r26, r20
    1b94:	11 96       	adiw	r26, 0x01	; 1
    1b96:	cd 91       	ld	r28, X+
    1b98:	dc 91       	ld	r29, X
    1b9a:	12 97       	sbiw	r26, 0x02	; 2
    1b9c:	d3 8b       	std	Z+19, r29	; 0x13
    1b9e:	c2 8b       	std	Z+18, r28	; 0x12
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	95 8b       	std	Z+21, r25	; 0x15
    1ba6:	84 8b       	std	Z+20, r24	; 0x14
    1ba8:	8e 81       	ldd	r24, Y+6	; 0x06
    1baa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bac:	dc 01       	movw	r26, r24
    1bae:	15 96       	adiw	r26, 0x05	; 5
    1bb0:	3c 93       	st	X, r19
    1bb2:	2e 93       	st	-X, r18
    1bb4:	14 97       	sbiw	r26, 0x04	; 4
    1bb6:	3f 83       	std	Y+7, r19	; 0x07
    1bb8:	2e 83       	std	Y+6, r18	; 0x06
    1bba:	51 8f       	std	Z+25, r21	; 0x19
    1bbc:	40 8f       	std	Z+24, r20	; 0x18
    1bbe:	da 01       	movw	r26, r20
    1bc0:	8c 91       	ld	r24, X
    1bc2:	8f 5f       	subi	r24, 0xFF	; 255
    1bc4:	8c 93       	st	X, r24
    1bc6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bc8:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1bcc:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1bd0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1bd2:	89 17       	cp	r24, r25
    1bd4:	20 f4       	brcc	.+8      	; 0x1bde <xTaskRemoveFromEventList+0x156>
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <xYieldPending>
    1bdc:	01 c0       	rjmp	.+2      	; 0x1be0 <xTaskRemoveFromEventList+0x158>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <vTaskInternalSetTimeOutState>:
    1be6:	20 91 24 0c 	lds	r18, 0x0C24	; 0x800c24 <xNumOfOverflows>
    1bea:	fc 01       	movw	r30, r24
    1bec:	20 83       	st	Z, r18
    1bee:	40 91 2c 0c 	lds	r20, 0x0C2C	; 0x800c2c <xTickCount>
    1bf2:	50 91 2d 0c 	lds	r21, 0x0C2D	; 0x800c2d <xTickCount+0x1>
    1bf6:	60 91 2e 0c 	lds	r22, 0x0C2E	; 0x800c2e <xTickCount+0x2>
    1bfa:	70 91 2f 0c 	lds	r23, 0x0C2F	; 0x800c2f <xTickCount+0x3>
    1bfe:	41 83       	std	Z+1, r20	; 0x01
    1c00:	52 83       	std	Z+2, r21	; 0x02
    1c02:	63 83       	std	Z+3, r22	; 0x03
    1c04:	74 83       	std	Z+4, r23	; 0x04
    1c06:	08 95       	ret

00001c08 <xTaskCheckForTimeOut>:
    1c08:	8f 92       	push	r8
    1c0a:	9f 92       	push	r9
    1c0c:	af 92       	push	r10
    1c0e:	bf 92       	push	r11
    1c10:	cf 92       	push	r12
    1c12:	df 92       	push	r13
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	fb 01       	movw	r30, r22
    1c22:	0f b6       	in	r0, 0x3f	; 63
    1c24:	f8 94       	cli
    1c26:	0f 92       	push	r0
    1c28:	c0 90 2c 0c 	lds	r12, 0x0C2C	; 0x800c2c <xTickCount>
    1c2c:	d0 90 2d 0c 	lds	r13, 0x0C2D	; 0x800c2d <xTickCount+0x1>
    1c30:	e0 90 2e 0c 	lds	r14, 0x0C2E	; 0x800c2e <xTickCount+0x2>
    1c34:	f0 90 2f 0c 	lds	r15, 0x0C2F	; 0x800c2f <xTickCount+0x3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	11 96       	adiw	r26, 0x01	; 1
    1c3c:	0d 91       	ld	r16, X+
    1c3e:	1d 91       	ld	r17, X+
    1c40:	2d 91       	ld	r18, X+
    1c42:	3c 91       	ld	r19, X
    1c44:	14 97       	sbiw	r26, 0x04	; 4
    1c46:	46 01       	movw	r8, r12
    1c48:	57 01       	movw	r10, r14
    1c4a:	80 1a       	sub	r8, r16
    1c4c:	91 0a       	sbc	r9, r17
    1c4e:	a2 0a       	sbc	r10, r18
    1c50:	b3 0a       	sbc	r11, r19
    1c52:	40 81       	ld	r20, Z
    1c54:	51 81       	ldd	r21, Z+1	; 0x01
    1c56:	62 81       	ldd	r22, Z+2	; 0x02
    1c58:	73 81       	ldd	r23, Z+3	; 0x03
    1c5a:	4f 3f       	cpi	r20, 0xFF	; 255
    1c5c:	bf ef       	ldi	r27, 0xFF	; 255
    1c5e:	5b 07       	cpc	r21, r27
    1c60:	6b 07       	cpc	r22, r27
    1c62:	7b 07       	cpc	r23, r27
    1c64:	39 f1       	breq	.+78     	; 0x1cb4 <xTaskCheckForTimeOut+0xac>
    1c66:	ec 01       	movw	r28, r24
    1c68:	b8 81       	ld	r27, Y
    1c6a:	a0 91 24 0c 	lds	r26, 0x0C24	; 0x800c24 <xNumOfOverflows>
    1c6e:	ba 17       	cp	r27, r26
    1c70:	59 f0       	breq	.+22     	; 0x1c88 <xTaskCheckForTimeOut+0x80>
    1c72:	c0 16       	cp	r12, r16
    1c74:	d1 06       	cpc	r13, r17
    1c76:	e2 06       	cpc	r14, r18
    1c78:	f3 06       	cpc	r15, r19
    1c7a:	30 f0       	brcs	.+12     	; 0x1c88 <xTaskCheckForTimeOut+0x80>
    1c7c:	10 82       	st	Z, r1
    1c7e:	11 82       	std	Z+1, r1	; 0x01
    1c80:	12 82       	std	Z+2, r1	; 0x02
    1c82:	13 82       	std	Z+3, r1	; 0x03
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	17 c0       	rjmp	.+46     	; 0x1cb6 <xTaskCheckForTimeOut+0xae>
    1c88:	84 16       	cp	r8, r20
    1c8a:	95 06       	cpc	r9, r21
    1c8c:	a6 06       	cpc	r10, r22
    1c8e:	b7 06       	cpc	r11, r23
    1c90:	58 f4       	brcc	.+22     	; 0x1ca8 <xTaskCheckForTimeOut+0xa0>
    1c92:	48 19       	sub	r20, r8
    1c94:	59 09       	sbc	r21, r9
    1c96:	6a 09       	sbc	r22, r10
    1c98:	7b 09       	sbc	r23, r11
    1c9a:	40 83       	st	Z, r20
    1c9c:	51 83       	std	Z+1, r21	; 0x01
    1c9e:	62 83       	std	Z+2, r22	; 0x02
    1ca0:	73 83       	std	Z+3, r23	; 0x03
    1ca2:	a1 df       	rcall	.-190    	; 0x1be6 <vTaskInternalSetTimeOutState>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	07 c0       	rjmp	.+14     	; 0x1cb6 <xTaskCheckForTimeOut+0xae>
    1ca8:	10 82       	st	Z, r1
    1caa:	11 82       	std	Z+1, r1	; 0x01
    1cac:	12 82       	std	Z+2, r1	; 0x02
    1cae:	13 82       	std	Z+3, r1	; 0x03
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	01 c0       	rjmp	.+2      	; 0x1cb6 <xTaskCheckForTimeOut+0xae>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	df 91       	pop	r29
    1cbc:	cf 91       	pop	r28
    1cbe:	1f 91       	pop	r17
    1cc0:	0f 91       	pop	r16
    1cc2:	ff 90       	pop	r15
    1cc4:	ef 90       	pop	r14
    1cc6:	df 90       	pop	r13
    1cc8:	cf 90       	pop	r12
    1cca:	bf 90       	pop	r11
    1ccc:	af 90       	pop	r10
    1cce:	9f 90       	pop	r9
    1cd0:	8f 90       	pop	r8
    1cd2:	08 95       	ret

00001cd4 <vTaskMissedYield>:
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	80 93 25 0c 	sts	0x0C25, r24	; 0x800c25 <xYieldPending>
    1cda:	08 95       	ret

00001cdc <xTaskGetSchedulerState>:
    1cdc:	80 91 2a 0c 	lds	r24, 0x0C2A	; 0x800c2a <xSchedulerRunning>
    1ce0:	88 23       	and	r24, r24
    1ce2:	31 f0       	breq	.+12     	; 0x1cf0 <xTaskGetSchedulerState+0x14>
    1ce4:	80 91 1c 0c 	lds	r24, 0x0C1C	; 0x800c1c <uxSchedulerSuspended>
    1ce8:	81 11       	cpse	r24, r1
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <xTaskGetSchedulerState+0x18>
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	08 95       	ret
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	08 95       	ret
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	08 95       	ret

00001cf8 <xTaskPriorityInherit>:
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	fc 01       	movw	r30, r24
    1d02:	89 2b       	or	r24, r25
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <xTaskPriorityInherit+0x10>
    1d06:	77 c0       	rjmp	.+238    	; 0x1df6 <xTaskPriorityInherit+0xfe>
    1d08:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d0a:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1d0e:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1d12:	5a 96       	adiw	r26, 0x1a	; 26
    1d14:	9c 91       	ld	r25, X
    1d16:	89 17       	cp	r24, r25
    1d18:	08 f0       	brcs	.+2      	; 0x1d1c <xTaskPriorityInherit+0x24>
    1d1a:	63 c0       	rjmp	.+198    	; 0x1de2 <xTaskPriorityInherit+0xea>
    1d1c:	46 85       	ldd	r20, Z+14	; 0x0e
    1d1e:	57 85       	ldd	r21, Z+15	; 0x0f
    1d20:	60 89       	ldd	r22, Z+16	; 0x10
    1d22:	71 89       	ldd	r23, Z+17	; 0x11
    1d24:	77 23       	and	r23, r23
    1d26:	94 f0       	brlt	.+36     	; 0x1d4c <xTaskPriorityInherit+0x54>
    1d28:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1d2c:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1d30:	5a 96       	adiw	r26, 0x1a	; 26
    1d32:	9c 91       	ld	r25, X
    1d34:	4a e0       	ldi	r20, 0x0A	; 10
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	49 1b       	sub	r20, r25
    1d3e:	51 09       	sbc	r21, r1
    1d40:	61 09       	sbc	r22, r1
    1d42:	71 09       	sbc	r23, r1
    1d44:	46 87       	std	Z+14, r20	; 0x0e
    1d46:	57 87       	std	Z+15, r21	; 0x0f
    1d48:	60 8b       	std	Z+16, r22	; 0x10
    1d4a:	71 8b       	std	Z+17, r23	; 0x11
    1d4c:	24 85       	ldd	r18, Z+12	; 0x0c
    1d4e:	35 85       	ldd	r19, Z+13	; 0x0d
    1d50:	4b e0       	ldi	r20, 0x0B	; 11
    1d52:	84 9f       	mul	r24, r20
    1d54:	c0 01       	movw	r24, r0
    1d56:	11 24       	eor	r1, r1
    1d58:	83 59       	subi	r24, 0x93	; 147
    1d5a:	93 4f       	sbci	r25, 0xF3	; 243
    1d5c:	28 17       	cp	r18, r24
    1d5e:	39 07       	cpc	r19, r25
    1d60:	b9 f5       	brne	.+110    	; 0x1dd0 <xTaskPriorityInherit+0xd8>
    1d62:	ef 01       	movw	r28, r30
    1d64:	8f 01       	movw	r16, r30
    1d66:	0e 5f       	subi	r16, 0xFE	; 254
    1d68:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <uxListRemove>
    1d70:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1d74:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1d78:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d7a:	ea 8f       	std	Y+26, r30	; 0x1a
    1d7c:	80 91 2b 0c 	lds	r24, 0x0C2B	; 0x800c2b <uxTopReadyPriority>
    1d80:	8e 17       	cp	r24, r30
    1d82:	10 f4       	brcc	.+4      	; 0x1d88 <xTaskPriorityInherit+0x90>
    1d84:	e0 93 2b 0c 	sts	0x0C2B, r30	; 0x800c2b <uxTopReadyPriority>
    1d88:	8b e0       	ldi	r24, 0x0B	; 11
    1d8a:	8e 9f       	mul	r24, r30
    1d8c:	f0 01       	movw	r30, r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	e3 59       	subi	r30, 0x93	; 147
    1d92:	f3 4f       	sbci	r31, 0xF3	; 243
    1d94:	01 80       	ldd	r0, Z+1	; 0x01
    1d96:	f2 81       	ldd	r31, Z+2	; 0x02
    1d98:	e0 2d       	mov	r30, r0
    1d9a:	ff 83       	std	Y+7, r31	; 0x07
    1d9c:	ee 83       	std	Y+6, r30	; 0x06
    1d9e:	26 81       	ldd	r18, Z+6	; 0x06
    1da0:	37 81       	ldd	r19, Z+7	; 0x07
    1da2:	39 87       	std	Y+9, r19	; 0x09
    1da4:	28 87       	std	Y+8, r18	; 0x08
    1da6:	a6 81       	ldd	r26, Z+6	; 0x06
    1da8:	b7 81       	ldd	r27, Z+7	; 0x07
    1daa:	15 96       	adiw	r26, 0x05	; 5
    1dac:	1c 93       	st	X, r17
    1dae:	0e 93       	st	-X, r16
    1db0:	14 97       	sbiw	r26, 0x04	; 4
    1db2:	17 83       	std	Z+7, r17	; 0x07
    1db4:	06 83       	std	Z+6, r16	; 0x06
    1db6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1db8:	8e 9f       	mul	r24, r30
    1dba:	f0 01       	movw	r30, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	e3 59       	subi	r30, 0x93	; 147
    1dc0:	f3 4f       	sbci	r31, 0xF3	; 243
    1dc2:	fd 87       	std	Y+13, r31	; 0x0d
    1dc4:	ec 87       	std	Y+12, r30	; 0x0c
    1dc6:	80 81       	ld	r24, Z
    1dc8:	8f 5f       	subi	r24, 0xFF	; 255
    1dca:	80 83       	st	Z, r24
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	16 c0       	rjmp	.+44     	; 0x1dfc <xTaskPriorityInherit+0x104>
    1dd0:	a0 91 db 0c 	lds	r26, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1dd4:	b0 91 dc 0c 	lds	r27, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1dd8:	5a 96       	adiw	r26, 0x1a	; 26
    1dda:	8c 91       	ld	r24, X
    1ddc:	82 8f       	std	Z+26, r24	; 0x1a
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	0d c0       	rjmp	.+26     	; 0x1dfc <xTaskPriorityInherit+0x104>
    1de2:	95 a5       	ldd	r25, Z+45	; 0x2d
    1de4:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1de8:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1dec:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dee:	98 17       	cp	r25, r24
    1df0:	20 f0       	brcs	.+8      	; 0x1dfa <xTaskPriorityInherit+0x102>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	03 c0       	rjmp	.+6      	; 0x1dfc <xTaskPriorityInherit+0x104>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	01 c0       	rjmp	.+2      	; 0x1dfc <xTaskPriorityInherit+0x104>
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	08 95       	ret

00001e06 <xTaskPriorityDisinherit>:
    1e06:	0f 93       	push	r16
    1e08:	1f 93       	push	r17
    1e0a:	cf 93       	push	r28
    1e0c:	df 93       	push	r29
    1e0e:	fc 01       	movw	r30, r24
    1e10:	89 2b       	or	r24, r25
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <xTaskPriorityDisinherit+0x10>
    1e14:	49 c0       	rjmp	.+146    	; 0x1ea8 <xTaskPriorityDisinherit+0xa2>
    1e16:	86 a5       	ldd	r24, Z+46	; 0x2e
    1e18:	81 50       	subi	r24, 0x01	; 1
    1e1a:	86 a7       	std	Z+46, r24	; 0x2e
    1e1c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e1e:	95 a5       	ldd	r25, Z+45	; 0x2d
    1e20:	29 17       	cp	r18, r25
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <xTaskPriorityDisinherit+0x20>
    1e24:	43 c0       	rjmp	.+134    	; 0x1eac <xTaskPriorityDisinherit+0xa6>
    1e26:	81 11       	cpse	r24, r1
    1e28:	43 c0       	rjmp	.+134    	; 0x1eb0 <xTaskPriorityDisinherit+0xaa>
    1e2a:	ef 01       	movw	r28, r30
    1e2c:	8f 01       	movw	r16, r30
    1e2e:	0e 5f       	subi	r16, 0xFE	; 254
    1e30:	1f 4f       	sbci	r17, 0xFF	; 255
    1e32:	c8 01       	movw	r24, r16
    1e34:	0e 94 71 02 	call	0x4e2	; 0x4e2 <uxListRemove>
    1e38:	ed a5       	ldd	r30, Y+45	; 0x2d
    1e3a:	ea 8f       	std	Y+26, r30	; 0x1a
    1e3c:	8a e0       	ldi	r24, 0x0A	; 10
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a0 e0       	ldi	r26, 0x00	; 0
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	8e 1b       	sub	r24, r30
    1e46:	91 09       	sbc	r25, r1
    1e48:	a1 09       	sbc	r26, r1
    1e4a:	b1 09       	sbc	r27, r1
    1e4c:	8e 87       	std	Y+14, r24	; 0x0e
    1e4e:	9f 87       	std	Y+15, r25	; 0x0f
    1e50:	a8 8b       	std	Y+16, r26	; 0x10
    1e52:	b9 8b       	std	Y+17, r27	; 0x11
    1e54:	80 91 2b 0c 	lds	r24, 0x0C2B	; 0x800c2b <uxTopReadyPriority>
    1e58:	8e 17       	cp	r24, r30
    1e5a:	10 f4       	brcc	.+4      	; 0x1e60 <xTaskPriorityDisinherit+0x5a>
    1e5c:	e0 93 2b 0c 	sts	0x0C2B, r30	; 0x800c2b <uxTopReadyPriority>
    1e60:	8b e0       	ldi	r24, 0x0B	; 11
    1e62:	8e 9f       	mul	r24, r30
    1e64:	f0 01       	movw	r30, r0
    1e66:	11 24       	eor	r1, r1
    1e68:	e3 59       	subi	r30, 0x93	; 147
    1e6a:	f3 4f       	sbci	r31, 0xF3	; 243
    1e6c:	01 80       	ldd	r0, Z+1	; 0x01
    1e6e:	f2 81       	ldd	r31, Z+2	; 0x02
    1e70:	e0 2d       	mov	r30, r0
    1e72:	ff 83       	std	Y+7, r31	; 0x07
    1e74:	ee 83       	std	Y+6, r30	; 0x06
    1e76:	26 81       	ldd	r18, Z+6	; 0x06
    1e78:	37 81       	ldd	r19, Z+7	; 0x07
    1e7a:	39 87       	std	Y+9, r19	; 0x09
    1e7c:	28 87       	std	Y+8, r18	; 0x08
    1e7e:	a6 81       	ldd	r26, Z+6	; 0x06
    1e80:	b7 81       	ldd	r27, Z+7	; 0x07
    1e82:	15 96       	adiw	r26, 0x05	; 5
    1e84:	1c 93       	st	X, r17
    1e86:	0e 93       	st	-X, r16
    1e88:	14 97       	sbiw	r26, 0x04	; 4
    1e8a:	17 83       	std	Z+7, r17	; 0x07
    1e8c:	06 83       	std	Z+6, r16	; 0x06
    1e8e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1e90:	8e 9f       	mul	r24, r30
    1e92:	f0 01       	movw	r30, r0
    1e94:	11 24       	eor	r1, r1
    1e96:	e3 59       	subi	r30, 0x93	; 147
    1e98:	f3 4f       	sbci	r31, 0xF3	; 243
    1e9a:	fd 87       	std	Y+13, r31	; 0x0d
    1e9c:	ec 87       	std	Y+12, r30	; 0x0c
    1e9e:	80 81       	ld	r24, Z
    1ea0:	8f 5f       	subi	r24, 0xFF	; 255
    1ea2:	80 83       	st	Z, r24
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	05 c0       	rjmp	.+10     	; 0x1eb2 <xTaskPriorityDisinherit+0xac>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <xTaskPriorityDisinherit+0xac>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <xTaskPriorityDisinherit+0xac>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	08 95       	ret

00001ebc <vTaskPriorityDisinheritAfterTimeout>:
    1ebc:	0f 93       	push	r16
    1ebe:	1f 93       	push	r17
    1ec0:	cf 93       	push	r28
    1ec2:	df 93       	push	r29
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	89 2b       	or	r24, r25
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <vTaskPriorityDisinheritAfterTimeout+0x10>
    1eca:	5a c0       	rjmp	.+180    	; 0x1f80 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1ecc:	85 a5       	ldd	r24, Z+45	; 0x2d
    1ece:	86 17       	cp	r24, r22
    1ed0:	08 f4       	brcc	.+2      	; 0x1ed4 <vTaskPriorityDisinheritAfterTimeout+0x18>
    1ed2:	86 2f       	mov	r24, r22
    1ed4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ed6:	89 17       	cp	r24, r25
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <vTaskPriorityDisinheritAfterTimeout+0x20>
    1eda:	52 c0       	rjmp	.+164    	; 0x1f80 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1edc:	26 a5       	ldd	r18, Z+46	; 0x2e
    1ede:	21 30       	cpi	r18, 0x01	; 1
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <vTaskPriorityDisinheritAfterTimeout+0x28>
    1ee2:	4e c0       	rjmp	.+156    	; 0x1f80 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1ee4:	82 8f       	std	Z+26, r24	; 0x1a
    1ee6:	46 85       	ldd	r20, Z+14	; 0x0e
    1ee8:	57 85       	ldd	r21, Z+15	; 0x0f
    1eea:	60 89       	ldd	r22, Z+16	; 0x10
    1eec:	71 89       	ldd	r23, Z+17	; 0x11
    1eee:	77 23       	and	r23, r23
    1ef0:	64 f0       	brlt	.+24     	; 0x1f0a <vTaskPriorityDisinheritAfterTimeout+0x4e>
    1ef2:	4a e0       	ldi	r20, 0x0A	; 10
    1ef4:	50 e0       	ldi	r21, 0x00	; 0
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	70 e0       	ldi	r23, 0x00	; 0
    1efa:	48 1b       	sub	r20, r24
    1efc:	51 09       	sbc	r21, r1
    1efe:	61 09       	sbc	r22, r1
    1f00:	71 09       	sbc	r23, r1
    1f02:	46 87       	std	Z+14, r20	; 0x0e
    1f04:	57 87       	std	Z+15, r21	; 0x0f
    1f06:	60 8b       	std	Z+16, r22	; 0x10
    1f08:	71 8b       	std	Z+17, r23	; 0x11
    1f0a:	24 85       	ldd	r18, Z+12	; 0x0c
    1f0c:	35 85       	ldd	r19, Z+13	; 0x0d
    1f0e:	4b e0       	ldi	r20, 0x0B	; 11
    1f10:	94 9f       	mul	r25, r20
    1f12:	c0 01       	movw	r24, r0
    1f14:	11 24       	eor	r1, r1
    1f16:	83 59       	subi	r24, 0x93	; 147
    1f18:	93 4f       	sbci	r25, 0xF3	; 243
    1f1a:	28 17       	cp	r18, r24
    1f1c:	39 07       	cpc	r19, r25
    1f1e:	81 f5       	brne	.+96     	; 0x1f80 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    1f20:	ef 01       	movw	r28, r30
    1f22:	8f 01       	movw	r16, r30
    1f24:	0e 5f       	subi	r16, 0xFE	; 254
    1f26:	1f 4f       	sbci	r17, 0xFF	; 255
    1f28:	c8 01       	movw	r24, r16
    1f2a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <uxListRemove>
    1f2e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f30:	80 91 2b 0c 	lds	r24, 0x0C2B	; 0x800c2b <uxTopReadyPriority>
    1f34:	8e 17       	cp	r24, r30
    1f36:	10 f4       	brcc	.+4      	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x80>
    1f38:	e0 93 2b 0c 	sts	0x0C2B, r30	; 0x800c2b <uxTopReadyPriority>
    1f3c:	8b e0       	ldi	r24, 0x0B	; 11
    1f3e:	8e 9f       	mul	r24, r30
    1f40:	f0 01       	movw	r30, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	e3 59       	subi	r30, 0x93	; 147
    1f46:	f3 4f       	sbci	r31, 0xF3	; 243
    1f48:	01 80       	ldd	r0, Z+1	; 0x01
    1f4a:	f2 81       	ldd	r31, Z+2	; 0x02
    1f4c:	e0 2d       	mov	r30, r0
    1f4e:	ff 83       	std	Y+7, r31	; 0x07
    1f50:	ee 83       	std	Y+6, r30	; 0x06
    1f52:	26 81       	ldd	r18, Z+6	; 0x06
    1f54:	37 81       	ldd	r19, Z+7	; 0x07
    1f56:	39 87       	std	Y+9, r19	; 0x09
    1f58:	28 87       	std	Y+8, r18	; 0x08
    1f5a:	a6 81       	ldd	r26, Z+6	; 0x06
    1f5c:	b7 81       	ldd	r27, Z+7	; 0x07
    1f5e:	15 96       	adiw	r26, 0x05	; 5
    1f60:	1c 93       	st	X, r17
    1f62:	0e 93       	st	-X, r16
    1f64:	14 97       	sbiw	r26, 0x04	; 4
    1f66:	17 83       	std	Z+7, r17	; 0x07
    1f68:	06 83       	std	Z+6, r16	; 0x06
    1f6a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f6c:	8e 9f       	mul	r24, r30
    1f6e:	f0 01       	movw	r30, r0
    1f70:	11 24       	eor	r1, r1
    1f72:	e3 59       	subi	r30, 0x93	; 147
    1f74:	f3 4f       	sbci	r31, 0xF3	; 243
    1f76:	fd 87       	std	Y+13, r31	; 0x0d
    1f78:	ec 87       	std	Y+12, r30	; 0x0c
    1f7a:	80 81       	ld	r24, Z
    1f7c:	8f 5f       	subi	r24, 0xFF	; 255
    1f7e:	80 83       	st	Z, r24
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	1f 91       	pop	r17
    1f86:	0f 91       	pop	r16
    1f88:	08 95       	ret

00001f8a <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1f8a:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1f8e:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1f92:	89 2b       	or	r24, r25
    1f94:	39 f0       	breq	.+14     	; 0x1fa4 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1f96:	e0 91 db 0c 	lds	r30, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1f9a:	f0 91 dc 0c 	lds	r31, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    1f9e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1fa0:	8f 5f       	subi	r24, 0xFF	; 255
    1fa2:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    1fa4:	80 91 db 0c 	lds	r24, 0x0CDB	; 0x800cdb <pxCurrentTCB>
    1fa8:	90 91 dc 0c 	lds	r25, 0x0CDC	; 0x800cdc <pxCurrentTCB+0x1>
    }
    1fac:	08 95       	ret

00001fae <prvGetNextExpireTime>:
    1fae:	dc 01       	movw	r26, r24
    1fb0:	e0 91 e7 0c 	lds	r30, 0x0CE7	; 0x800ce7 <pxCurrentTimerList>
    1fb4:	f0 91 e8 0c 	lds	r31, 0x0CE8	; 0x800ce8 <pxCurrentTimerList+0x1>
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 e0       	ldi	r25, 0x01	; 1
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9c 93       	st	X, r25
    1fc2:	91 11       	cpse	r25, r1
    1fc4:	08 c0       	rjmp	.+16     	; 0x1fd6 <prvGetNextExpireTime+0x28>
    1fc6:	07 80       	ldd	r0, Z+7	; 0x07
    1fc8:	f0 85       	ldd	r31, Z+8	; 0x08
    1fca:	e0 2d       	mov	r30, r0
    1fcc:	60 81       	ld	r22, Z
    1fce:	71 81       	ldd	r23, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	08 95       	ret
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	70 e0       	ldi	r23, 0x00	; 0
    1fda:	cb 01       	movw	r24, r22
    1fdc:	08 95       	ret

00001fde <prvInsertTimerInActiveList>:
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	fc 01       	movw	r30, r24
    1fec:	42 83       	std	Z+2, r20	; 0x02
    1fee:	53 83       	std	Z+3, r21	; 0x03
    1ff0:	64 83       	std	Z+4, r22	; 0x04
    1ff2:	75 83       	std	Z+5, r23	; 0x05
    1ff4:	93 87       	std	Z+11, r25	; 0x0b
    1ff6:	82 87       	std	Z+10, r24	; 0x0a
    1ff8:	04 17       	cp	r16, r20
    1ffa:	15 07       	cpc	r17, r21
    1ffc:	26 07       	cpc	r18, r22
    1ffe:	37 07       	cpc	r19, r23
    2000:	c0 f0       	brcs	.+48     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2002:	0c 19       	sub	r16, r12
    2004:	1d 09       	sbc	r17, r13
    2006:	2e 09       	sbc	r18, r14
    2008:	3f 09       	sbc	r19, r15
    200a:	86 85       	ldd	r24, Z+14	; 0x0e
    200c:	97 85       	ldd	r25, Z+15	; 0x0f
    200e:	a0 89       	ldd	r26, Z+16	; 0x10
    2010:	b1 89       	ldd	r27, Z+17	; 0x11
    2012:	08 17       	cp	r16, r24
    2014:	19 07       	cpc	r17, r25
    2016:	2a 07       	cpc	r18, r26
    2018:	3b 07       	cpc	r19, r27
    201a:	00 f5       	brcc	.+64     	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
    201c:	bf 01       	movw	r22, r30
    201e:	6e 5f       	subi	r22, 0xFE	; 254
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	80 91 e5 0c 	lds	r24, 0x0CE5	; 0x800ce5 <pxOverflowTimerList>
    2026:	90 91 e6 0c 	lds	r25, 0x0CE6	; 0x800ce6 <pxOverflowTimerList+0x1>
    202a:	0e 94 34 02 	call	0x468	; 0x468 <vListInsert>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	18 c0       	rjmp	.+48     	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    2032:	0c 15       	cp	r16, r12
    2034:	1d 05       	cpc	r17, r13
    2036:	2e 05       	cpc	r18, r14
    2038:	3f 05       	cpc	r19, r15
    203a:	28 f4       	brcc	.+10     	; 0x2046 <__DATA_REGION_LENGTH__+0x46>
    203c:	4c 15       	cp	r20, r12
    203e:	5d 05       	cpc	r21, r13
    2040:	6e 05       	cpc	r22, r14
    2042:	7f 05       	cpc	r23, r15
    2044:	68 f4       	brcc	.+26     	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    2046:	bf 01       	movw	r22, r30
    2048:	6e 5f       	subi	r22, 0xFE	; 254
    204a:	7f 4f       	sbci	r23, 0xFF	; 255
    204c:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <pxCurrentTimerList>
    2050:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <pxCurrentTimerList+0x1>
    2054:	0e 94 34 02 	call	0x468	; 0x468 <vListInsert>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	03 c0       	rjmp	.+6      	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	01 c0       	rjmp	.+2      	; 0x2062 <__DATA_REGION_LENGTH__+0x62>
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	08 95       	ret

00002070 <prvCheckForValidListAndQueue>:
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	0f 92       	push	r0
    2076:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <xTimerQueue>
    207a:	90 91 e4 0c 	lds	r25, 0x0CE4	; 0x800ce4 <xTimerQueue+0x1>
    207e:	89 2b       	or	r24, r25
    2080:	e9 f4       	brne	.+58     	; 0x20bc <prvCheckForValidListAndQueue+0x4c>
    2082:	84 ef       	ldi	r24, 0xF4	; 244
    2084:	9c e0       	ldi	r25, 0x0C	; 12
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <vListInitialise>
    208a:	89 ee       	ldi	r24, 0xE9	; 233
    208c:	9c e0       	ldi	r25, 0x0C	; 12
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <vListInitialise>
    2092:	84 ef       	ldi	r24, 0xF4	; 244
    2094:	9c e0       	ldi	r25, 0x0C	; 12
    2096:	90 93 e8 0c 	sts	0x0CE8, r25	; 0x800ce8 <pxCurrentTimerList+0x1>
    209a:	80 93 e7 0c 	sts	0x0CE7, r24	; 0x800ce7 <pxCurrentTimerList>
    209e:	89 ee       	ldi	r24, 0xE9	; 233
    20a0:	9c e0       	ldi	r25, 0x0C	; 12
    20a2:	90 93 e6 0c 	sts	0x0CE6, r25	; 0x800ce6 <pxOverflowTimerList+0x1>
    20a6:	80 93 e5 0c 	sts	0x0CE5, r24	; 0x800ce5 <pxOverflowTimerList>
    20aa:	40 e0       	ldi	r20, 0x00	; 0
    20ac:	67 e0       	ldi	r22, 0x07	; 7
    20ae:	8a e0       	ldi	r24, 0x0A	; 10
    20b0:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <xQueueGenericCreate>
    20b4:	90 93 e4 0c 	sts	0x0CE4, r25	; 0x800ce4 <xTimerQueue+0x1>
    20b8:	80 93 e3 0c 	sts	0x0CE3, r24	; 0x800ce3 <xTimerQueue>
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	08 95       	ret

000020c2 <xTimerCreateTimerTask>:
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	d3 df       	rcall	.-90     	; 0x2070 <prvCheckForValidListAndQueue>
    20ca:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <xTimerQueue>
    20ce:	90 91 e4 0c 	lds	r25, 0x0CE4	; 0x800ce4 <xTimerQueue+0x1>
    20d2:	89 2b       	or	r24, r25
    20d4:	89 f0       	breq	.+34     	; 0x20f8 <xTimerCreateTimerTask+0x36>
    20d6:	0f 2e       	mov	r0, r31
    20d8:	f1 ee       	ldi	r31, 0xE1	; 225
    20da:	ef 2e       	mov	r14, r31
    20dc:	fc e0       	ldi	r31, 0x0C	; 12
    20de:	ff 2e       	mov	r15, r31
    20e0:	f0 2d       	mov	r31, r0
    20e2:	03 e0       	ldi	r16, 0x03	; 3
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 ec       	ldi	r20, 0xC0	; 192
    20ea:	50 e0       	ldi	r21, 0x00	; 0
    20ec:	62 e2       	ldi	r22, 0x22	; 34
    20ee:	72 e0       	ldi	r23, 0x02	; 2
    20f0:	86 e8       	ldi	r24, 0x86	; 134
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	cb d8       	rcall	.-3690   	; 0x128c <xTaskCreate>
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <xTimerCreateTimerTask+0x38>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	0f 91       	pop	r16
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	08 95       	ret

00002102 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2102:	8f 92       	push	r8
    2104:	9f 92       	push	r9
    2106:	af 92       	push	r10
    2108:	bf 92       	push	r11
    210a:	cf 92       	push	r12
    210c:	df 92       	push	r13
    210e:	ef 92       	push	r14
    2110:	ff 92       	push	r15
    2112:	0f 93       	push	r16
    2114:	1f 93       	push	r17
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	27 97       	sbiw	r28, 0x07	; 7
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    212a:	e0 91 e3 0c 	lds	r30, 0x0CE3	; 0x800ce3 <xTimerQueue>
    212e:	f0 91 e4 0c 	lds	r31, 0x0CE4	; 0x800ce4 <xTimerQueue+0x1>
    2132:	30 97       	sbiw	r30, 0x00	; 0
    2134:	81 f1       	breq	.+96     	; 0x2196 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2136:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2138:	2a 83       	std	Y+2, r18	; 0x02
    213a:	3b 83       	std	Y+3, r19	; 0x03
    213c:	4c 83       	std	Y+4, r20	; 0x04
    213e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2140:	9f 83       	std	Y+7, r25	; 0x07
    2142:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2144:	66 30       	cpi	r22, 0x06	; 6
    2146:	f4 f4       	brge	.+60     	; 0x2184 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2148:	c9 dd       	rcall	.-1134   	; 0x1cdc <xTaskGetSchedulerState>
    214a:	82 30       	cpi	r24, 0x02	; 2
    214c:	69 f4       	brne	.+26     	; 0x2168 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    214e:	00 e0       	ldi	r16, 0x00	; 0
    2150:	a7 01       	movw	r20, r14
    2152:	96 01       	movw	r18, r12
    2154:	be 01       	movw	r22, r28
    2156:	6f 5f       	subi	r22, 0xFF	; 255
    2158:	7f 4f       	sbci	r23, 0xFF	; 255
    215a:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <xTimerQueue>
    215e:	90 91 e4 0c 	lds	r25, 0x0CE4	; 0x800ce4 <xTimerQueue+0x1>
    2162:	0e 94 04 05 	call	0xa08	; 0xa08 <xQueueGenericSend>
    2166:	18 c0       	rjmp	.+48     	; 0x2198 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2168:	00 e0       	ldi	r16, 0x00	; 0
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	a9 01       	movw	r20, r18
    2170:	be 01       	movw	r22, r28
    2172:	6f 5f       	subi	r22, 0xFF	; 255
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <xTimerQueue>
    217a:	90 91 e4 0c 	lds	r25, 0x0CE4	; 0x800ce4 <xTimerQueue+0x1>
    217e:	0e 94 04 05 	call	0xa08	; 0xa08 <xQueueGenericSend>
    2182:	0a c0       	rjmp	.+20     	; 0x2198 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	a8 01       	movw	r20, r16
    2188:	be 01       	movw	r22, r28
    218a:	6f 5f       	subi	r22, 0xFF	; 255
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	cf 01       	movw	r24, r30
    2190:	0e 94 b0 05 	call	0xb60	; 0xb60 <xQueueGenericSendFromISR>
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2196:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2198:	27 96       	adiw	r28, 0x07	; 7
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	df 90       	pop	r13
    21b2:	cf 90       	pop	r12
    21b4:	bf 90       	pop	r11
    21b6:	af 90       	pop	r10
    21b8:	9f 90       	pop	r9
    21ba:	8f 90       	pop	r8
    21bc:	08 95       	ret

000021be <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    21be:	8f 92       	push	r8
    21c0:	9f 92       	push	r9
    21c2:	af 92       	push	r10
    21c4:	bf 92       	push	r11
    21c6:	cf 92       	push	r12
    21c8:	df 92       	push	r13
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	cf 93       	push	r28
    21d4:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    21d6:	3b c0       	rjmp	.+118    	; 0x224e <__stack+0x4f>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    21d8:	07 80       	ldd	r0, Z+7	; 0x07
    21da:	f0 85       	ldd	r31, Z+8	; 0x08
    21dc:	e0 2d       	mov	r30, r0
    21de:	80 80       	ld	r8, Z
    21e0:	91 80       	ldd	r9, Z+1	; 0x01
    21e2:	a2 80       	ldd	r10, Z+2	; 0x02
    21e4:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    21e6:	c0 85       	ldd	r28, Z+8	; 0x08
    21e8:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    21ea:	8e 01       	movw	r16, r28
    21ec:	0e 5f       	subi	r16, 0xFE	; 254
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	c8 01       	movw	r24, r16
    21f2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    21f6:	ec 89       	ldd	r30, Y+20	; 0x14
    21f8:	fd 89       	ldd	r31, Y+21	; 0x15
    21fa:	ce 01       	movw	r24, r28
    21fc:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    21fe:	8e 89       	ldd	r24, Y+22	; 0x16
    2200:	82 ff       	sbrs	r24, 2
    2202:	25 c0       	rjmp	.+74     	; 0x224e <__stack+0x4f>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2204:	8e 85       	ldd	r24, Y+14	; 0x0e
    2206:	9f 85       	ldd	r25, Y+15	; 0x0f
    2208:	a8 89       	ldd	r26, Y+16	; 0x10
    220a:	b9 89       	ldd	r27, Y+17	; 0x11
    220c:	88 0d       	add	r24, r8
    220e:	99 1d       	adc	r25, r9
    2210:	aa 1d       	adc	r26, r10
    2212:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2214:	88 16       	cp	r8, r24
    2216:	99 06       	cpc	r9, r25
    2218:	aa 06       	cpc	r10, r26
    221a:	bb 06       	cpc	r11, r27
    221c:	70 f4       	brcc	.+28     	; 0x223a <__stack+0x3b>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    221e:	8a 83       	std	Y+2, r24	; 0x02
    2220:	9b 83       	std	Y+3, r25	; 0x03
    2222:	ac 83       	std	Y+4, r26	; 0x04
    2224:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2226:	db 87       	std	Y+11, r29	; 0x0b
    2228:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    222a:	b8 01       	movw	r22, r16
    222c:	80 91 e7 0c 	lds	r24, 0x0CE7	; 0x800ce7 <pxCurrentTimerList>
    2230:	90 91 e8 0c 	lds	r25, 0x0CE8	; 0x800ce8 <pxCurrentTimerList+0x1>
    2234:	0e 94 34 02 	call	0x468	; 0x468 <vListInsert>
    2238:	0a c0       	rjmp	.+20     	; 0x224e <__stack+0x4f>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    223a:	c1 2c       	mov	r12, r1
    223c:	d1 2c       	mov	r13, r1
    223e:	76 01       	movw	r14, r12
    2240:	00 e0       	ldi	r16, 0x00	; 0
    2242:	10 e0       	ldi	r17, 0x00	; 0
    2244:	a5 01       	movw	r20, r10
    2246:	94 01       	movw	r18, r8
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	ce 01       	movw	r24, r28
    224c:	5a df       	rcall	.-332    	; 0x2102 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    224e:	e0 91 e7 0c 	lds	r30, 0x0CE7	; 0x800ce7 <pxCurrentTimerList>
    2252:	f0 91 e8 0c 	lds	r31, 0x0CE8	; 0x800ce8 <pxCurrentTimerList+0x1>
    2256:	80 81       	ld	r24, Z
    2258:	81 11       	cpse	r24, r1
    225a:	be cf       	rjmp	.-132    	; 0x21d8 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    225c:	80 91 e5 0c 	lds	r24, 0x0CE5	; 0x800ce5 <pxOverflowTimerList>
    2260:	90 91 e6 0c 	lds	r25, 0x0CE6	; 0x800ce6 <pxOverflowTimerList+0x1>
    2264:	90 93 e8 0c 	sts	0x0CE8, r25	; 0x800ce8 <pxCurrentTimerList+0x1>
    2268:	80 93 e7 0c 	sts	0x0CE7, r24	; 0x800ce7 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    226c:	f0 93 e6 0c 	sts	0x0CE6, r31	; 0x800ce6 <pxOverflowTimerList+0x1>
    2270:	e0 93 e5 0c 	sts	0x0CE5, r30	; 0x800ce5 <pxOverflowTimerList>
    }
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	ff 90       	pop	r15
    227e:	ef 90       	pop	r14
    2280:	df 90       	pop	r13
    2282:	cf 90       	pop	r12
    2284:	bf 90       	pop	r11
    2286:	af 90       	pop	r10
    2288:	9f 90       	pop	r9
    228a:	8f 90       	pop	r8
    228c:	08 95       	ret

0000228e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    228e:	cf 92       	push	r12
    2290:	df 92       	push	r13
    2292:	ef 92       	push	r14
    2294:	ff 92       	push	r15
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
    229a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    229c:	85 d8       	rcall	.-3830   	; 0x13a8 <xTaskGetTickCount>
    229e:	6b 01       	movw	r12, r22
    22a0:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    22a2:	80 91 dd 0c 	lds	r24, 0x0CDD	; 0x800cdd <xLastTime.2448>
    22a6:	90 91 de 0c 	lds	r25, 0x0CDE	; 0x800cde <xLastTime.2448+0x1>
    22aa:	a0 91 df 0c 	lds	r26, 0x0CDF	; 0x800cdf <xLastTime.2448+0x2>
    22ae:	b0 91 e0 0c 	lds	r27, 0x0CE0	; 0x800ce0 <xLastTime.2448+0x3>
    22b2:	c8 16       	cp	r12, r24
    22b4:	d9 06       	cpc	r13, r25
    22b6:	ea 06       	cpc	r14, r26
    22b8:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    22ba:	20 f4       	brcc	.+8      	; 0x22c4 <prvSampleTimeNow+0x36>
    22bc:	80 df       	rcall	.-256    	; 0x21be <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	88 83       	st	Y, r24
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    22c4:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    22c6:	c0 92 dd 0c 	sts	0x0CDD, r12	; 0x800cdd <xLastTime.2448>
    22ca:	d0 92 de 0c 	sts	0x0CDE, r13	; 0x800cde <xLastTime.2448+0x1>
    22ce:	e0 92 df 0c 	sts	0x0CDF, r14	; 0x800cdf <xLastTime.2448+0x2>
    22d2:	f0 92 e0 0c 	sts	0x0CE0, r15	; 0x800ce0 <xLastTime.2448+0x3>

        return xTimeNow;
    }
    22d6:	c7 01       	movw	r24, r14
    22d8:	b6 01       	movw	r22, r12
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	df 90       	pop	r13
    22e4:	cf 90       	pop	r12
    22e6:	08 95       	ret

000022e8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    22e8:	4f 92       	push	r4
    22ea:	5f 92       	push	r5
    22ec:	6f 92       	push	r6
    22ee:	7f 92       	push	r7
    22f0:	8f 92       	push	r8
    22f2:	9f 92       	push	r9
    22f4:	af 92       	push	r10
    22f6:	bf 92       	push	r11
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	4b 01       	movw	r8, r22
    230a:	5c 01       	movw	r10, r24
    230c:	29 01       	movw	r4, r18
    230e:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2310:	e0 91 e7 0c 	lds	r30, 0x0CE7	; 0x800ce7 <pxCurrentTimerList>
    2314:	f0 91 e8 0c 	lds	r31, 0x0CE8	; 0x800ce8 <pxCurrentTimerList+0x1>
    2318:	07 80       	ldd	r0, Z+7	; 0x07
    231a:	f0 85       	ldd	r31, Z+8	; 0x08
    231c:	e0 2d       	mov	r30, r0
    231e:	c0 85       	ldd	r28, Z+8	; 0x08
    2320:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2322:	ce 01       	movw	r24, r28
    2324:	02 96       	adiw	r24, 0x02	; 2
    2326:	0e 94 71 02 	call	0x4e2	; 0x4e2 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    232a:	8e 89       	ldd	r24, Y+22	; 0x16
    232c:	82 ff       	sbrs	r24, 2
    232e:	1b c0       	rjmp	.+54     	; 0x2366 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2330:	4e 85       	ldd	r20, Y+14	; 0x0e
    2332:	5f 85       	ldd	r21, Y+15	; 0x0f
    2334:	68 89       	ldd	r22, Y+16	; 0x10
    2336:	79 89       	ldd	r23, Y+17	; 0x11
    2338:	48 0d       	add	r20, r8
    233a:	59 1d       	adc	r21, r9
    233c:	6a 1d       	adc	r22, r10
    233e:	7b 1d       	adc	r23, r11
    2340:	75 01       	movw	r14, r10
    2342:	64 01       	movw	r12, r8
    2344:	93 01       	movw	r18, r6
    2346:	82 01       	movw	r16, r4
    2348:	ce 01       	movw	r24, r28
    234a:	49 de       	rcall	.-878    	; 0x1fde <prvInsertTimerInActiveList>
    234c:	88 23       	and	r24, r24
    234e:	69 f0       	breq	.+26     	; 0x236a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2350:	c1 2c       	mov	r12, r1
    2352:	d1 2c       	mov	r13, r1
    2354:	76 01       	movw	r14, r12
    2356:	00 e0       	ldi	r16, 0x00	; 0
    2358:	10 e0       	ldi	r17, 0x00	; 0
    235a:	a5 01       	movw	r20, r10
    235c:	94 01       	movw	r18, r8
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	ce 01       	movw	r24, r28
    2362:	cf de       	rcall	.-610    	; 0x2102 <xTimerGenericCommand>
    2364:	02 c0       	rjmp	.+4      	; 0x236a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2366:	8e 7f       	andi	r24, 0xFE	; 254
    2368:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    236a:	ec 89       	ldd	r30, Y+20	; 0x14
    236c:	fd 89       	ldd	r31, Y+21	; 0x15
    236e:	ce 01       	movw	r24, r28
    2370:	19 95       	eicall
    }
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	1f 91       	pop	r17
    2378:	0f 91       	pop	r16
    237a:	ff 90       	pop	r15
    237c:	ef 90       	pop	r14
    237e:	df 90       	pop	r13
    2380:	cf 90       	pop	r12
    2382:	bf 90       	pop	r11
    2384:	af 90       	pop	r10
    2386:	9f 90       	pop	r9
    2388:	8f 90       	pop	r8
    238a:	7f 90       	pop	r7
    238c:	6f 90       	pop	r6
    238e:	5f 90       	pop	r5
    2390:	4f 90       	pop	r4
    2392:	08 95       	ret

00002394 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2394:	8f 92       	push	r8
    2396:	9f 92       	push	r9
    2398:	af 92       	push	r10
    239a:	bf 92       	push	r11
    239c:	cf 92       	push	r12
    239e:	df 92       	push	r13
    23a0:	ef 92       	push	r14
    23a2:	ff 92       	push	r15
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	1f 92       	push	r1
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	6b 01       	movw	r12, r22
    23b2:	7c 01       	movw	r14, r24
    23b4:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    23b6:	0e 94 ce 09 	call	0x139c	; 0x139c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    23ba:	ce 01       	movw	r24, r28
    23bc:	01 96       	adiw	r24, 0x01	; 1
    23be:	67 df       	rcall	.-306    	; 0x228e <prvSampleTimeNow>
    23c0:	4b 01       	movw	r8, r22
    23c2:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	81 11       	cpse	r24, r1
    23c8:	2b c0       	rjmp	.+86     	; 0x2420 <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    23ca:	11 11       	cpse	r17, r1
    23cc:	0c c0       	rjmp	.+24     	; 0x23e6 <prvProcessTimerOrBlockTask+0x52>
    23ce:	8c 14       	cp	r8, r12
    23d0:	9d 04       	cpc	r9, r13
    23d2:	ae 04       	cpc	r10, r14
    23d4:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    23d6:	38 f0       	brcs	.+14     	; 0x23e6 <prvProcessTimerOrBlockTask+0x52>
    23d8:	21 d9       	rcall	.-3518   	; 0x161c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    23da:	a5 01       	movw	r20, r10
    23dc:	94 01       	movw	r18, r8
    23de:	c7 01       	movw	r24, r14
    23e0:	b6 01       	movw	r22, r12
    23e2:	82 df       	rcall	.-252    	; 0x22e8 <prvProcessExpiredTimer>
    23e4:	1e c0       	rjmp	.+60     	; 0x2422 <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    23e6:	11 23       	and	r17, r17
    23e8:	41 f0       	breq	.+16     	; 0x23fa <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    23ea:	e0 91 e5 0c 	lds	r30, 0x0CE5	; 0x800ce5 <pxOverflowTimerList>
    23ee:	f0 91 e6 0c 	lds	r31, 0x0CE6	; 0x800ce6 <pxOverflowTimerList+0x1>
    23f2:	80 81       	ld	r24, Z
    23f4:	11 e0       	ldi	r17, 0x01	; 1
    23f6:	81 11       	cpse	r24, r1
    23f8:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    23fa:	b7 01       	movw	r22, r14
    23fc:	a6 01       	movw	r20, r12
    23fe:	48 19       	sub	r20, r8
    2400:	59 09       	sbc	r21, r9
    2402:	6a 09       	sbc	r22, r10
    2404:	7b 09       	sbc	r23, r11
    2406:	21 2f       	mov	r18, r17
    2408:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <xTimerQueue>
    240c:	90 91 e4 0c 	lds	r25, 0x0CE4	; 0x800ce4 <xTimerQueue+0x1>
    2410:	0e 94 21 07 	call	0xe42	; 0xe42 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2414:	03 d9       	rcall	.-3578   	; 0x161c <xTaskResumeAll>
    2416:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2418:	04 c0       	rjmp	.+8      	; 0x2422 <prvProcessTimerOrBlockTask+0x8e>
    241a:	0e 94 ed 02 	call	0x5da	; 0x5da <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <prvProcessTimerOrBlockTask+0x8e>
    2420:	fd d8       	rcall	.-3590   	; 0x161c <xTaskResumeAll>
            }
        }
    }
    2422:	0f 90       	pop	r0
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	ff 90       	pop	r15
    242c:	ef 90       	pop	r14
    242e:	df 90       	pop	r13
    2430:	cf 90       	pop	r12
    2432:	bf 90       	pop	r11
    2434:	af 90       	pop	r10
    2436:	9f 90       	pop	r9
    2438:	8f 90       	pop	r8
    243a:	08 95       	ret

0000243c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    243c:	af 92       	push	r10
    243e:	bf 92       	push	r11
    2440:	cf 92       	push	r12
    2442:	df 92       	push	r13
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	28 97       	sbiw	r28, 0x08	; 8
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2460:	81 c0       	rjmp	.+258    	; 0x2564 <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	88 23       	and	r24, r24
    2466:	0c f4       	brge	.+2      	; 0x246a <prvProcessReceivedCommands+0x2e>
    2468:	7d c0       	rjmp	.+250    	; 0x2564 <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    246a:	ae 80       	ldd	r10, Y+6	; 0x06
    246c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    246e:	d5 01       	movw	r26, r10
    2470:	1c 96       	adiw	r26, 0x0c	; 12
    2472:	8d 91       	ld	r24, X+
    2474:	9c 91       	ld	r25, X
    2476:	1d 97       	sbiw	r26, 0x0d	; 13
    2478:	89 2b       	or	r24, r25
    247a:	21 f0       	breq	.+8      	; 0x2484 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    247c:	c5 01       	movw	r24, r10
    247e:	02 96       	adiw	r24, 0x02	; 2
    2480:	0e 94 71 02 	call	0x4e2	; 0x4e2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2484:	ce 01       	movw	r24, r28
    2486:	08 96       	adiw	r24, 0x08	; 8
    2488:	02 df       	rcall	.-508    	; 0x228e <prvSampleTimeNow>
    248a:	8b 01       	movw	r16, r22
    248c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    248e:	e9 81       	ldd	r30, Y+1	; 0x01
    2490:	0e 2e       	mov	r0, r30
    2492:	00 0c       	add	r0, r0
    2494:	ff 0b       	sbc	r31, r31
    2496:	ea 30       	cpi	r30, 0x0A	; 10
    2498:	f1 05       	cpc	r31, r1
    249a:	08 f0       	brcs	.+2      	; 0x249e <prvProcessReceivedCommands+0x62>
    249c:	63 c0       	rjmp	.+198    	; 0x2564 <prvProcessReceivedCommands+0x128>
    249e:	88 27       	eor	r24, r24
    24a0:	ee 58       	subi	r30, 0x8E	; 142
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	8f 4f       	sbci	r24, 0xFF	; 255
    24a6:	79 c7       	rjmp	.+3826   	; 0x339a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    24a8:	f5 01       	movw	r30, r10
    24aa:	86 89       	ldd	r24, Z+22	; 0x16
    24ac:	81 60       	ori	r24, 0x01	; 1
    24ae:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    24b0:	ca 80       	ldd	r12, Y+2	; 0x02
    24b2:	db 80       	ldd	r13, Y+3	; 0x03
    24b4:	ec 80       	ldd	r14, Y+4	; 0x04
    24b6:	fd 80       	ldd	r15, Y+5	; 0x05
    24b8:	46 85       	ldd	r20, Z+14	; 0x0e
    24ba:	57 85       	ldd	r21, Z+15	; 0x0f
    24bc:	60 89       	ldd	r22, Z+16	; 0x10
    24be:	71 89       	ldd	r23, Z+17	; 0x11
    24c0:	4c 0d       	add	r20, r12
    24c2:	5d 1d       	adc	r21, r13
    24c4:	6e 1d       	adc	r22, r14
    24c6:	7f 1d       	adc	r23, r15
    24c8:	c5 01       	movw	r24, r10
    24ca:	89 dd       	rcall	.-1262   	; 0x1fde <prvInsertTimerInActiveList>
    24cc:	88 23       	and	r24, r24
    24ce:	09 f4       	brne	.+2      	; 0x24d2 <prvProcessReceivedCommands+0x96>
    24d0:	49 c0       	rjmp	.+146    	; 0x2564 <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24d2:	d5 01       	movw	r26, r10
    24d4:	54 96       	adiw	r26, 0x14	; 20
    24d6:	ed 91       	ld	r30, X+
    24d8:	fc 91       	ld	r31, X
    24da:	55 97       	sbiw	r26, 0x15	; 21
    24dc:	c5 01       	movw	r24, r10
    24de:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    24e0:	f5 01       	movw	r30, r10
    24e2:	86 89       	ldd	r24, Z+22	; 0x16
    24e4:	82 ff       	sbrs	r24, 2
    24e6:	3e c0       	rjmp	.+124    	; 0x2564 <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    24e8:	4a 81       	ldd	r20, Y+2	; 0x02
    24ea:	5b 81       	ldd	r21, Y+3	; 0x03
    24ec:	6c 81       	ldd	r22, Y+4	; 0x04
    24ee:	7d 81       	ldd	r23, Y+5	; 0x05
    24f0:	86 85       	ldd	r24, Z+14	; 0x0e
    24f2:	97 85       	ldd	r25, Z+15	; 0x0f
    24f4:	a0 89       	ldd	r26, Z+16	; 0x10
    24f6:	b1 89       	ldd	r27, Z+17	; 0x11
    24f8:	9a 01       	movw	r18, r20
    24fa:	ab 01       	movw	r20, r22
    24fc:	28 0f       	add	r18, r24
    24fe:	39 1f       	adc	r19, r25
    2500:	4a 1f       	adc	r20, r26
    2502:	5b 1f       	adc	r21, r27
    2504:	c1 2c       	mov	r12, r1
    2506:	d1 2c       	mov	r13, r1
    2508:	76 01       	movw	r14, r12
    250a:	00 e0       	ldi	r16, 0x00	; 0
    250c:	10 e0       	ldi	r17, 0x00	; 0
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	c5 01       	movw	r24, r10
    2512:	f7 dd       	rcall	.-1042   	; 0x2102 <xTimerGenericCommand>
    2514:	27 c0       	rjmp	.+78     	; 0x2564 <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2516:	d5 01       	movw	r26, r10
    2518:	56 96       	adiw	r26, 0x16	; 22
    251a:	8c 91       	ld	r24, X
    251c:	56 97       	sbiw	r26, 0x16	; 22
    251e:	8e 7f       	andi	r24, 0xFE	; 254
    2520:	56 96       	adiw	r26, 0x16	; 22
    2522:	8c 93       	st	X, r24
                        break;
    2524:	1f c0       	rjmp	.+62     	; 0x2564 <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2526:	f5 01       	movw	r30, r10
    2528:	86 89       	ldd	r24, Z+22	; 0x16
    252a:	81 60       	ori	r24, 0x01	; 1
    252c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    252e:	4a 81       	ldd	r20, Y+2	; 0x02
    2530:	5b 81       	ldd	r21, Y+3	; 0x03
    2532:	6c 81       	ldd	r22, Y+4	; 0x04
    2534:	7d 81       	ldd	r23, Y+5	; 0x05
    2536:	46 87       	std	Z+14, r20	; 0x0e
    2538:	57 87       	std	Z+15, r21	; 0x0f
    253a:	60 8b       	std	Z+16, r22	; 0x10
    253c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    253e:	40 0f       	add	r20, r16
    2540:	51 1f       	adc	r21, r17
    2542:	62 1f       	adc	r22, r18
    2544:	73 1f       	adc	r23, r19
    2546:	68 01       	movw	r12, r16
    2548:	79 01       	movw	r14, r18
    254a:	c5 01       	movw	r24, r10
    254c:	48 dd       	rcall	.-1392   	; 0x1fde <prvInsertTimerInActiveList>
                        break;
    254e:	0a c0       	rjmp	.+20     	; 0x2564 <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2550:	f5 01       	movw	r30, r10
    2552:	86 89       	ldd	r24, Z+22	; 0x16
    2554:	81 fd       	sbrc	r24, 1
    2556:	04 c0       	rjmp	.+8      	; 0x2560 <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    2558:	c5 01       	movw	r24, r10
    255a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <vPortFree>
    255e:	02 c0       	rjmp	.+4      	; 0x2564 <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2560:	8e 7f       	andi	r24, 0xFE	; 254
    2562:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	a9 01       	movw	r20, r18
    256a:	be 01       	movw	r22, r28
    256c:	6f 5f       	subi	r22, 0xFF	; 255
    256e:	7f 4f       	sbci	r23, 0xFF	; 255
    2570:	80 91 e3 0c 	lds	r24, 0x0CE3	; 0x800ce3 <xTimerQueue>
    2574:	90 91 e4 0c 	lds	r25, 0x0CE4	; 0x800ce4 <xTimerQueue+0x1>
    2578:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xQueueReceive>
    257c:	81 11       	cpse	r24, r1
    257e:	71 cf       	rjmp	.-286    	; 0x2462 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2580:	28 96       	adiw	r28, 0x08	; 8
    2582:	0f b6       	in	r0, 0x3f	; 63
    2584:	f8 94       	cli
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	0f be       	out	0x3f, r0	; 63
    258a:	cd bf       	out	0x3d, r28	; 61
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
    259e:	af 90       	pop	r10
    25a0:	08 95       	ret

000025a2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    25a2:	08 95       	ret

000025a4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    25a4:	84 b1       	in	r24, 0x04	; 4
    25a6:	80 68       	ori	r24, 0x80	; 128
    25a8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    25aa:	85 b1       	in	r24, 0x05	; 5
    25ac:	80 68       	ori	r24, 0x80	; 128
    25ae:	85 b9       	out	0x05, r24	; 5
    25b0:	08 95       	ret

000025b2 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    25b2:	83 b1       	in	r24, 0x03	; 3
    25b4:	80 68       	ori	r24, 0x80	; 128
    25b6:	83 b9       	out	0x03, r24	; 3
    25b8:	08 95       	ret

000025ba <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    25ba:	f4 df       	rcall	.-24     	; 0x25a4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25bc:	2f ef       	ldi	r18, 0xFF	; 255
    25be:	80 e7       	ldi	r24, 0x70	; 112
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	21 50       	subi	r18, 0x01	; 1
    25c4:	80 40       	sbci	r24, 0x00	; 0
    25c6:	90 40       	sbci	r25, 0x00	; 0
    25c8:	e1 f7       	brne	.-8      	; 0x25c2 <vApplicationMallocFailedHook+0x8>
    25ca:	00 c0       	rjmp	.+0      	; 0x25cc <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    25cc:	00 00       	nop
    25ce:	f1 df       	rcall	.-30     	; 0x25b2 <prvBlinkMainLed>
    25d0:	f5 cf       	rjmp	.-22     	; 0x25bc <vApplicationMallocFailedHook+0x2>

000025d2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    25d2:	e8 df       	rcall	.-48     	; 0x25a4 <prvSetMainLedOn>
    25d4:	2f ef       	ldi	r18, 0xFF	; 255
    25d6:	87 ea       	ldi	r24, 0xA7	; 167
    25d8:	91 e6       	ldi	r25, 0x61	; 97
    25da:	21 50       	subi	r18, 0x01	; 1
    25dc:	80 40       	sbci	r24, 0x00	; 0
    25de:	90 40       	sbci	r25, 0x00	; 0
    25e0:	e1 f7       	brne	.-8      	; 0x25da <vApplicationStackOverflowHook+0x8>
    25e2:	00 c0       	rjmp	.+0      	; 0x25e4 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    25e4:	00 00       	nop
    25e6:	e5 df       	rcall	.-54     	; 0x25b2 <prvBlinkMainLed>
    25e8:	f5 cf       	rjmp	.-22     	; 0x25d4 <vApplicationStackOverflowHook+0x2>

000025ea <receiveTask>:
}

char isSet(char value, int pos){
	char mask = 0x01 << pos;
	return value & mask;
}
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	1f 92       	push	r1
    25f0:	1f 92       	push	r1
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	6a d9       	rcall	.-3372   	; 0x18d4 <vTaskSetApplicationTaskTag>
    2600:	66 e0       	ldi	r22, 0x06	; 6
    2602:	70 e0       	ldi	r23, 0x00	; 0
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	4a d9       	rcall	.-3436   	; 0x189e <vTaskDelay>
    260a:	80 b1       	in	r24, 0x00	; 0
    260c:	88 23       	and	r24, r24
    260e:	c1 f3       	breq	.-16     	; 0x2600 <receiveTask+0x16>
    2610:	8a 83       	std	Y+2, r24	; 0x02
    2612:	80 91 ff 0c 	lds	r24, 0x0CFF	; 0x800cff <id>
    2616:	8f 5f       	subi	r24, 0xFF	; 255
    2618:	80 93 ff 0c 	sts	0x0CFF, r24	; 0x800cff <id>
    261c:	89 83       	std	Y+1, r24	; 0x01
    261e:	00 e0       	ldi	r16, 0x00	; 0
    2620:	2f ef       	ldi	r18, 0xFF	; 255
    2622:	3f ef       	ldi	r19, 0xFF	; 255
    2624:	a9 01       	movw	r20, r18
    2626:	be 01       	movw	r22, r28
    2628:	6f 5f       	subi	r22, 0xFF	; 255
    262a:	7f 4f       	sbci	r23, 0xFF	; 255
    262c:	80 91 0e 0d 	lds	r24, 0x0D0E	; 0x800d0e <receiveQueue>
    2630:	90 91 0f 0d 	lds	r25, 0x0D0F	; 0x800d0f <receiveQueue+0x1>
    2634:	0e 94 04 05 	call	0xa08	; 0xa08 <xQueueGenericSend>
    2638:	66 e0       	ldi	r22, 0x06	; 6
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	2e d9       	rcall	.-3492   	; 0x189e <vTaskDelay>
    2642:	de cf       	rjmp	.-68     	; 0x2600 <receiveTask+0x16>

00002644 <sendTask>:
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	1f 92       	push	r1
    264a:	1f 92       	push	r1
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	3d d9       	rcall	.-3462   	; 0x18d4 <vTaskSetApplicationTaskTag>
    265a:	2f ef       	ldi	r18, 0xFF	; 255
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	a9 01       	movw	r20, r18
    2660:	be 01       	movw	r22, r28
    2662:	6f 5f       	subi	r22, 0xFF	; 255
    2664:	7f 4f       	sbci	r23, 0xFF	; 255
    2666:	80 91 0a 0d 	lds	r24, 0x0D0A	; 0x800d0a <sendQueue>
    266a:	90 91 0b 0d 	lds	r25, 0x0D0B	; 0x800d0b <sendQueue+0x1>
    266e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xQueueReceive>
    2672:	88 23       	and	r24, r24
    2674:	91 f3       	breq	.-28     	; 0x265a <sendTask+0x16>
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	88 b9       	out	0x08, r24	; 8
    267a:	6c e0       	ldi	r22, 0x0C	; 12
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0d d9       	rcall	.-3558   	; 0x189e <vTaskDelay>
    2684:	18 b8       	out	0x08, r1	; 8
    2686:	e9 cf       	rjmp	.-46     	; 0x265a <sendTask+0x16>

00002688 <userInputTask>:
    2688:	cf 93       	push	r28
    268a:	df 93       	push	r29
    268c:	00 d0       	rcall	.+0      	; 0x268e <userInputTask+0x6>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <userInputTask+0x8>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	63 e0       	ldi	r22, 0x03	; 3
    2696:	70 e0       	ldi	r23, 0x00	; 0
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	1b d9       	rcall	.-3530   	; 0x18d4 <vTaskSetApplicationTaskTag>
    269e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <xTaskGetTickCount>
    26a2:	69 83       	std	Y+1, r22	; 0x01
    26a4:	7a 83       	std	Y+2, r23	; 0x02
    26a6:	8b 83       	std	Y+3, r24	; 0x03
    26a8:	9c 83       	std	Y+4, r25	; 0x04
    26aa:	4d e1       	ldi	r20, 0x1D	; 29
    26ac:	50 e0       	ldi	r21, 0x00	; 0
    26ae:	60 e0       	ldi	r22, 0x00	; 0
    26b0:	70 e0       	ldi	r23, 0x00	; 0
    26b2:	ce 01       	movw	r24, r28
    26b4:	01 96       	adiw	r24, 0x01	; 1
    26b6:	8e d8       	rcall	.-3812   	; 0x17d4 <xTaskDelayUntil>
    26b8:	19 c0       	rjmp	.+50     	; 0x26ec <userInputTask+0x64>
    26ba:	80 91 1a 0d 	lds	r24, 0x0D1A	; 0x800d1a <__iob>
    26be:	90 91 1b 0d 	lds	r25, 0x0D1B	; 0x800d1b <__iob+0x1>
    26c2:	a8 d7       	rcall	.+3920   	; 0x3614 <fgetc>
    26c4:	8e 83       	std	Y+6, r24	; 0x06
    26c6:	80 91 ff 0c 	lds	r24, 0x0CFF	; 0x800cff <id>
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
    26cc:	80 93 ff 0c 	sts	0x0CFF, r24	; 0x800cff <id>
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	00 e0       	ldi	r16, 0x00	; 0
    26d4:	2f ef       	ldi	r18, 0xFF	; 255
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	a9 01       	movw	r20, r18
    26da:	be 01       	movw	r22, r28
    26dc:	6b 5f       	subi	r22, 0xFB	; 251
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	80 91 0a 0d 	lds	r24, 0x0D0A	; 0x800d0a <sendQueue>
    26e4:	90 91 0b 0d 	lds	r25, 0x0D0B	; 0x800d0b <sendQueue+0x1>
    26e8:	0e 94 04 05 	call	0xa08	; 0xa08 <xQueueGenericSend>
    26ec:	ea d0       	rcall	.+468    	; 0x28c2 <stdio_inputIsWaiting>
    26ee:	81 11       	cpse	r24, r1
    26f0:	e4 cf       	rjmp	.-56     	; 0x26ba <userInputTask+0x32>
    26f2:	db cf       	rjmp	.-74     	; 0x26aa <userInputTask+0x22>

000026f4 <printTask>:
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	1f 92       	push	r1
    26fa:	1f 92       	push	r1
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	64 e0       	ldi	r22, 0x04	; 4
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	e5 d8       	rcall	.-3638   	; 0x18d4 <vTaskSetApplicationTaskTag>
    270a:	2f ef       	ldi	r18, 0xFF	; 255
    270c:	3f ef       	ldi	r19, 0xFF	; 255
    270e:	a9 01       	movw	r20, r18
    2710:	be 01       	movw	r22, r28
    2712:	6f 5f       	subi	r22, 0xFF	; 255
    2714:	7f 4f       	sbci	r23, 0xFF	; 255
    2716:	80 91 0e 0d 	lds	r24, 0x0D0E	; 0x800d0e <receiveQueue>
    271a:	90 91 0f 0d 	lds	r25, 0x0D0F	; 0x800d0f <receiveQueue+0x1>
    271e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <xQueueReceive>
    2722:	88 23       	and	r24, r24
    2724:	91 f3       	breq	.-28     	; 0x270a <printTask+0x16>
    2726:	4f ef       	ldi	r20, 0xFF	; 255
    2728:	5f ef       	ldi	r21, 0xFF	; 255
    272a:	ba 01       	movw	r22, r20
    272c:	80 91 10 0d 	lds	r24, 0x0D10	; 0x800d10 <printSemaphore>
    2730:	90 91 11 0d 	lds	r25, 0x0D11	; 0x800d11 <printSemaphore+0x1>
    2734:	0e 94 75 06 	call	0xcea	; 0xcea <xQueueSemaphoreTake>
    2738:	88 23       	and	r24, r24
    273a:	39 f3       	breq	.-50     	; 0x270a <printTask+0x16>
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a7 d7       	rcall	.+3918   	; 0x3690 <putchar>
    2742:	00 e0       	ldi	r16, 0x00	; 0
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	a9 01       	movw	r20, r18
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	70 e0       	ldi	r23, 0x00	; 0
    274e:	80 91 10 0d 	lds	r24, 0x0D10	; 0x800d10 <printSemaphore>
    2752:	90 91 11 0d 	lds	r25, 0x0D11	; 0x800d11 <printSemaphore+0x1>
    2756:	0e 94 04 05 	call	0xa08	; 0xa08 <xQueueGenericSend>
    275a:	d7 cf       	rjmp	.-82     	; 0x270a <printTask+0x16>

0000275c <initialiseSystem>:

 
void initialiseSystem()
{
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	 
	stdio_initialise(ser_USART0);
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	85 d0       	rcall	.+266    	; 0x2870 <stdio_initialise>
	 
	//Port initialization
	//PortA all data IN
	DDRA = 0b00000000;
    2766:	11 b8       	out	0x01, r1	; 1
	//bit 2 message out signal
	//bit 3 message in signal
	//bit 4 and 5 also data OUT
	//bit 6 and 7 also data IN
	// DDRK = 0b10101100;
	DDRK = 0b00110101;
    2768:	85 e3       	ldi	r24, 0x35	; 53
    276a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>

	 
	//PortC all data OUT and set to szero
	DDRC = 0b11111111;
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00000000;
    2772:	18 b8       	out	0x08, r1	; 8
	 
	if (NULL == printSemaphore)  // Check to confirm that the Semaphore has not already been created.
    2774:	80 91 10 0d 	lds	r24, 0x0D10	; 0x800d10 <printSemaphore>
    2778:	90 91 11 0d 	lds	r25, 0x0D11	; 0x800d11 <printSemaphore+0x1>
    277c:	89 2b       	or	r24, r25
    277e:	89 f4       	brne	.+34     	; 0x27a2 <initialiseSystem+0x46>
	{
		printSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	0e 94 a4 05 	call	0xb48	; 0xb48 <xQueueCreateMutex>
    2786:	90 93 11 0d 	sts	0x0D11, r25	; 0x800d11 <printSemaphore+0x1>
    278a:	80 93 10 0d 	sts	0x0D10, r24	; 0x800d10 <printSemaphore>
		if (NULL != printSemaphore)
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	41 f0       	breq	.+16     	; 0x27a2 <initialiseSystem+0x46>
		{
			xSemaphoreGive( ( printSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2792:	00 e0       	ldi	r16, 0x00	; 0
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	60 e0       	ldi	r22, 0x00	; 0
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 04 05 	call	0xa08	; 0xa08 <xQueueGenericSend>
		}
	}
	 
	//Task initialization
	xTaskCreate(
    27a2:	e1 2c       	mov	r14, r1
    27a4:	f1 2c       	mov	r15, r1
    27a6:	01 e0       	ldi	r16, 0x01	; 1
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 ec       	ldi	r20, 0xC0	; 192
    27ae:	50 e0       	ldi	r21, 0x00	; 0
    27b0:	6a e2       	ldi	r22, 0x2A	; 42
    27b2:	72 e0       	ldi	r23, 0x02	; 2
    27b4:	85 ef       	ldi	r24, 0xF5	; 245
    27b6:	92 e1       	ldi	r25, 0x12	; 18
    27b8:	0e 94 46 09 	call	0x128c	; 0x128c <xTaskCreate>
	NULL,
	1,
	NULL
	);
	
	xTaskCreate(
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 ec       	ldi	r20, 0xC0	; 192
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	62 e3       	ldi	r22, 0x32	; 50
    27c6:	72 e0       	ldi	r23, 0x02	; 2
    27c8:	82 e2       	ldi	r24, 0x22	; 34
    27ca:	93 e1       	ldi	r25, 0x13	; 19
    27cc:	0e 94 46 09 	call	0x128c	; 0x128c <xTaskCreate>
	NULL,
	1,
	NULL
	);
	 
	xTaskCreate(
    27d0:	02 e0       	ldi	r16, 0x02	; 2
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 ec       	ldi	r20, 0xC0	; 192
    27d8:	50 e0       	ldi	r21, 0x00	; 0
    27da:	67 e3       	ldi	r22, 0x37	; 55
    27dc:	72 e0       	ldi	r23, 0x02	; 2
    27de:	84 e4       	ldi	r24, 0x44	; 68
    27e0:	93 e1       	ldi	r25, 0x13	; 19
    27e2:	0e 94 46 09 	call	0x128c	; 0x128c <xTaskCreate>
	NULL,
	2,
	NULL
	);
	 
	xTaskCreate(
    27e6:	01 e0       	ldi	r16, 0x01	; 1
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 ec       	ldi	r20, 0xC0	; 192
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	61 e4       	ldi	r22, 0x41	; 65
    27f2:	72 e0       	ldi	r23, 0x02	; 2
    27f4:	8a e7       	ldi	r24, 0x7A	; 122
    27f6:	93 e1       	ldi	r25, 0x13	; 19
    27f8:	0e 94 46 09 	call	0x128c	; 0x128c <xTaskCreate>
	1,
	NULL
	);
	
	//Queue init
	sendQueue = xQueueCreate(QUEUE_LENGTH, QUEUE_ITEM_SIZE);
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	62 e0       	ldi	r22, 0x02	; 2
    2800:	8a e0       	ldi	r24, 0x0A	; 10
    2802:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <xQueueGenericCreate>
    2806:	90 93 0b 0d 	sts	0x0D0B, r25	; 0x800d0b <sendQueue+0x1>
    280a:	80 93 0a 0d 	sts	0x0D0A, r24	; 0x800d0a <sendQueue>
	receiveQueue = xQueueCreate(QUEUE_LENGTH, QUEUE_ITEM_SIZE);
    280e:	40 e0       	ldi	r20, 0x00	; 0
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	8a e0       	ldi	r24, 0x0A	; 10
    2814:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <xQueueGenericCreate>
    2818:	90 93 0f 0d 	sts	0x0D0F, r25	; 0x800d0f <receiveQueue+0x1>
    281c:	80 93 0e 0d 	sts	0x0D0E, r24	; 0x800d0e <receiveQueue>
	
	//trace_init();
}
    2820:	0f 91       	pop	r16
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	08 95       	ret

00002828 <main>:



int main(void)
{
	initialiseSystem();
    2828:	99 df       	rcall	.-206    	; 0x275c <initialiseSystem>
	vTaskStartScheduler();
    282a:	0e 94 91 09 	call	0x1322	; 0x1322 <vTaskStartScheduler>
}
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	08 95       	ret

00002834 <usart_getchar>:
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	1f 92       	push	r1
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
    283e:	be 01       	movw	r22, r28
    2840:	6f 5f       	subi	r22, 0xFF	; 255
    2842:	7f 4f       	sbci	r23, 0xFF	; 255
    2844:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <_com_serial_instance>
    2848:	90 91 01 0d 	lds	r25, 0x0D01	; 0x800d01 <_com_serial_instance+0x1>
    284c:	16 d1       	rcall	.+556    	; 0x2a7a <serial_getByte>
    284e:	81 11       	cpse	r24, r1
    2850:	f6 cf       	rjmp	.-20     	; 0x283e <usart_getchar+0xa>
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0f 90       	pop	r0
    2858:	df 91       	pop	r29
    285a:	cf 91       	pop	r28
    285c:	08 95       	ret

0000285e <usart_putchar>:
    285e:	68 2f       	mov	r22, r24
    2860:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <_com_serial_instance>
    2864:	90 91 01 0d 	lds	r25, 0x0D01	; 0x800d01 <_com_serial_instance+0x1>
    2868:	dd d0       	rcall	.+442    	; 0x2a24 <serial_sendByte>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	08 95       	ret

00002870 <stdio_initialise>:
    2870:	8f 92       	push	r8
    2872:	9f 92       	push	r9
    2874:	af 92       	push	r10
    2876:	cf 92       	push	r12
    2878:	ef 92       	push	r14
    287a:	0f 93       	push	r16
    287c:	81 2c       	mov	r8, r1
    287e:	91 2c       	mov	r9, r1
    2880:	68 94       	set
    2882:	aa 24       	eor	r10, r10
    2884:	a7 f8       	bld	r10, 7
    2886:	68 94       	set
    2888:	cc 24       	eor	r12, r12
    288a:	c7 f8       	bld	r12, 7
    288c:	e1 2c       	mov	r14, r1
    288e:	00 e0       	ldi	r16, 0x00	; 0
    2890:	23 e0       	ldi	r18, 0x03	; 3
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	51 ee       	ldi	r21, 0xE1	; 225
    2896:	60 e0       	ldi	r22, 0x00	; 0
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	28 d0       	rcall	.+80     	; 0x28ec <serial_create>
    289c:	90 93 01 0d 	sts	0x0D01, r25	; 0x800d01 <_com_serial_instance+0x1>
    28a0:	80 93 00 0d 	sts	0x0D00, r24	; 0x800d00 <_com_serial_instance>
    28a4:	ea e1       	ldi	r30, 0x1A	; 26
    28a6:	fd e0       	ldi	r31, 0x0D	; 13
    28a8:	87 e0       	ldi	r24, 0x07	; 7
    28aa:	92 e0       	ldi	r25, 0x02	; 2
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
    28b0:	93 83       	std	Z+3, r25	; 0x03
    28b2:	82 83       	std	Z+2, r24	; 0x02
    28b4:	0f 91       	pop	r16
    28b6:	ef 90       	pop	r14
    28b8:	cf 90       	pop	r12
    28ba:	af 90       	pop	r10
    28bc:	9f 90       	pop	r9
    28be:	8f 90       	pop	r8
    28c0:	08 95       	ret

000028c2 <stdio_inputIsWaiting>:
    28c2:	cf 93       	push	r28
    28c4:	df 93       	push	r29
    28c6:	1f 92       	push	r1
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	19 82       	std	Y+1, r1	; 0x01
    28ce:	be 01       	movw	r22, r28
    28d0:	6f 5f       	subi	r22, 0xFF	; 255
    28d2:	7f 4f       	sbci	r23, 0xFF	; 255
    28d4:	80 91 00 0d 	lds	r24, 0x0D00	; 0x800d00 <_com_serial_instance>
    28d8:	90 91 01 0d 	lds	r25, 0x0D01	; 0x800d01 <_com_serial_instance+0x1>
    28dc:	ee d0       	rcall	.+476    	; 0x2aba <serial_emptyRxFifo>
    28de:	99 81       	ldd	r25, Y+1	; 0x01
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	89 27       	eor	r24, r25
    28e4:	0f 90       	pop	r0
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	08 95       	ret

000028ec <serial_create>:
    28ec:	2f 92       	push	r2
    28ee:	3f 92       	push	r3
    28f0:	4f 92       	push	r4
    28f2:	5f 92       	push	r5
    28f4:	6f 92       	push	r6
    28f6:	7f 92       	push	r7
    28f8:	8f 92       	push	r8
    28fa:	9f 92       	push	r9
    28fc:	af 92       	push	r10
    28fe:	cf 92       	push	r12
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	cf 93       	push	r28
    290a:	df 93       	push	r29
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	f8 2e       	mov	r15, r24
    2912:	2a 01       	movw	r4, r20
    2914:	3b 01       	movw	r6, r22
    2916:	88 e0       	ldi	r24, 0x08	; 8
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	47 d5       	rcall	.+2702   	; 0x33aa <malloc>
    291c:	8c 01       	movw	r16, r24
    291e:	8f 2d       	mov	r24, r15
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	fc 01       	movw	r30, r24
    2924:	ee 0f       	add	r30, r30
    2926:	ff 1f       	adc	r31, r31
    2928:	ee 5f       	subi	r30, 0xFE	; 254
    292a:	f2 4f       	sbci	r31, 0xF2	; 242
    292c:	11 83       	std	Z+1, r17	; 0x01
    292e:	00 83       	st	Z, r16
    2930:	01 15       	cp	r16, r1
    2932:	11 05       	cpc	r17, r1
    2934:	09 f4       	brne	.+2      	; 0x2938 <serial_create+0x4c>
    2936:	64 c0       	rjmp	.+200    	; 0x2a00 <serial_create+0x114>
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	fc 01       	movw	r30, r24
    293e:	eb 5e       	subi	r30, 0xEB	; 235
    2940:	fd 4f       	sbci	r31, 0xFD	; 253
    2942:	80 81       	ld	r24, Z
    2944:	91 81       	ldd	r25, Z+1	; 0x01
    2946:	d8 01       	movw	r26, r16
    2948:	8d 93       	st	X+, r24
    294a:	9c 93       	st	X, r25
    294c:	8c 2d       	mov	r24, r12
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	28 d5       	rcall	.+2640   	; 0x33aa <malloc>
    295a:	1c 01       	movw	r2, r24
    295c:	86 e0       	ldi	r24, 0x06	; 6
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	24 d5       	rcall	.+2632   	; 0x33aa <malloc>
    2962:	7c 01       	movw	r14, r24
    2964:	4c 2d       	mov	r20, r12
    2966:	b1 01       	movw	r22, r2
    2968:	12 d3       	rcall	.+1572   	; 0x2f8e <fifo_init>
    296a:	f8 01       	movw	r30, r16
    296c:	f5 82       	std	Z+5, r15	; 0x05
    296e:	e4 82       	std	Z+4, r14	; 0x04
    2970:	8a 2d       	mov	r24, r10
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	16 d5       	rcall	.+2604   	; 0x33aa <malloc>
    297e:	1c 01       	movw	r2, r24
    2980:	86 e0       	ldi	r24, 0x06	; 6
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	12 d5       	rcall	.+2596   	; 0x33aa <malloc>
    2986:	7c 01       	movw	r14, r24
    2988:	4a 2d       	mov	r20, r10
    298a:	b1 01       	movw	r22, r2
    298c:	00 d3       	rcall	.+1536   	; 0x2f8e <fifo_init>
    298e:	d8 01       	movw	r26, r16
    2990:	13 96       	adiw	r26, 0x03	; 3
    2992:	fc 92       	st	X, r15
    2994:	ee 92       	st	-X, r14
    2996:	12 97       	sbiw	r26, 0x02	; 2
    2998:	17 96       	adiw	r26, 0x07	; 7
    299a:	9c 92       	st	X, r9
    299c:	8e 92       	st	-X, r8
    299e:	16 97       	sbiw	r26, 0x06	; 6
    29a0:	ff b6       	in	r15, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	ed 91       	ld	r30, X+
    29a6:	fc 91       	ld	r31, X
    29a8:	11 97       	sbiw	r26, 0x01	; 1
    29aa:	36 97       	sbiw	r30, 0x06	; 6
    29ac:	80 81       	ld	r24, Z
    29ae:	82 60       	ori	r24, 0x02	; 2
    29b0:	80 83       	st	Z, r24
    29b2:	8d 90       	ld	r8, X+
    29b4:	9c 90       	ld	r9, X
    29b6:	c3 01       	movw	r24, r6
    29b8:	b2 01       	movw	r22, r4
    29ba:	fe d3       	rcall	.+2044   	; 0x31b8 <__floatunsisf>
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	51 e4       	ldi	r21, 0x41	; 65
    29c4:	87 d4       	rcall	.+2318   	; 0x32d4 <__mulsf3>
    29c6:	9b 01       	movw	r18, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	60 e0       	ldi	r22, 0x00	; 0
    29cc:	74 e2       	ldi	r23, 0x24	; 36
    29ce:	84 e7       	ldi	r24, 0x74	; 116
    29d0:	9b e4       	ldi	r25, 0x4B	; 75
    29d2:	5e d3       	rcall	.+1724   	; 0x3090 <__divsf3>
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	f4 d2       	rcall	.+1512   	; 0x2fc6 <__subsf3>
    29de:	c0 d3       	rcall	.+1920   	; 0x3160 <__fixunssfsi>
    29e0:	f4 01       	movw	r30, r8
    29e2:	32 97       	sbiw	r30, 0x02	; 2
    29e4:	60 83       	st	Z, r22
    29e6:	d8 01       	movw	r26, r16
    29e8:	ed 91       	ld	r30, X+
    29ea:	fc 91       	ld	r31, X
    29ec:	11 97       	sbiw	r26, 0x01	; 1
    29ee:	35 97       	sbiw	r30, 0x05	; 5
    29f0:	88 e9       	ldi	r24, 0x98	; 152
    29f2:	80 83       	st	Z, r24
    29f4:	ed 91       	ld	r30, X+
    29f6:	fc 91       	ld	r31, X
    29f8:	34 97       	sbiw	r30, 0x04	; 4
    29fa:	86 e0       	ldi	r24, 0x06	; 6
    29fc:	80 83       	st	Z, r24
    29fe:	ff be       	out	0x3f, r15	; 63
    2a00:	c8 01       	movw	r24, r16
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	1f 91       	pop	r17
    2a08:	0f 91       	pop	r16
    2a0a:	ff 90       	pop	r15
    2a0c:	ef 90       	pop	r14
    2a0e:	cf 90       	pop	r12
    2a10:	af 90       	pop	r10
    2a12:	9f 90       	pop	r9
    2a14:	8f 90       	pop	r8
    2a16:	7f 90       	pop	r7
    2a18:	6f 90       	pop	r6
    2a1a:	5f 90       	pop	r5
    2a1c:	4f 90       	pop	r4
    2a1e:	3f 90       	pop	r3
    2a20:	2f 90       	pop	r2
    2a22:	08 95       	ret

00002a24 <serial_sendByte>:
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
    2a28:	dc 01       	movw	r26, r24
    2a2a:	89 2b       	or	r24, r25
    2a2c:	01 f1       	breq	.+64     	; 0x2a6e <serial_sendByte+0x4a>
    2a2e:	12 96       	adiw	r26, 0x02	; 2
    2a30:	ed 91       	ld	r30, X+
    2a32:	fc 91       	ld	r31, X
    2a34:	13 97       	sbiw	r26, 0x03	; 3
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	82 81       	ldd	r24, Z+2	; 0x02
    2a3a:	25 81       	ldd	r18, Z+5	; 0x05
    2a3c:	98 1b       	sub	r25, r24
    2a3e:	92 23       	and	r25, r18
    2a40:	84 81       	ldd	r24, Z+4	; 0x04
    2a42:	98 17       	cp	r25, r24
    2a44:	b1 f0       	breq	.+44     	; 0x2a72 <serial_sendByte+0x4e>
    2a46:	83 81       	ldd	r24, Z+3	; 0x03
    2a48:	26 95       	lsr	r18
    2a4a:	28 23       	and	r18, r24
    2a4c:	c0 81       	ld	r28, Z
    2a4e:	d1 81       	ldd	r29, Z+1	; 0x01
    2a50:	c2 0f       	add	r28, r18
    2a52:	d1 1d       	adc	r29, r1
    2a54:	68 83       	st	Y, r22
    2a56:	8f 5f       	subi	r24, 0xFF	; 255
    2a58:	95 81       	ldd	r25, Z+5	; 0x05
    2a5a:	89 23       	and	r24, r25
    2a5c:	83 83       	std	Z+3, r24	; 0x03
    2a5e:	ed 91       	ld	r30, X+
    2a60:	fc 91       	ld	r31, X
    2a62:	35 97       	sbiw	r30, 0x05	; 5
    2a64:	80 81       	ld	r24, Z
    2a66:	80 62       	ori	r24, 0x20	; 32
    2a68:	80 83       	st	Z, r24
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	03 c0       	rjmp	.+6      	; 0x2a74 <serial_sendByte+0x50>
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	01 c0       	rjmp	.+2      	; 0x2a74 <serial_sendByte+0x50>
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	08 95       	ret

00002a7a <serial_getByte>:
    2a7a:	00 97       	sbiw	r24, 0x00	; 0
    2a7c:	d1 f0       	breq	.+52     	; 0x2ab2 <serial_getByte+0x38>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	14 96       	adiw	r26, 0x04	; 4
    2a82:	ed 91       	ld	r30, X+
    2a84:	fc 91       	ld	r31, X
    2a86:	15 97       	sbiw	r26, 0x05	; 5
    2a88:	93 81       	ldd	r25, Z+3	; 0x03
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	98 17       	cp	r25, r24
    2a8e:	99 f0       	breq	.+38     	; 0x2ab6 <serial_getByte+0x3c>
    2a90:	92 81       	ldd	r25, Z+2	; 0x02
    2a92:	85 81       	ldd	r24, Z+5	; 0x05
    2a94:	86 95       	lsr	r24
    2a96:	89 23       	and	r24, r25
    2a98:	a0 81       	ld	r26, Z
    2a9a:	b1 81       	ldd	r27, Z+1	; 0x01
    2a9c:	a8 0f       	add	r26, r24
    2a9e:	b1 1d       	adc	r27, r1
    2aa0:	8c 91       	ld	r24, X
    2aa2:	db 01       	movw	r26, r22
    2aa4:	8c 93       	st	X, r24
    2aa6:	9f 5f       	subi	r25, 0xFF	; 255
    2aa8:	85 81       	ldd	r24, Z+5	; 0x05
    2aaa:	98 23       	and	r25, r24
    2aac:	92 83       	std	Z+2, r25	; 0x02
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	08 95       	ret
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	08 95       	ret
    2ab6:	83 e0       	ldi	r24, 0x03	; 3
    2ab8:	08 95       	ret

00002aba <serial_emptyRxFifo>:
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	71 f0       	breq	.+28     	; 0x2ada <serial_emptyRxFifo+0x20>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	14 96       	adiw	r26, 0x04	; 4
    2ac2:	ed 91       	ld	r30, X+
    2ac4:	fc 91       	ld	r31, X
    2ac6:	15 97       	sbiw	r26, 0x05	; 5
    2ac8:	23 81       	ldd	r18, Z+3	; 0x03
    2aca:	92 81       	ldd	r25, Z+2	; 0x02
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	29 13       	cpse	r18, r25
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	fb 01       	movw	r30, r22
    2ad4:	80 83       	st	Z, r24
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	08 95       	ret
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	08 95       	ret

00002ade <__vector_25>:
    2ade:	1f 92       	push	r1
    2ae0:	0f 92       	push	r0
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	0f 92       	push	r0
    2ae6:	11 24       	eor	r1, r1
    2ae8:	0b b6       	in	r0, 0x3b	; 59
    2aea:	0f 92       	push	r0
    2aec:	2f 93       	push	r18
    2aee:	3f 93       	push	r19
    2af0:	4f 93       	push	r20
    2af2:	5f 93       	push	r21
    2af4:	6f 93       	push	r22
    2af6:	7f 93       	push	r23
    2af8:	8f 93       	push	r24
    2afa:	9f 93       	push	r25
    2afc:	af 93       	push	r26
    2afe:	bf 93       	push	r27
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	ef 93       	push	r30
    2b06:	ff 93       	push	r31
    2b08:	a0 91 02 0d 	lds	r26, 0x0D02	; 0x800d02 <_ser_handle>
    2b0c:	b0 91 03 0d 	lds	r27, 0x0D03	; 0x800d03 <_ser_handle+0x1>
    2b10:	10 97       	sbiw	r26, 0x00	; 0
    2b12:	11 f1       	breq	.+68     	; 0x2b58 <__vector_25+0x7a>
    2b14:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2b18:	14 96       	adiw	r26, 0x04	; 4
    2b1a:	ed 91       	ld	r30, X+
    2b1c:	fc 91       	ld	r31, X
    2b1e:	15 97       	sbiw	r26, 0x05	; 5
    2b20:	93 81       	ldd	r25, Z+3	; 0x03
    2b22:	82 81       	ldd	r24, Z+2	; 0x02
    2b24:	25 81       	ldd	r18, Z+5	; 0x05
    2b26:	98 1b       	sub	r25, r24
    2b28:	92 23       	and	r25, r18
    2b2a:	84 81       	ldd	r24, Z+4	; 0x04
    2b2c:	98 17       	cp	r25, r24
    2b2e:	61 f0       	breq	.+24     	; 0x2b48 <__vector_25+0x6a>
    2b30:	83 81       	ldd	r24, Z+3	; 0x03
    2b32:	26 95       	lsr	r18
    2b34:	28 23       	and	r18, r24
    2b36:	c0 81       	ld	r28, Z
    2b38:	d1 81       	ldd	r29, Z+1	; 0x01
    2b3a:	c2 0f       	add	r28, r18
    2b3c:	d1 1d       	adc	r29, r1
    2b3e:	68 83       	st	Y, r22
    2b40:	8f 5f       	subi	r24, 0xFF	; 255
    2b42:	95 81       	ldd	r25, Z+5	; 0x05
    2b44:	89 23       	and	r24, r25
    2b46:	83 83       	std	Z+3, r24	; 0x03
    2b48:	16 96       	adiw	r26, 0x06	; 6
    2b4a:	ed 91       	ld	r30, X+
    2b4c:	fc 91       	ld	r31, X
    2b4e:	17 97       	sbiw	r26, 0x07	; 7
    2b50:	30 97       	sbiw	r30, 0x00	; 0
    2b52:	11 f0       	breq	.+4      	; 0x2b58 <__vector_25+0x7a>
    2b54:	cd 01       	movw	r24, r26
    2b56:	19 95       	eicall
    2b58:	ff 91       	pop	r31
    2b5a:	ef 91       	pop	r30
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	bf 91       	pop	r27
    2b62:	af 91       	pop	r26
    2b64:	9f 91       	pop	r25
    2b66:	8f 91       	pop	r24
    2b68:	7f 91       	pop	r23
    2b6a:	6f 91       	pop	r22
    2b6c:	5f 91       	pop	r21
    2b6e:	4f 91       	pop	r20
    2b70:	3f 91       	pop	r19
    2b72:	2f 91       	pop	r18
    2b74:	0f 90       	pop	r0
    2b76:	0b be       	out	0x3b, r0	; 59
    2b78:	0f 90       	pop	r0
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	0f 90       	pop	r0
    2b7e:	1f 90       	pop	r1
    2b80:	18 95       	reti

00002b82 <__vector_26>:
    2b82:	1f 92       	push	r1
    2b84:	0f 92       	push	r0
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	0f 92       	push	r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	0b b6       	in	r0, 0x3b	; 59
    2b8e:	0f 92       	push	r0
    2b90:	2f 93       	push	r18
    2b92:	8f 93       	push	r24
    2b94:	9f 93       	push	r25
    2b96:	af 93       	push	r26
    2b98:	bf 93       	push	r27
    2b9a:	ef 93       	push	r30
    2b9c:	ff 93       	push	r31
    2b9e:	e0 91 02 0d 	lds	r30, 0x0D02	; 0x800d02 <_ser_handle>
    2ba2:	f0 91 03 0d 	lds	r31, 0x0D03	; 0x800d03 <_ser_handle+0x1>
    2ba6:	30 97       	sbiw	r30, 0x00	; 0
    2ba8:	b9 f0       	breq	.+46     	; 0x2bd8 <__vector_26+0x56>
    2baa:	02 80       	ldd	r0, Z+2	; 0x02
    2bac:	f3 81       	ldd	r31, Z+3	; 0x03
    2bae:	e0 2d       	mov	r30, r0
    2bb0:	93 81       	ldd	r25, Z+3	; 0x03
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	98 17       	cp	r25, r24
    2bb6:	b1 f0       	breq	.+44     	; 0x2be4 <__vector_26+0x62>
    2bb8:	92 81       	ldd	r25, Z+2	; 0x02
    2bba:	85 81       	ldd	r24, Z+5	; 0x05
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	26 95       	lsr	r18
    2bc0:	29 23       	and	r18, r25
    2bc2:	a0 81       	ld	r26, Z
    2bc4:	b1 81       	ldd	r27, Z+1	; 0x01
    2bc6:	a2 0f       	add	r26, r18
    2bc8:	b1 1d       	adc	r27, r1
    2bca:	2c 91       	ld	r18, X
    2bcc:	9f 5f       	subi	r25, 0xFF	; 255
    2bce:	89 23       	and	r24, r25
    2bd0:	82 83       	std	Z+2, r24	; 0x02
    2bd2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2bd6:	0b c0       	rjmp	.+22     	; 0x2bee <__vector_26+0x6c>
    2bd8:	e1 ec       	ldi	r30, 0xC1	; 193
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	8f 7d       	andi	r24, 0xDF	; 223
    2be0:	80 83       	st	Z, r24
    2be2:	05 c0       	rjmp	.+10     	; 0x2bee <__vector_26+0x6c>
    2be4:	e1 ec       	ldi	r30, 0xC1	; 193
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	8f 7d       	andi	r24, 0xDF	; 223
    2bec:	80 83       	st	Z, r24
    2bee:	ff 91       	pop	r31
    2bf0:	ef 91       	pop	r30
    2bf2:	bf 91       	pop	r27
    2bf4:	af 91       	pop	r26
    2bf6:	9f 91       	pop	r25
    2bf8:	8f 91       	pop	r24
    2bfa:	2f 91       	pop	r18
    2bfc:	0f 90       	pop	r0
    2bfe:	0b be       	out	0x3b, r0	; 59
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	0f 90       	pop	r0
    2c06:	1f 90       	pop	r1
    2c08:	18 95       	reti

00002c0a <__vector_36>:
    2c0a:	1f 92       	push	r1
    2c0c:	0f 92       	push	r0
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	0f 92       	push	r0
    2c12:	11 24       	eor	r1, r1
    2c14:	0b b6       	in	r0, 0x3b	; 59
    2c16:	0f 92       	push	r0
    2c18:	2f 93       	push	r18
    2c1a:	3f 93       	push	r19
    2c1c:	4f 93       	push	r20
    2c1e:	5f 93       	push	r21
    2c20:	6f 93       	push	r22
    2c22:	7f 93       	push	r23
    2c24:	8f 93       	push	r24
    2c26:	9f 93       	push	r25
    2c28:	af 93       	push	r26
    2c2a:	bf 93       	push	r27
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	ef 93       	push	r30
    2c32:	ff 93       	push	r31
    2c34:	a0 91 04 0d 	lds	r26, 0x0D04	; 0x800d04 <_ser_handle+0x2>
    2c38:	b0 91 05 0d 	lds	r27, 0x0D05	; 0x800d05 <_ser_handle+0x3>
    2c3c:	10 97       	sbiw	r26, 0x00	; 0
    2c3e:	11 f1       	breq	.+68     	; 0x2c84 <__vector_36+0x7a>
    2c40:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2c44:	14 96       	adiw	r26, 0x04	; 4
    2c46:	ed 91       	ld	r30, X+
    2c48:	fc 91       	ld	r31, X
    2c4a:	15 97       	sbiw	r26, 0x05	; 5
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	82 81       	ldd	r24, Z+2	; 0x02
    2c50:	25 81       	ldd	r18, Z+5	; 0x05
    2c52:	98 1b       	sub	r25, r24
    2c54:	92 23       	and	r25, r18
    2c56:	84 81       	ldd	r24, Z+4	; 0x04
    2c58:	98 17       	cp	r25, r24
    2c5a:	61 f0       	breq	.+24     	; 0x2c74 <__vector_36+0x6a>
    2c5c:	83 81       	ldd	r24, Z+3	; 0x03
    2c5e:	26 95       	lsr	r18
    2c60:	28 23       	and	r18, r24
    2c62:	c0 81       	ld	r28, Z
    2c64:	d1 81       	ldd	r29, Z+1	; 0x01
    2c66:	c2 0f       	add	r28, r18
    2c68:	d1 1d       	adc	r29, r1
    2c6a:	68 83       	st	Y, r22
    2c6c:	8f 5f       	subi	r24, 0xFF	; 255
    2c6e:	95 81       	ldd	r25, Z+5	; 0x05
    2c70:	89 23       	and	r24, r25
    2c72:	83 83       	std	Z+3, r24	; 0x03
    2c74:	16 96       	adiw	r26, 0x06	; 6
    2c76:	ed 91       	ld	r30, X+
    2c78:	fc 91       	ld	r31, X
    2c7a:	17 97       	sbiw	r26, 0x07	; 7
    2c7c:	30 97       	sbiw	r30, 0x00	; 0
    2c7e:	11 f0       	breq	.+4      	; 0x2c84 <__vector_36+0x7a>
    2c80:	cd 01       	movw	r24, r26
    2c82:	19 95       	eicall
    2c84:	ff 91       	pop	r31
    2c86:	ef 91       	pop	r30
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	bf 91       	pop	r27
    2c8e:	af 91       	pop	r26
    2c90:	9f 91       	pop	r25
    2c92:	8f 91       	pop	r24
    2c94:	7f 91       	pop	r23
    2c96:	6f 91       	pop	r22
    2c98:	5f 91       	pop	r21
    2c9a:	4f 91       	pop	r20
    2c9c:	3f 91       	pop	r19
    2c9e:	2f 91       	pop	r18
    2ca0:	0f 90       	pop	r0
    2ca2:	0b be       	out	0x3b, r0	; 59
    2ca4:	0f 90       	pop	r0
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	0f 90       	pop	r0
    2caa:	1f 90       	pop	r1
    2cac:	18 95       	reti

00002cae <__vector_37>:
    2cae:	1f 92       	push	r1
    2cb0:	0f 92       	push	r0
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	0f 92       	push	r0
    2cb6:	11 24       	eor	r1, r1
    2cb8:	0b b6       	in	r0, 0x3b	; 59
    2cba:	0f 92       	push	r0
    2cbc:	2f 93       	push	r18
    2cbe:	8f 93       	push	r24
    2cc0:	9f 93       	push	r25
    2cc2:	af 93       	push	r26
    2cc4:	bf 93       	push	r27
    2cc6:	ef 93       	push	r30
    2cc8:	ff 93       	push	r31
    2cca:	e0 91 04 0d 	lds	r30, 0x0D04	; 0x800d04 <_ser_handle+0x2>
    2cce:	f0 91 05 0d 	lds	r31, 0x0D05	; 0x800d05 <_ser_handle+0x3>
    2cd2:	30 97       	sbiw	r30, 0x00	; 0
    2cd4:	b9 f0       	breq	.+46     	; 0x2d04 <__vector_37+0x56>
    2cd6:	02 80       	ldd	r0, Z+2	; 0x02
    2cd8:	f3 81       	ldd	r31, Z+3	; 0x03
    2cda:	e0 2d       	mov	r30, r0
    2cdc:	93 81       	ldd	r25, Z+3	; 0x03
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	98 17       	cp	r25, r24
    2ce2:	b1 f0       	breq	.+44     	; 0x2d10 <__vector_37+0x62>
    2ce4:	92 81       	ldd	r25, Z+2	; 0x02
    2ce6:	85 81       	ldd	r24, Z+5	; 0x05
    2ce8:	28 2f       	mov	r18, r24
    2cea:	26 95       	lsr	r18
    2cec:	29 23       	and	r18, r25
    2cee:	a0 81       	ld	r26, Z
    2cf0:	b1 81       	ldd	r27, Z+1	; 0x01
    2cf2:	a2 0f       	add	r26, r18
    2cf4:	b1 1d       	adc	r27, r1
    2cf6:	2c 91       	ld	r18, X
    2cf8:	9f 5f       	subi	r25, 0xFF	; 255
    2cfa:	89 23       	and	r24, r25
    2cfc:	82 83       	std	Z+2, r24	; 0x02
    2cfe:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2d02:	0b c0       	rjmp	.+22     	; 0x2d1a <__vector_37+0x6c>
    2d04:	e9 ec       	ldi	r30, 0xC9	; 201
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	8f 7d       	andi	r24, 0xDF	; 223
    2d0c:	80 83       	st	Z, r24
    2d0e:	05 c0       	rjmp	.+10     	; 0x2d1a <__vector_37+0x6c>
    2d10:	e9 ec       	ldi	r30, 0xC9	; 201
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	80 81       	ld	r24, Z
    2d16:	8f 7d       	andi	r24, 0xDF	; 223
    2d18:	80 83       	st	Z, r24
    2d1a:	ff 91       	pop	r31
    2d1c:	ef 91       	pop	r30
    2d1e:	bf 91       	pop	r27
    2d20:	af 91       	pop	r26
    2d22:	9f 91       	pop	r25
    2d24:	8f 91       	pop	r24
    2d26:	2f 91       	pop	r18
    2d28:	0f 90       	pop	r0
    2d2a:	0b be       	out	0x3b, r0	; 59
    2d2c:	0f 90       	pop	r0
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	0f 90       	pop	r0
    2d32:	1f 90       	pop	r1
    2d34:	18 95       	reti

00002d36 <__vector_51>:
    2d36:	1f 92       	push	r1
    2d38:	0f 92       	push	r0
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	0f 92       	push	r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	0b b6       	in	r0, 0x3b	; 59
    2d42:	0f 92       	push	r0
    2d44:	2f 93       	push	r18
    2d46:	3f 93       	push	r19
    2d48:	4f 93       	push	r20
    2d4a:	5f 93       	push	r21
    2d4c:	6f 93       	push	r22
    2d4e:	7f 93       	push	r23
    2d50:	8f 93       	push	r24
    2d52:	9f 93       	push	r25
    2d54:	af 93       	push	r26
    2d56:	bf 93       	push	r27
    2d58:	cf 93       	push	r28
    2d5a:	df 93       	push	r29
    2d5c:	ef 93       	push	r30
    2d5e:	ff 93       	push	r31
    2d60:	a0 91 06 0d 	lds	r26, 0x0D06	; 0x800d06 <_ser_handle+0x4>
    2d64:	b0 91 07 0d 	lds	r27, 0x0D07	; 0x800d07 <_ser_handle+0x5>
    2d68:	10 97       	sbiw	r26, 0x00	; 0
    2d6a:	11 f1       	breq	.+68     	; 0x2db0 <__vector_51+0x7a>
    2d6c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2d70:	14 96       	adiw	r26, 0x04	; 4
    2d72:	ed 91       	ld	r30, X+
    2d74:	fc 91       	ld	r31, X
    2d76:	15 97       	sbiw	r26, 0x05	; 5
    2d78:	93 81       	ldd	r25, Z+3	; 0x03
    2d7a:	82 81       	ldd	r24, Z+2	; 0x02
    2d7c:	25 81       	ldd	r18, Z+5	; 0x05
    2d7e:	98 1b       	sub	r25, r24
    2d80:	92 23       	and	r25, r18
    2d82:	84 81       	ldd	r24, Z+4	; 0x04
    2d84:	98 17       	cp	r25, r24
    2d86:	61 f0       	breq	.+24     	; 0x2da0 <__vector_51+0x6a>
    2d88:	83 81       	ldd	r24, Z+3	; 0x03
    2d8a:	26 95       	lsr	r18
    2d8c:	28 23       	and	r18, r24
    2d8e:	c0 81       	ld	r28, Z
    2d90:	d1 81       	ldd	r29, Z+1	; 0x01
    2d92:	c2 0f       	add	r28, r18
    2d94:	d1 1d       	adc	r29, r1
    2d96:	68 83       	st	Y, r22
    2d98:	8f 5f       	subi	r24, 0xFF	; 255
    2d9a:	95 81       	ldd	r25, Z+5	; 0x05
    2d9c:	89 23       	and	r24, r25
    2d9e:	83 83       	std	Z+3, r24	; 0x03
    2da0:	16 96       	adiw	r26, 0x06	; 6
    2da2:	ed 91       	ld	r30, X+
    2da4:	fc 91       	ld	r31, X
    2da6:	17 97       	sbiw	r26, 0x07	; 7
    2da8:	30 97       	sbiw	r30, 0x00	; 0
    2daa:	11 f0       	breq	.+4      	; 0x2db0 <__vector_51+0x7a>
    2dac:	cd 01       	movw	r24, r26
    2dae:	19 95       	eicall
    2db0:	ff 91       	pop	r31
    2db2:	ef 91       	pop	r30
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	bf 91       	pop	r27
    2dba:	af 91       	pop	r26
    2dbc:	9f 91       	pop	r25
    2dbe:	8f 91       	pop	r24
    2dc0:	7f 91       	pop	r23
    2dc2:	6f 91       	pop	r22
    2dc4:	5f 91       	pop	r21
    2dc6:	4f 91       	pop	r20
    2dc8:	3f 91       	pop	r19
    2dca:	2f 91       	pop	r18
    2dcc:	0f 90       	pop	r0
    2dce:	0b be       	out	0x3b, r0	; 59
    2dd0:	0f 90       	pop	r0
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	0f 90       	pop	r0
    2dd6:	1f 90       	pop	r1
    2dd8:	18 95       	reti

00002dda <__vector_52>:
    2dda:	1f 92       	push	r1
    2ddc:	0f 92       	push	r0
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	0f 92       	push	r0
    2de2:	11 24       	eor	r1, r1
    2de4:	0b b6       	in	r0, 0x3b	; 59
    2de6:	0f 92       	push	r0
    2de8:	2f 93       	push	r18
    2dea:	8f 93       	push	r24
    2dec:	9f 93       	push	r25
    2dee:	af 93       	push	r26
    2df0:	bf 93       	push	r27
    2df2:	ef 93       	push	r30
    2df4:	ff 93       	push	r31
    2df6:	e0 91 06 0d 	lds	r30, 0x0D06	; 0x800d06 <_ser_handle+0x4>
    2dfa:	f0 91 07 0d 	lds	r31, 0x0D07	; 0x800d07 <_ser_handle+0x5>
    2dfe:	30 97       	sbiw	r30, 0x00	; 0
    2e00:	b9 f0       	breq	.+46     	; 0x2e30 <__vector_52+0x56>
    2e02:	02 80       	ldd	r0, Z+2	; 0x02
    2e04:	f3 81       	ldd	r31, Z+3	; 0x03
    2e06:	e0 2d       	mov	r30, r0
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	82 81       	ldd	r24, Z+2	; 0x02
    2e0c:	98 17       	cp	r25, r24
    2e0e:	b1 f0       	breq	.+44     	; 0x2e3c <__vector_52+0x62>
    2e10:	92 81       	ldd	r25, Z+2	; 0x02
    2e12:	85 81       	ldd	r24, Z+5	; 0x05
    2e14:	28 2f       	mov	r18, r24
    2e16:	26 95       	lsr	r18
    2e18:	29 23       	and	r18, r25
    2e1a:	a0 81       	ld	r26, Z
    2e1c:	b1 81       	ldd	r27, Z+1	; 0x01
    2e1e:	a2 0f       	add	r26, r18
    2e20:	b1 1d       	adc	r27, r1
    2e22:	2c 91       	ld	r18, X
    2e24:	9f 5f       	subi	r25, 0xFF	; 255
    2e26:	89 23       	and	r24, r25
    2e28:	82 83       	std	Z+2, r24	; 0x02
    2e2a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2e2e:	0b c0       	rjmp	.+22     	; 0x2e46 <__vector_52+0x6c>
    2e30:	e1 ed       	ldi	r30, 0xD1	; 209
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	8f 7d       	andi	r24, 0xDF	; 223
    2e38:	80 83       	st	Z, r24
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <__vector_52+0x6c>
    2e3c:	e1 ed       	ldi	r30, 0xD1	; 209
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	8f 7d       	andi	r24, 0xDF	; 223
    2e44:	80 83       	st	Z, r24
    2e46:	ff 91       	pop	r31
    2e48:	ef 91       	pop	r30
    2e4a:	bf 91       	pop	r27
    2e4c:	af 91       	pop	r26
    2e4e:	9f 91       	pop	r25
    2e50:	8f 91       	pop	r24
    2e52:	2f 91       	pop	r18
    2e54:	0f 90       	pop	r0
    2e56:	0b be       	out	0x3b, r0	; 59
    2e58:	0f 90       	pop	r0
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	0f 90       	pop	r0
    2e5e:	1f 90       	pop	r1
    2e60:	18 95       	reti

00002e62 <__vector_54>:
    2e62:	1f 92       	push	r1
    2e64:	0f 92       	push	r0
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	0f 92       	push	r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	0b b6       	in	r0, 0x3b	; 59
    2e6e:	0f 92       	push	r0
    2e70:	2f 93       	push	r18
    2e72:	3f 93       	push	r19
    2e74:	4f 93       	push	r20
    2e76:	5f 93       	push	r21
    2e78:	6f 93       	push	r22
    2e7a:	7f 93       	push	r23
    2e7c:	8f 93       	push	r24
    2e7e:	9f 93       	push	r25
    2e80:	af 93       	push	r26
    2e82:	bf 93       	push	r27
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	ef 93       	push	r30
    2e8a:	ff 93       	push	r31
    2e8c:	a0 91 08 0d 	lds	r26, 0x0D08	; 0x800d08 <_ser_handle+0x6>
    2e90:	b0 91 09 0d 	lds	r27, 0x0D09	; 0x800d09 <_ser_handle+0x7>
    2e94:	10 97       	sbiw	r26, 0x00	; 0
    2e96:	11 f1       	breq	.+68     	; 0x2edc <__vector_54+0x7a>
    2e98:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2e9c:	14 96       	adiw	r26, 0x04	; 4
    2e9e:	ed 91       	ld	r30, X+
    2ea0:	fc 91       	ld	r31, X
    2ea2:	15 97       	sbiw	r26, 0x05	; 5
    2ea4:	93 81       	ldd	r25, Z+3	; 0x03
    2ea6:	82 81       	ldd	r24, Z+2	; 0x02
    2ea8:	25 81       	ldd	r18, Z+5	; 0x05
    2eaa:	98 1b       	sub	r25, r24
    2eac:	92 23       	and	r25, r18
    2eae:	84 81       	ldd	r24, Z+4	; 0x04
    2eb0:	98 17       	cp	r25, r24
    2eb2:	61 f0       	breq	.+24     	; 0x2ecc <__vector_54+0x6a>
    2eb4:	83 81       	ldd	r24, Z+3	; 0x03
    2eb6:	26 95       	lsr	r18
    2eb8:	28 23       	and	r18, r24
    2eba:	c0 81       	ld	r28, Z
    2ebc:	d1 81       	ldd	r29, Z+1	; 0x01
    2ebe:	c2 0f       	add	r28, r18
    2ec0:	d1 1d       	adc	r29, r1
    2ec2:	68 83       	st	Y, r22
    2ec4:	8f 5f       	subi	r24, 0xFF	; 255
    2ec6:	95 81       	ldd	r25, Z+5	; 0x05
    2ec8:	89 23       	and	r24, r25
    2eca:	83 83       	std	Z+3, r24	; 0x03
    2ecc:	16 96       	adiw	r26, 0x06	; 6
    2ece:	ed 91       	ld	r30, X+
    2ed0:	fc 91       	ld	r31, X
    2ed2:	17 97       	sbiw	r26, 0x07	; 7
    2ed4:	30 97       	sbiw	r30, 0x00	; 0
    2ed6:	11 f0       	breq	.+4      	; 0x2edc <__vector_54+0x7a>
    2ed8:	cd 01       	movw	r24, r26
    2eda:	19 95       	eicall
    2edc:	ff 91       	pop	r31
    2ede:	ef 91       	pop	r30
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	bf 91       	pop	r27
    2ee6:	af 91       	pop	r26
    2ee8:	9f 91       	pop	r25
    2eea:	8f 91       	pop	r24
    2eec:	7f 91       	pop	r23
    2eee:	6f 91       	pop	r22
    2ef0:	5f 91       	pop	r21
    2ef2:	4f 91       	pop	r20
    2ef4:	3f 91       	pop	r19
    2ef6:	2f 91       	pop	r18
    2ef8:	0f 90       	pop	r0
    2efa:	0b be       	out	0x3b, r0	; 59
    2efc:	0f 90       	pop	r0
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	0f 90       	pop	r0
    2f02:	1f 90       	pop	r1
    2f04:	18 95       	reti

00002f06 <__vector_55>:
    2f06:	1f 92       	push	r1
    2f08:	0f 92       	push	r0
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	0f 92       	push	r0
    2f0e:	11 24       	eor	r1, r1
    2f10:	0b b6       	in	r0, 0x3b	; 59
    2f12:	0f 92       	push	r0
    2f14:	2f 93       	push	r18
    2f16:	8f 93       	push	r24
    2f18:	9f 93       	push	r25
    2f1a:	af 93       	push	r26
    2f1c:	bf 93       	push	r27
    2f1e:	ef 93       	push	r30
    2f20:	ff 93       	push	r31
    2f22:	e0 91 08 0d 	lds	r30, 0x0D08	; 0x800d08 <_ser_handle+0x6>
    2f26:	f0 91 09 0d 	lds	r31, 0x0D09	; 0x800d09 <_ser_handle+0x7>
    2f2a:	30 97       	sbiw	r30, 0x00	; 0
    2f2c:	b9 f0       	breq	.+46     	; 0x2f5c <__vector_55+0x56>
    2f2e:	02 80       	ldd	r0, Z+2	; 0x02
    2f30:	f3 81       	ldd	r31, Z+3	; 0x03
    2f32:	e0 2d       	mov	r30, r0
    2f34:	93 81       	ldd	r25, Z+3	; 0x03
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	98 17       	cp	r25, r24
    2f3a:	b1 f0       	breq	.+44     	; 0x2f68 <__vector_55+0x62>
    2f3c:	92 81       	ldd	r25, Z+2	; 0x02
    2f3e:	85 81       	ldd	r24, Z+5	; 0x05
    2f40:	28 2f       	mov	r18, r24
    2f42:	26 95       	lsr	r18
    2f44:	29 23       	and	r18, r25
    2f46:	a0 81       	ld	r26, Z
    2f48:	b1 81       	ldd	r27, Z+1	; 0x01
    2f4a:	a2 0f       	add	r26, r18
    2f4c:	b1 1d       	adc	r27, r1
    2f4e:	2c 91       	ld	r18, X
    2f50:	9f 5f       	subi	r25, 0xFF	; 255
    2f52:	89 23       	and	r24, r25
    2f54:	82 83       	std	Z+2, r24	; 0x02
    2f56:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    2f5a:	0b c0       	rjmp	.+22     	; 0x2f72 <__vector_55+0x6c>
    2f5c:	e1 e3       	ldi	r30, 0x31	; 49
    2f5e:	f1 e0       	ldi	r31, 0x01	; 1
    2f60:	80 81       	ld	r24, Z
    2f62:	8f 7d       	andi	r24, 0xDF	; 223
    2f64:	80 83       	st	Z, r24
    2f66:	05 c0       	rjmp	.+10     	; 0x2f72 <__vector_55+0x6c>
    2f68:	e1 e3       	ldi	r30, 0x31	; 49
    2f6a:	f1 e0       	ldi	r31, 0x01	; 1
    2f6c:	80 81       	ld	r24, Z
    2f6e:	8f 7d       	andi	r24, 0xDF	; 223
    2f70:	80 83       	st	Z, r24
    2f72:	ff 91       	pop	r31
    2f74:	ef 91       	pop	r30
    2f76:	bf 91       	pop	r27
    2f78:	af 91       	pop	r26
    2f7a:	9f 91       	pop	r25
    2f7c:	8f 91       	pop	r24
    2f7e:	2f 91       	pop	r18
    2f80:	0f 90       	pop	r0
    2f82:	0b be       	out	0x3b, r0	; 59
    2f84:	0f 90       	pop	r0
    2f86:	0f be       	out	0x3f, r0	; 63
    2f88:	0f 90       	pop	r0
    2f8a:	1f 90       	pop	r1
    2f8c:	18 95       	reti

00002f8e <fifo_init>:
    2f8e:	fc 01       	movw	r30, r24
    2f90:	41 11       	cpse	r20, r1
    2f92:	01 c0       	rjmp	.+2      	; 0x2f96 <fifo_init+0x8>
    2f94:	2b d3       	rcall	.+1622   	; 0x35ec <abort>
    2f96:	84 2f       	mov	r24, r20
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9c 01       	movw	r18, r24
    2f9c:	21 50       	subi	r18, 0x01	; 1
    2f9e:	31 09       	sbc	r19, r1
    2fa0:	82 23       	and	r24, r18
    2fa2:	93 23       	and	r25, r19
    2fa4:	89 2b       	or	r24, r25
    2fa6:	09 f0       	breq	.+2      	; 0x2faa <fifo_init+0x1c>
    2fa8:	21 d3       	rcall	.+1602   	; 0x35ec <abort>
    2faa:	41 38       	cpi	r20, 0x81	; 129
    2fac:	08 f0       	brcs	.+2      	; 0x2fb0 <fifo_init+0x22>
    2fae:	1e d3       	rcall	.+1596   	; 0x35ec <abort>
    2fb0:	12 82       	std	Z+2, r1	; 0x02
    2fb2:	13 82       	std	Z+3, r1	; 0x03
    2fb4:	44 83       	std	Z+4, r20	; 0x04
    2fb6:	44 0f       	add	r20, r20
    2fb8:	41 50       	subi	r20, 0x01	; 1
    2fba:	45 83       	std	Z+5, r20	; 0x05
    2fbc:	71 83       	std	Z+1, r23	; 0x01
    2fbe:	60 83       	st	Z, r22
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	08 95       	ret

00002fc6 <__subsf3>:
    2fc6:	50 58       	subi	r21, 0x80	; 128

00002fc8 <__addsf3>:
    2fc8:	bb 27       	eor	r27, r27
    2fca:	aa 27       	eor	r26, r26
    2fcc:	0e d0       	rcall	.+28     	; 0x2fea <__addsf3x>
    2fce:	48 c1       	rjmp	.+656    	; 0x3260 <__fp_round>
    2fd0:	39 d1       	rcall	.+626    	; 0x3244 <__fp_pscA>
    2fd2:	30 f0       	brcs	.+12     	; 0x2fe0 <__addsf3+0x18>
    2fd4:	3e d1       	rcall	.+636    	; 0x3252 <__fp_pscB>
    2fd6:	20 f0       	brcs	.+8      	; 0x2fe0 <__addsf3+0x18>
    2fd8:	31 f4       	brne	.+12     	; 0x2fe6 <__addsf3+0x1e>
    2fda:	9f 3f       	cpi	r25, 0xFF	; 255
    2fdc:	11 f4       	brne	.+4      	; 0x2fe2 <__addsf3+0x1a>
    2fde:	1e f4       	brtc	.+6      	; 0x2fe6 <__addsf3+0x1e>
    2fe0:	2e c1       	rjmp	.+604    	; 0x323e <__fp_nan>
    2fe2:	0e f4       	brtc	.+2      	; 0x2fe6 <__addsf3+0x1e>
    2fe4:	e0 95       	com	r30
    2fe6:	e7 fb       	bst	r30, 7
    2fe8:	24 c1       	rjmp	.+584    	; 0x3232 <__fp_inf>

00002fea <__addsf3x>:
    2fea:	e9 2f       	mov	r30, r25
    2fec:	4a d1       	rcall	.+660    	; 0x3282 <__fp_split3>
    2fee:	80 f3       	brcs	.-32     	; 0x2fd0 <__addsf3+0x8>
    2ff0:	ba 17       	cp	r27, r26
    2ff2:	62 07       	cpc	r22, r18
    2ff4:	73 07       	cpc	r23, r19
    2ff6:	84 07       	cpc	r24, r20
    2ff8:	95 07       	cpc	r25, r21
    2ffa:	18 f0       	brcs	.+6      	; 0x3002 <__addsf3x+0x18>
    2ffc:	71 f4       	brne	.+28     	; 0x301a <__addsf3x+0x30>
    2ffe:	9e f5       	brtc	.+102    	; 0x3066 <__addsf3x+0x7c>
    3000:	62 c1       	rjmp	.+708    	; 0x32c6 <__fp_zero>
    3002:	0e f4       	brtc	.+2      	; 0x3006 <__addsf3x+0x1c>
    3004:	e0 95       	com	r30
    3006:	0b 2e       	mov	r0, r27
    3008:	ba 2f       	mov	r27, r26
    300a:	a0 2d       	mov	r26, r0
    300c:	0b 01       	movw	r0, r22
    300e:	b9 01       	movw	r22, r18
    3010:	90 01       	movw	r18, r0
    3012:	0c 01       	movw	r0, r24
    3014:	ca 01       	movw	r24, r20
    3016:	a0 01       	movw	r20, r0
    3018:	11 24       	eor	r1, r1
    301a:	ff 27       	eor	r31, r31
    301c:	59 1b       	sub	r21, r25
    301e:	99 f0       	breq	.+38     	; 0x3046 <__addsf3x+0x5c>
    3020:	59 3f       	cpi	r21, 0xF9	; 249
    3022:	50 f4       	brcc	.+20     	; 0x3038 <__addsf3x+0x4e>
    3024:	50 3e       	cpi	r21, 0xE0	; 224
    3026:	68 f1       	brcs	.+90     	; 0x3082 <__addsf3x+0x98>
    3028:	1a 16       	cp	r1, r26
    302a:	f0 40       	sbci	r31, 0x00	; 0
    302c:	a2 2f       	mov	r26, r18
    302e:	23 2f       	mov	r18, r19
    3030:	34 2f       	mov	r19, r20
    3032:	44 27       	eor	r20, r20
    3034:	58 5f       	subi	r21, 0xF8	; 248
    3036:	f3 cf       	rjmp	.-26     	; 0x301e <__addsf3x+0x34>
    3038:	46 95       	lsr	r20
    303a:	37 95       	ror	r19
    303c:	27 95       	ror	r18
    303e:	a7 95       	ror	r26
    3040:	f0 40       	sbci	r31, 0x00	; 0
    3042:	53 95       	inc	r21
    3044:	c9 f7       	brne	.-14     	; 0x3038 <__addsf3x+0x4e>
    3046:	7e f4       	brtc	.+30     	; 0x3066 <__addsf3x+0x7c>
    3048:	1f 16       	cp	r1, r31
    304a:	ba 0b       	sbc	r27, r26
    304c:	62 0b       	sbc	r22, r18
    304e:	73 0b       	sbc	r23, r19
    3050:	84 0b       	sbc	r24, r20
    3052:	ba f0       	brmi	.+46     	; 0x3082 <__addsf3x+0x98>
    3054:	91 50       	subi	r25, 0x01	; 1
    3056:	a1 f0       	breq	.+40     	; 0x3080 <__addsf3x+0x96>
    3058:	ff 0f       	add	r31, r31
    305a:	bb 1f       	adc	r27, r27
    305c:	66 1f       	adc	r22, r22
    305e:	77 1f       	adc	r23, r23
    3060:	88 1f       	adc	r24, r24
    3062:	c2 f7       	brpl	.-16     	; 0x3054 <__addsf3x+0x6a>
    3064:	0e c0       	rjmp	.+28     	; 0x3082 <__addsf3x+0x98>
    3066:	ba 0f       	add	r27, r26
    3068:	62 1f       	adc	r22, r18
    306a:	73 1f       	adc	r23, r19
    306c:	84 1f       	adc	r24, r20
    306e:	48 f4       	brcc	.+18     	; 0x3082 <__addsf3x+0x98>
    3070:	87 95       	ror	r24
    3072:	77 95       	ror	r23
    3074:	67 95       	ror	r22
    3076:	b7 95       	ror	r27
    3078:	f7 95       	ror	r31
    307a:	9e 3f       	cpi	r25, 0xFE	; 254
    307c:	08 f0       	brcs	.+2      	; 0x3080 <__addsf3x+0x96>
    307e:	b3 cf       	rjmp	.-154    	; 0x2fe6 <__addsf3+0x1e>
    3080:	93 95       	inc	r25
    3082:	88 0f       	add	r24, r24
    3084:	08 f0       	brcs	.+2      	; 0x3088 <__addsf3x+0x9e>
    3086:	99 27       	eor	r25, r25
    3088:	ee 0f       	add	r30, r30
    308a:	97 95       	ror	r25
    308c:	87 95       	ror	r24
    308e:	08 95       	ret

00003090 <__divsf3>:
    3090:	0c d0       	rcall	.+24     	; 0x30aa <__divsf3x>
    3092:	e6 c0       	rjmp	.+460    	; 0x3260 <__fp_round>
    3094:	de d0       	rcall	.+444    	; 0x3252 <__fp_pscB>
    3096:	40 f0       	brcs	.+16     	; 0x30a8 <__divsf3+0x18>
    3098:	d5 d0       	rcall	.+426    	; 0x3244 <__fp_pscA>
    309a:	30 f0       	brcs	.+12     	; 0x30a8 <__divsf3+0x18>
    309c:	21 f4       	brne	.+8      	; 0x30a6 <__divsf3+0x16>
    309e:	5f 3f       	cpi	r21, 0xFF	; 255
    30a0:	19 f0       	breq	.+6      	; 0x30a8 <__divsf3+0x18>
    30a2:	c7 c0       	rjmp	.+398    	; 0x3232 <__fp_inf>
    30a4:	51 11       	cpse	r21, r1
    30a6:	10 c1       	rjmp	.+544    	; 0x32c8 <__fp_szero>
    30a8:	ca c0       	rjmp	.+404    	; 0x323e <__fp_nan>

000030aa <__divsf3x>:
    30aa:	eb d0       	rcall	.+470    	; 0x3282 <__fp_split3>
    30ac:	98 f3       	brcs	.-26     	; 0x3094 <__divsf3+0x4>

000030ae <__divsf3_pse>:
    30ae:	99 23       	and	r25, r25
    30b0:	c9 f3       	breq	.-14     	; 0x30a4 <__divsf3+0x14>
    30b2:	55 23       	and	r21, r21
    30b4:	b1 f3       	breq	.-20     	; 0x30a2 <__divsf3+0x12>
    30b6:	95 1b       	sub	r25, r21
    30b8:	55 0b       	sbc	r21, r21
    30ba:	bb 27       	eor	r27, r27
    30bc:	aa 27       	eor	r26, r26
    30be:	62 17       	cp	r22, r18
    30c0:	73 07       	cpc	r23, r19
    30c2:	84 07       	cpc	r24, r20
    30c4:	38 f0       	brcs	.+14     	; 0x30d4 <__divsf3_pse+0x26>
    30c6:	9f 5f       	subi	r25, 0xFF	; 255
    30c8:	5f 4f       	sbci	r21, 0xFF	; 255
    30ca:	22 0f       	add	r18, r18
    30cc:	33 1f       	adc	r19, r19
    30ce:	44 1f       	adc	r20, r20
    30d0:	aa 1f       	adc	r26, r26
    30d2:	a9 f3       	breq	.-22     	; 0x30be <__divsf3_pse+0x10>
    30d4:	33 d0       	rcall	.+102    	; 0x313c <__divsf3_pse+0x8e>
    30d6:	0e 2e       	mov	r0, r30
    30d8:	3a f0       	brmi	.+14     	; 0x30e8 <__divsf3_pse+0x3a>
    30da:	e0 e8       	ldi	r30, 0x80	; 128
    30dc:	30 d0       	rcall	.+96     	; 0x313e <__divsf3_pse+0x90>
    30de:	91 50       	subi	r25, 0x01	; 1
    30e0:	50 40       	sbci	r21, 0x00	; 0
    30e2:	e6 95       	lsr	r30
    30e4:	00 1c       	adc	r0, r0
    30e6:	ca f7       	brpl	.-14     	; 0x30da <__divsf3_pse+0x2c>
    30e8:	29 d0       	rcall	.+82     	; 0x313c <__divsf3_pse+0x8e>
    30ea:	fe 2f       	mov	r31, r30
    30ec:	27 d0       	rcall	.+78     	; 0x313c <__divsf3_pse+0x8e>
    30ee:	66 0f       	add	r22, r22
    30f0:	77 1f       	adc	r23, r23
    30f2:	88 1f       	adc	r24, r24
    30f4:	bb 1f       	adc	r27, r27
    30f6:	26 17       	cp	r18, r22
    30f8:	37 07       	cpc	r19, r23
    30fa:	48 07       	cpc	r20, r24
    30fc:	ab 07       	cpc	r26, r27
    30fe:	b0 e8       	ldi	r27, 0x80	; 128
    3100:	09 f0       	breq	.+2      	; 0x3104 <__divsf3_pse+0x56>
    3102:	bb 0b       	sbc	r27, r27
    3104:	80 2d       	mov	r24, r0
    3106:	bf 01       	movw	r22, r30
    3108:	ff 27       	eor	r31, r31
    310a:	93 58       	subi	r25, 0x83	; 131
    310c:	5f 4f       	sbci	r21, 0xFF	; 255
    310e:	2a f0       	brmi	.+10     	; 0x311a <__divsf3_pse+0x6c>
    3110:	9e 3f       	cpi	r25, 0xFE	; 254
    3112:	51 05       	cpc	r21, r1
    3114:	68 f0       	brcs	.+26     	; 0x3130 <__divsf3_pse+0x82>
    3116:	8d c0       	rjmp	.+282    	; 0x3232 <__fp_inf>
    3118:	d7 c0       	rjmp	.+430    	; 0x32c8 <__fp_szero>
    311a:	5f 3f       	cpi	r21, 0xFF	; 255
    311c:	ec f3       	brlt	.-6      	; 0x3118 <__divsf3_pse+0x6a>
    311e:	98 3e       	cpi	r25, 0xE8	; 232
    3120:	dc f3       	brlt	.-10     	; 0x3118 <__divsf3_pse+0x6a>
    3122:	86 95       	lsr	r24
    3124:	77 95       	ror	r23
    3126:	67 95       	ror	r22
    3128:	b7 95       	ror	r27
    312a:	f7 95       	ror	r31
    312c:	9f 5f       	subi	r25, 0xFF	; 255
    312e:	c9 f7       	brne	.-14     	; 0x3122 <__divsf3_pse+0x74>
    3130:	88 0f       	add	r24, r24
    3132:	91 1d       	adc	r25, r1
    3134:	96 95       	lsr	r25
    3136:	87 95       	ror	r24
    3138:	97 f9       	bld	r25, 7
    313a:	08 95       	ret
    313c:	e1 e0       	ldi	r30, 0x01	; 1
    313e:	66 0f       	add	r22, r22
    3140:	77 1f       	adc	r23, r23
    3142:	88 1f       	adc	r24, r24
    3144:	bb 1f       	adc	r27, r27
    3146:	62 17       	cp	r22, r18
    3148:	73 07       	cpc	r23, r19
    314a:	84 07       	cpc	r24, r20
    314c:	ba 07       	cpc	r27, r26
    314e:	20 f0       	brcs	.+8      	; 0x3158 <__divsf3_pse+0xaa>
    3150:	62 1b       	sub	r22, r18
    3152:	73 0b       	sbc	r23, r19
    3154:	84 0b       	sbc	r24, r20
    3156:	ba 0b       	sbc	r27, r26
    3158:	ee 1f       	adc	r30, r30
    315a:	88 f7       	brcc	.-30     	; 0x313e <__divsf3_pse+0x90>
    315c:	e0 95       	com	r30
    315e:	08 95       	ret

00003160 <__fixunssfsi>:
    3160:	98 d0       	rcall	.+304    	; 0x3292 <__fp_splitA>
    3162:	88 f0       	brcs	.+34     	; 0x3186 <__fixunssfsi+0x26>
    3164:	9f 57       	subi	r25, 0x7F	; 127
    3166:	90 f0       	brcs	.+36     	; 0x318c <__fixunssfsi+0x2c>
    3168:	b9 2f       	mov	r27, r25
    316a:	99 27       	eor	r25, r25
    316c:	b7 51       	subi	r27, 0x17	; 23
    316e:	a0 f0       	brcs	.+40     	; 0x3198 <__fixunssfsi+0x38>
    3170:	d1 f0       	breq	.+52     	; 0x31a6 <__fixunssfsi+0x46>
    3172:	66 0f       	add	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	88 1f       	adc	r24, r24
    3178:	99 1f       	adc	r25, r25
    317a:	1a f0       	brmi	.+6      	; 0x3182 <__fixunssfsi+0x22>
    317c:	ba 95       	dec	r27
    317e:	c9 f7       	brne	.-14     	; 0x3172 <__fixunssfsi+0x12>
    3180:	12 c0       	rjmp	.+36     	; 0x31a6 <__fixunssfsi+0x46>
    3182:	b1 30       	cpi	r27, 0x01	; 1
    3184:	81 f0       	breq	.+32     	; 0x31a6 <__fixunssfsi+0x46>
    3186:	9f d0       	rcall	.+318    	; 0x32c6 <__fp_zero>
    3188:	b1 e0       	ldi	r27, 0x01	; 1
    318a:	08 95       	ret
    318c:	9c c0       	rjmp	.+312    	; 0x32c6 <__fp_zero>
    318e:	67 2f       	mov	r22, r23
    3190:	78 2f       	mov	r23, r24
    3192:	88 27       	eor	r24, r24
    3194:	b8 5f       	subi	r27, 0xF8	; 248
    3196:	39 f0       	breq	.+14     	; 0x31a6 <__fixunssfsi+0x46>
    3198:	b9 3f       	cpi	r27, 0xF9	; 249
    319a:	cc f3       	brlt	.-14     	; 0x318e <__fixunssfsi+0x2e>
    319c:	86 95       	lsr	r24
    319e:	77 95       	ror	r23
    31a0:	67 95       	ror	r22
    31a2:	b3 95       	inc	r27
    31a4:	d9 f7       	brne	.-10     	; 0x319c <__fixunssfsi+0x3c>
    31a6:	3e f4       	brtc	.+14     	; 0x31b6 <__fixunssfsi+0x56>
    31a8:	90 95       	com	r25
    31aa:	80 95       	com	r24
    31ac:	70 95       	com	r23
    31ae:	61 95       	neg	r22
    31b0:	7f 4f       	sbci	r23, 0xFF	; 255
    31b2:	8f 4f       	sbci	r24, 0xFF	; 255
    31b4:	9f 4f       	sbci	r25, 0xFF	; 255
    31b6:	08 95       	ret

000031b8 <__floatunsisf>:
    31b8:	e8 94       	clt
    31ba:	09 c0       	rjmp	.+18     	; 0x31ce <__floatsisf+0x12>

000031bc <__floatsisf>:
    31bc:	97 fb       	bst	r25, 7
    31be:	3e f4       	brtc	.+14     	; 0x31ce <__floatsisf+0x12>
    31c0:	90 95       	com	r25
    31c2:	80 95       	com	r24
    31c4:	70 95       	com	r23
    31c6:	61 95       	neg	r22
    31c8:	7f 4f       	sbci	r23, 0xFF	; 255
    31ca:	8f 4f       	sbci	r24, 0xFF	; 255
    31cc:	9f 4f       	sbci	r25, 0xFF	; 255
    31ce:	99 23       	and	r25, r25
    31d0:	a9 f0       	breq	.+42     	; 0x31fc <__floatsisf+0x40>
    31d2:	f9 2f       	mov	r31, r25
    31d4:	96 e9       	ldi	r25, 0x96	; 150
    31d6:	bb 27       	eor	r27, r27
    31d8:	93 95       	inc	r25
    31da:	f6 95       	lsr	r31
    31dc:	87 95       	ror	r24
    31de:	77 95       	ror	r23
    31e0:	67 95       	ror	r22
    31e2:	b7 95       	ror	r27
    31e4:	f1 11       	cpse	r31, r1
    31e6:	f8 cf       	rjmp	.-16     	; 0x31d8 <__floatsisf+0x1c>
    31e8:	fa f4       	brpl	.+62     	; 0x3228 <__floatsisf+0x6c>
    31ea:	bb 0f       	add	r27, r27
    31ec:	11 f4       	brne	.+4      	; 0x31f2 <__floatsisf+0x36>
    31ee:	60 ff       	sbrs	r22, 0
    31f0:	1b c0       	rjmp	.+54     	; 0x3228 <__floatsisf+0x6c>
    31f2:	6f 5f       	subi	r22, 0xFF	; 255
    31f4:	7f 4f       	sbci	r23, 0xFF	; 255
    31f6:	8f 4f       	sbci	r24, 0xFF	; 255
    31f8:	9f 4f       	sbci	r25, 0xFF	; 255
    31fa:	16 c0       	rjmp	.+44     	; 0x3228 <__floatsisf+0x6c>
    31fc:	88 23       	and	r24, r24
    31fe:	11 f0       	breq	.+4      	; 0x3204 <__floatsisf+0x48>
    3200:	96 e9       	ldi	r25, 0x96	; 150
    3202:	11 c0       	rjmp	.+34     	; 0x3226 <__floatsisf+0x6a>
    3204:	77 23       	and	r23, r23
    3206:	21 f0       	breq	.+8      	; 0x3210 <__floatsisf+0x54>
    3208:	9e e8       	ldi	r25, 0x8E	; 142
    320a:	87 2f       	mov	r24, r23
    320c:	76 2f       	mov	r23, r22
    320e:	05 c0       	rjmp	.+10     	; 0x321a <__floatsisf+0x5e>
    3210:	66 23       	and	r22, r22
    3212:	71 f0       	breq	.+28     	; 0x3230 <__floatsisf+0x74>
    3214:	96 e8       	ldi	r25, 0x86	; 134
    3216:	86 2f       	mov	r24, r22
    3218:	70 e0       	ldi	r23, 0x00	; 0
    321a:	60 e0       	ldi	r22, 0x00	; 0
    321c:	2a f0       	brmi	.+10     	; 0x3228 <__floatsisf+0x6c>
    321e:	9a 95       	dec	r25
    3220:	66 0f       	add	r22, r22
    3222:	77 1f       	adc	r23, r23
    3224:	88 1f       	adc	r24, r24
    3226:	da f7       	brpl	.-10     	; 0x321e <__floatsisf+0x62>
    3228:	88 0f       	add	r24, r24
    322a:	96 95       	lsr	r25
    322c:	87 95       	ror	r24
    322e:	97 f9       	bld	r25, 7
    3230:	08 95       	ret

00003232 <__fp_inf>:
    3232:	97 f9       	bld	r25, 7
    3234:	9f 67       	ori	r25, 0x7F	; 127
    3236:	80 e8       	ldi	r24, 0x80	; 128
    3238:	70 e0       	ldi	r23, 0x00	; 0
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	08 95       	ret

0000323e <__fp_nan>:
    323e:	9f ef       	ldi	r25, 0xFF	; 255
    3240:	80 ec       	ldi	r24, 0xC0	; 192
    3242:	08 95       	ret

00003244 <__fp_pscA>:
    3244:	00 24       	eor	r0, r0
    3246:	0a 94       	dec	r0
    3248:	16 16       	cp	r1, r22
    324a:	17 06       	cpc	r1, r23
    324c:	18 06       	cpc	r1, r24
    324e:	09 06       	cpc	r0, r25
    3250:	08 95       	ret

00003252 <__fp_pscB>:
    3252:	00 24       	eor	r0, r0
    3254:	0a 94       	dec	r0
    3256:	12 16       	cp	r1, r18
    3258:	13 06       	cpc	r1, r19
    325a:	14 06       	cpc	r1, r20
    325c:	05 06       	cpc	r0, r21
    325e:	08 95       	ret

00003260 <__fp_round>:
    3260:	09 2e       	mov	r0, r25
    3262:	03 94       	inc	r0
    3264:	00 0c       	add	r0, r0
    3266:	11 f4       	brne	.+4      	; 0x326c <__fp_round+0xc>
    3268:	88 23       	and	r24, r24
    326a:	52 f0       	brmi	.+20     	; 0x3280 <__fp_round+0x20>
    326c:	bb 0f       	add	r27, r27
    326e:	40 f4       	brcc	.+16     	; 0x3280 <__fp_round+0x20>
    3270:	bf 2b       	or	r27, r31
    3272:	11 f4       	brne	.+4      	; 0x3278 <__fp_round+0x18>
    3274:	60 ff       	sbrs	r22, 0
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <__fp_round+0x20>
    3278:	6f 5f       	subi	r22, 0xFF	; 255
    327a:	7f 4f       	sbci	r23, 0xFF	; 255
    327c:	8f 4f       	sbci	r24, 0xFF	; 255
    327e:	9f 4f       	sbci	r25, 0xFF	; 255
    3280:	08 95       	ret

00003282 <__fp_split3>:
    3282:	57 fd       	sbrc	r21, 7
    3284:	90 58       	subi	r25, 0x80	; 128
    3286:	44 0f       	add	r20, r20
    3288:	55 1f       	adc	r21, r21
    328a:	59 f0       	breq	.+22     	; 0x32a2 <__fp_splitA+0x10>
    328c:	5f 3f       	cpi	r21, 0xFF	; 255
    328e:	71 f0       	breq	.+28     	; 0x32ac <__fp_splitA+0x1a>
    3290:	47 95       	ror	r20

00003292 <__fp_splitA>:
    3292:	88 0f       	add	r24, r24
    3294:	97 fb       	bst	r25, 7
    3296:	99 1f       	adc	r25, r25
    3298:	61 f0       	breq	.+24     	; 0x32b2 <__fp_splitA+0x20>
    329a:	9f 3f       	cpi	r25, 0xFF	; 255
    329c:	79 f0       	breq	.+30     	; 0x32bc <__fp_splitA+0x2a>
    329e:	87 95       	ror	r24
    32a0:	08 95       	ret
    32a2:	12 16       	cp	r1, r18
    32a4:	13 06       	cpc	r1, r19
    32a6:	14 06       	cpc	r1, r20
    32a8:	55 1f       	adc	r21, r21
    32aa:	f2 cf       	rjmp	.-28     	; 0x3290 <__fp_split3+0xe>
    32ac:	46 95       	lsr	r20
    32ae:	f1 df       	rcall	.-30     	; 0x3292 <__fp_splitA>
    32b0:	08 c0       	rjmp	.+16     	; 0x32c2 <__fp_splitA+0x30>
    32b2:	16 16       	cp	r1, r22
    32b4:	17 06       	cpc	r1, r23
    32b6:	18 06       	cpc	r1, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	f1 cf       	rjmp	.-30     	; 0x329e <__fp_splitA+0xc>
    32bc:	86 95       	lsr	r24
    32be:	71 05       	cpc	r23, r1
    32c0:	61 05       	cpc	r22, r1
    32c2:	08 94       	sec
    32c4:	08 95       	ret

000032c6 <__fp_zero>:
    32c6:	e8 94       	clt

000032c8 <__fp_szero>:
    32c8:	bb 27       	eor	r27, r27
    32ca:	66 27       	eor	r22, r22
    32cc:	77 27       	eor	r23, r23
    32ce:	cb 01       	movw	r24, r22
    32d0:	97 f9       	bld	r25, 7
    32d2:	08 95       	ret

000032d4 <__mulsf3>:
    32d4:	0b d0       	rcall	.+22     	; 0x32ec <__mulsf3x>
    32d6:	c4 cf       	rjmp	.-120    	; 0x3260 <__fp_round>
    32d8:	b5 df       	rcall	.-150    	; 0x3244 <__fp_pscA>
    32da:	28 f0       	brcs	.+10     	; 0x32e6 <__mulsf3+0x12>
    32dc:	ba df       	rcall	.-140    	; 0x3252 <__fp_pscB>
    32de:	18 f0       	brcs	.+6      	; 0x32e6 <__mulsf3+0x12>
    32e0:	95 23       	and	r25, r21
    32e2:	09 f0       	breq	.+2      	; 0x32e6 <__mulsf3+0x12>
    32e4:	a6 cf       	rjmp	.-180    	; 0x3232 <__fp_inf>
    32e6:	ab cf       	rjmp	.-170    	; 0x323e <__fp_nan>
    32e8:	11 24       	eor	r1, r1
    32ea:	ee cf       	rjmp	.-36     	; 0x32c8 <__fp_szero>

000032ec <__mulsf3x>:
    32ec:	ca df       	rcall	.-108    	; 0x3282 <__fp_split3>
    32ee:	a0 f3       	brcs	.-24     	; 0x32d8 <__mulsf3+0x4>

000032f0 <__mulsf3_pse>:
    32f0:	95 9f       	mul	r25, r21
    32f2:	d1 f3       	breq	.-12     	; 0x32e8 <__mulsf3+0x14>
    32f4:	95 0f       	add	r25, r21
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	55 1f       	adc	r21, r21
    32fa:	62 9f       	mul	r22, r18
    32fc:	f0 01       	movw	r30, r0
    32fe:	72 9f       	mul	r23, r18
    3300:	bb 27       	eor	r27, r27
    3302:	f0 0d       	add	r31, r0
    3304:	b1 1d       	adc	r27, r1
    3306:	63 9f       	mul	r22, r19
    3308:	aa 27       	eor	r26, r26
    330a:	f0 0d       	add	r31, r0
    330c:	b1 1d       	adc	r27, r1
    330e:	aa 1f       	adc	r26, r26
    3310:	64 9f       	mul	r22, r20
    3312:	66 27       	eor	r22, r22
    3314:	b0 0d       	add	r27, r0
    3316:	a1 1d       	adc	r26, r1
    3318:	66 1f       	adc	r22, r22
    331a:	82 9f       	mul	r24, r18
    331c:	22 27       	eor	r18, r18
    331e:	b0 0d       	add	r27, r0
    3320:	a1 1d       	adc	r26, r1
    3322:	62 1f       	adc	r22, r18
    3324:	73 9f       	mul	r23, r19
    3326:	b0 0d       	add	r27, r0
    3328:	a1 1d       	adc	r26, r1
    332a:	62 1f       	adc	r22, r18
    332c:	83 9f       	mul	r24, r19
    332e:	a0 0d       	add	r26, r0
    3330:	61 1d       	adc	r22, r1
    3332:	22 1f       	adc	r18, r18
    3334:	74 9f       	mul	r23, r20
    3336:	33 27       	eor	r19, r19
    3338:	a0 0d       	add	r26, r0
    333a:	61 1d       	adc	r22, r1
    333c:	23 1f       	adc	r18, r19
    333e:	84 9f       	mul	r24, r20
    3340:	60 0d       	add	r22, r0
    3342:	21 1d       	adc	r18, r1
    3344:	82 2f       	mov	r24, r18
    3346:	76 2f       	mov	r23, r22
    3348:	6a 2f       	mov	r22, r26
    334a:	11 24       	eor	r1, r1
    334c:	9f 57       	subi	r25, 0x7F	; 127
    334e:	50 40       	sbci	r21, 0x00	; 0
    3350:	8a f0       	brmi	.+34     	; 0x3374 <__mulsf3_pse+0x84>
    3352:	e1 f0       	breq	.+56     	; 0x338c <__mulsf3_pse+0x9c>
    3354:	88 23       	and	r24, r24
    3356:	4a f0       	brmi	.+18     	; 0x336a <__mulsf3_pse+0x7a>
    3358:	ee 0f       	add	r30, r30
    335a:	ff 1f       	adc	r31, r31
    335c:	bb 1f       	adc	r27, r27
    335e:	66 1f       	adc	r22, r22
    3360:	77 1f       	adc	r23, r23
    3362:	88 1f       	adc	r24, r24
    3364:	91 50       	subi	r25, 0x01	; 1
    3366:	50 40       	sbci	r21, 0x00	; 0
    3368:	a9 f7       	brne	.-22     	; 0x3354 <__mulsf3_pse+0x64>
    336a:	9e 3f       	cpi	r25, 0xFE	; 254
    336c:	51 05       	cpc	r21, r1
    336e:	70 f0       	brcs	.+28     	; 0x338c <__mulsf3_pse+0x9c>
    3370:	60 cf       	rjmp	.-320    	; 0x3232 <__fp_inf>
    3372:	aa cf       	rjmp	.-172    	; 0x32c8 <__fp_szero>
    3374:	5f 3f       	cpi	r21, 0xFF	; 255
    3376:	ec f3       	brlt	.-6      	; 0x3372 <__mulsf3_pse+0x82>
    3378:	98 3e       	cpi	r25, 0xE8	; 232
    337a:	dc f3       	brlt	.-10     	; 0x3372 <__mulsf3_pse+0x82>
    337c:	86 95       	lsr	r24
    337e:	77 95       	ror	r23
    3380:	67 95       	ror	r22
    3382:	b7 95       	ror	r27
    3384:	f7 95       	ror	r31
    3386:	e7 95       	ror	r30
    3388:	9f 5f       	subi	r25, 0xFF	; 255
    338a:	c1 f7       	brne	.-16     	; 0x337c <__mulsf3_pse+0x8c>
    338c:	fe 2b       	or	r31, r30
    338e:	88 0f       	add	r24, r24
    3390:	91 1d       	adc	r25, r1
    3392:	96 95       	lsr	r25
    3394:	87 95       	ror	r24
    3396:	97 f9       	bld	r25, 7
    3398:	08 95       	ret

0000339a <__tablejump2__>:
    339a:	ee 0f       	add	r30, r30
    339c:	ff 1f       	adc	r31, r31
    339e:	88 1f       	adc	r24, r24
    33a0:	8b bf       	out	0x3b, r24	; 59
    33a2:	07 90       	elpm	r0, Z+
    33a4:	f6 91       	elpm	r31, Z
    33a6:	e0 2d       	mov	r30, r0
    33a8:	19 94       	eijmp

000033aa <malloc>:
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	82 30       	cpi	r24, 0x02	; 2
    33b4:	91 05       	cpc	r25, r1
    33b6:	10 f4       	brcc	.+4      	; 0x33bc <malloc+0x12>
    33b8:	82 e0       	ldi	r24, 0x02	; 2
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	e0 91 18 0d 	lds	r30, 0x0D18	; 0x800d18 <__flp>
    33c0:	f0 91 19 0d 	lds	r31, 0x0D19	; 0x800d19 <__flp+0x1>
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	a0 e0       	ldi	r26, 0x00	; 0
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	30 97       	sbiw	r30, 0x00	; 0
    33ce:	19 f1       	breq	.+70     	; 0x3416 <malloc+0x6c>
    33d0:	40 81       	ld	r20, Z
    33d2:	51 81       	ldd	r21, Z+1	; 0x01
    33d4:	02 81       	ldd	r16, Z+2	; 0x02
    33d6:	13 81       	ldd	r17, Z+3	; 0x03
    33d8:	48 17       	cp	r20, r24
    33da:	59 07       	cpc	r21, r25
    33dc:	c8 f0       	brcs	.+50     	; 0x3410 <malloc+0x66>
    33de:	84 17       	cp	r24, r20
    33e0:	95 07       	cpc	r25, r21
    33e2:	69 f4       	brne	.+26     	; 0x33fe <malloc+0x54>
    33e4:	10 97       	sbiw	r26, 0x00	; 0
    33e6:	31 f0       	breq	.+12     	; 0x33f4 <malloc+0x4a>
    33e8:	12 96       	adiw	r26, 0x02	; 2
    33ea:	0c 93       	st	X, r16
    33ec:	12 97       	sbiw	r26, 0x02	; 2
    33ee:	13 96       	adiw	r26, 0x03	; 3
    33f0:	1c 93       	st	X, r17
    33f2:	27 c0       	rjmp	.+78     	; 0x3442 <malloc+0x98>
    33f4:	00 93 18 0d 	sts	0x0D18, r16	; 0x800d18 <__flp>
    33f8:	10 93 19 0d 	sts	0x0D19, r17	; 0x800d19 <__flp+0x1>
    33fc:	22 c0       	rjmp	.+68     	; 0x3442 <malloc+0x98>
    33fe:	21 15       	cp	r18, r1
    3400:	31 05       	cpc	r19, r1
    3402:	19 f0       	breq	.+6      	; 0x340a <malloc+0x60>
    3404:	42 17       	cp	r20, r18
    3406:	53 07       	cpc	r21, r19
    3408:	18 f4       	brcc	.+6      	; 0x3410 <malloc+0x66>
    340a:	9a 01       	movw	r18, r20
    340c:	bd 01       	movw	r22, r26
    340e:	ef 01       	movw	r28, r30
    3410:	df 01       	movw	r26, r30
    3412:	f8 01       	movw	r30, r16
    3414:	db cf       	rjmp	.-74     	; 0x33cc <malloc+0x22>
    3416:	21 15       	cp	r18, r1
    3418:	31 05       	cpc	r19, r1
    341a:	f9 f0       	breq	.+62     	; 0x345a <malloc+0xb0>
    341c:	28 1b       	sub	r18, r24
    341e:	39 0b       	sbc	r19, r25
    3420:	24 30       	cpi	r18, 0x04	; 4
    3422:	31 05       	cpc	r19, r1
    3424:	80 f4       	brcc	.+32     	; 0x3446 <malloc+0x9c>
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	9b 81       	ldd	r25, Y+3	; 0x03
    342a:	61 15       	cp	r22, r1
    342c:	71 05       	cpc	r23, r1
    342e:	21 f0       	breq	.+8      	; 0x3438 <malloc+0x8e>
    3430:	fb 01       	movw	r30, r22
    3432:	93 83       	std	Z+3, r25	; 0x03
    3434:	82 83       	std	Z+2, r24	; 0x02
    3436:	04 c0       	rjmp	.+8      	; 0x3440 <malloc+0x96>
    3438:	90 93 19 0d 	sts	0x0D19, r25	; 0x800d19 <__flp+0x1>
    343c:	80 93 18 0d 	sts	0x0D18, r24	; 0x800d18 <__flp>
    3440:	fe 01       	movw	r30, r28
    3442:	32 96       	adiw	r30, 0x02	; 2
    3444:	44 c0       	rjmp	.+136    	; 0x34ce <malloc+0x124>
    3446:	fe 01       	movw	r30, r28
    3448:	e2 0f       	add	r30, r18
    344a:	f3 1f       	adc	r31, r19
    344c:	81 93       	st	Z+, r24
    344e:	91 93       	st	Z+, r25
    3450:	22 50       	subi	r18, 0x02	; 2
    3452:	31 09       	sbc	r19, r1
    3454:	39 83       	std	Y+1, r19	; 0x01
    3456:	28 83       	st	Y, r18
    3458:	3a c0       	rjmp	.+116    	; 0x34ce <malloc+0x124>
    345a:	20 91 16 0d 	lds	r18, 0x0D16	; 0x800d16 <__brkval>
    345e:	30 91 17 0d 	lds	r19, 0x0D17	; 0x800d17 <__brkval+0x1>
    3462:	23 2b       	or	r18, r19
    3464:	41 f4       	brne	.+16     	; 0x3476 <malloc+0xcc>
    3466:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    346a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    346e:	30 93 17 0d 	sts	0x0D17, r19	; 0x800d17 <__brkval+0x1>
    3472:	20 93 16 0d 	sts	0x0D16, r18	; 0x800d16 <__brkval>
    3476:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    347a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    347e:	21 15       	cp	r18, r1
    3480:	31 05       	cpc	r19, r1
    3482:	41 f4       	brne	.+16     	; 0x3494 <malloc+0xea>
    3484:	2d b7       	in	r18, 0x3d	; 61
    3486:	3e b7       	in	r19, 0x3e	; 62
    3488:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    348c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3490:	24 1b       	sub	r18, r20
    3492:	35 0b       	sbc	r19, r21
    3494:	e0 91 16 0d 	lds	r30, 0x0D16	; 0x800d16 <__brkval>
    3498:	f0 91 17 0d 	lds	r31, 0x0D17	; 0x800d17 <__brkval+0x1>
    349c:	e2 17       	cp	r30, r18
    349e:	f3 07       	cpc	r31, r19
    34a0:	a0 f4       	brcc	.+40     	; 0x34ca <malloc+0x120>
    34a2:	2e 1b       	sub	r18, r30
    34a4:	3f 0b       	sbc	r19, r31
    34a6:	28 17       	cp	r18, r24
    34a8:	39 07       	cpc	r19, r25
    34aa:	78 f0       	brcs	.+30     	; 0x34ca <malloc+0x120>
    34ac:	ac 01       	movw	r20, r24
    34ae:	4e 5f       	subi	r20, 0xFE	; 254
    34b0:	5f 4f       	sbci	r21, 0xFF	; 255
    34b2:	24 17       	cp	r18, r20
    34b4:	35 07       	cpc	r19, r21
    34b6:	48 f0       	brcs	.+18     	; 0x34ca <malloc+0x120>
    34b8:	4e 0f       	add	r20, r30
    34ba:	5f 1f       	adc	r21, r31
    34bc:	50 93 17 0d 	sts	0x0D17, r21	; 0x800d17 <__brkval+0x1>
    34c0:	40 93 16 0d 	sts	0x0D16, r20	; 0x800d16 <__brkval>
    34c4:	81 93       	st	Z+, r24
    34c6:	91 93       	st	Z+, r25
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <malloc+0x124>
    34ca:	e0 e0       	ldi	r30, 0x00	; 0
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	cf 01       	movw	r24, r30
    34d0:	df 91       	pop	r29
    34d2:	cf 91       	pop	r28
    34d4:	1f 91       	pop	r17
    34d6:	0f 91       	pop	r16
    34d8:	08 95       	ret

000034da <free>:
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	00 97       	sbiw	r24, 0x00	; 0
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <free+0xa>
    34e2:	81 c0       	rjmp	.+258    	; 0x35e6 <free+0x10c>
    34e4:	fc 01       	movw	r30, r24
    34e6:	32 97       	sbiw	r30, 0x02	; 2
    34e8:	13 82       	std	Z+3, r1	; 0x03
    34ea:	12 82       	std	Z+2, r1	; 0x02
    34ec:	a0 91 18 0d 	lds	r26, 0x0D18	; 0x800d18 <__flp>
    34f0:	b0 91 19 0d 	lds	r27, 0x0D19	; 0x800d19 <__flp+0x1>
    34f4:	10 97       	sbiw	r26, 0x00	; 0
    34f6:	81 f4       	brne	.+32     	; 0x3518 <free+0x3e>
    34f8:	20 81       	ld	r18, Z
    34fa:	31 81       	ldd	r19, Z+1	; 0x01
    34fc:	82 0f       	add	r24, r18
    34fe:	93 1f       	adc	r25, r19
    3500:	20 91 16 0d 	lds	r18, 0x0D16	; 0x800d16 <__brkval>
    3504:	30 91 17 0d 	lds	r19, 0x0D17	; 0x800d17 <__brkval+0x1>
    3508:	28 17       	cp	r18, r24
    350a:	39 07       	cpc	r19, r25
    350c:	51 f5       	brne	.+84     	; 0x3562 <free+0x88>
    350e:	f0 93 17 0d 	sts	0x0D17, r31	; 0x800d17 <__brkval+0x1>
    3512:	e0 93 16 0d 	sts	0x0D16, r30	; 0x800d16 <__brkval>
    3516:	67 c0       	rjmp	.+206    	; 0x35e6 <free+0x10c>
    3518:	ed 01       	movw	r28, r26
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	ce 17       	cp	r28, r30
    3520:	df 07       	cpc	r29, r31
    3522:	40 f4       	brcc	.+16     	; 0x3534 <free+0x5a>
    3524:	4a 81       	ldd	r20, Y+2	; 0x02
    3526:	5b 81       	ldd	r21, Y+3	; 0x03
    3528:	9e 01       	movw	r18, r28
    352a:	41 15       	cp	r20, r1
    352c:	51 05       	cpc	r21, r1
    352e:	f1 f0       	breq	.+60     	; 0x356c <free+0x92>
    3530:	ea 01       	movw	r28, r20
    3532:	f5 cf       	rjmp	.-22     	; 0x351e <free+0x44>
    3534:	d3 83       	std	Z+3, r29	; 0x03
    3536:	c2 83       	std	Z+2, r28	; 0x02
    3538:	40 81       	ld	r20, Z
    353a:	51 81       	ldd	r21, Z+1	; 0x01
    353c:	84 0f       	add	r24, r20
    353e:	95 1f       	adc	r25, r21
    3540:	c8 17       	cp	r28, r24
    3542:	d9 07       	cpc	r29, r25
    3544:	59 f4       	brne	.+22     	; 0x355c <free+0x82>
    3546:	88 81       	ld	r24, Y
    3548:	99 81       	ldd	r25, Y+1	; 0x01
    354a:	84 0f       	add	r24, r20
    354c:	95 1f       	adc	r25, r21
    354e:	02 96       	adiw	r24, 0x02	; 2
    3550:	91 83       	std	Z+1, r25	; 0x01
    3552:	80 83       	st	Z, r24
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	9b 81       	ldd	r25, Y+3	; 0x03
    3558:	93 83       	std	Z+3, r25	; 0x03
    355a:	82 83       	std	Z+2, r24	; 0x02
    355c:	21 15       	cp	r18, r1
    355e:	31 05       	cpc	r19, r1
    3560:	29 f4       	brne	.+10     	; 0x356c <free+0x92>
    3562:	f0 93 19 0d 	sts	0x0D19, r31	; 0x800d19 <__flp+0x1>
    3566:	e0 93 18 0d 	sts	0x0D18, r30	; 0x800d18 <__flp>
    356a:	3d c0       	rjmp	.+122    	; 0x35e6 <free+0x10c>
    356c:	e9 01       	movw	r28, r18
    356e:	fb 83       	std	Y+3, r31	; 0x03
    3570:	ea 83       	std	Y+2, r30	; 0x02
    3572:	49 91       	ld	r20, Y+
    3574:	59 91       	ld	r21, Y+
    3576:	c4 0f       	add	r28, r20
    3578:	d5 1f       	adc	r29, r21
    357a:	ec 17       	cp	r30, r28
    357c:	fd 07       	cpc	r31, r29
    357e:	61 f4       	brne	.+24     	; 0x3598 <free+0xbe>
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	84 0f       	add	r24, r20
    3586:	95 1f       	adc	r25, r21
    3588:	02 96       	adiw	r24, 0x02	; 2
    358a:	e9 01       	movw	r28, r18
    358c:	99 83       	std	Y+1, r25	; 0x01
    358e:	88 83       	st	Y, r24
    3590:	82 81       	ldd	r24, Z+2	; 0x02
    3592:	93 81       	ldd	r25, Z+3	; 0x03
    3594:	9b 83       	std	Y+3, r25	; 0x03
    3596:	8a 83       	std	Y+2, r24	; 0x02
    3598:	e0 e0       	ldi	r30, 0x00	; 0
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	12 96       	adiw	r26, 0x02	; 2
    359e:	8d 91       	ld	r24, X+
    35a0:	9c 91       	ld	r25, X
    35a2:	13 97       	sbiw	r26, 0x03	; 3
    35a4:	00 97       	sbiw	r24, 0x00	; 0
    35a6:	19 f0       	breq	.+6      	; 0x35ae <free+0xd4>
    35a8:	fd 01       	movw	r30, r26
    35aa:	dc 01       	movw	r26, r24
    35ac:	f7 cf       	rjmp	.-18     	; 0x359c <free+0xc2>
    35ae:	8d 91       	ld	r24, X+
    35b0:	9c 91       	ld	r25, X
    35b2:	11 97       	sbiw	r26, 0x01	; 1
    35b4:	9d 01       	movw	r18, r26
    35b6:	2e 5f       	subi	r18, 0xFE	; 254
    35b8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ba:	82 0f       	add	r24, r18
    35bc:	93 1f       	adc	r25, r19
    35be:	20 91 16 0d 	lds	r18, 0x0D16	; 0x800d16 <__brkval>
    35c2:	30 91 17 0d 	lds	r19, 0x0D17	; 0x800d17 <__brkval+0x1>
    35c6:	28 17       	cp	r18, r24
    35c8:	39 07       	cpc	r19, r25
    35ca:	69 f4       	brne	.+26     	; 0x35e6 <free+0x10c>
    35cc:	30 97       	sbiw	r30, 0x00	; 0
    35ce:	29 f4       	brne	.+10     	; 0x35da <free+0x100>
    35d0:	10 92 19 0d 	sts	0x0D19, r1	; 0x800d19 <__flp+0x1>
    35d4:	10 92 18 0d 	sts	0x0D18, r1	; 0x800d18 <__flp>
    35d8:	02 c0       	rjmp	.+4      	; 0x35de <free+0x104>
    35da:	13 82       	std	Z+3, r1	; 0x03
    35dc:	12 82       	std	Z+2, r1	; 0x02
    35de:	b0 93 17 0d 	sts	0x0D17, r27	; 0x800d17 <__brkval+0x1>
    35e2:	a0 93 16 0d 	sts	0x0D16, r26	; 0x800d16 <__brkval>
    35e6:	df 91       	pop	r29
    35e8:	cf 91       	pop	r28
    35ea:	08 95       	ret

000035ec <abort>:
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	f8 94       	cli
    35f2:	8f c0       	rjmp	.+286    	; 0x3712 <_exit>

000035f4 <memcpy>:
    35f4:	fb 01       	movw	r30, r22
    35f6:	dc 01       	movw	r26, r24
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <memcpy+0xa>
    35fa:	01 90       	ld	r0, Z+
    35fc:	0d 92       	st	X+, r0
    35fe:	41 50       	subi	r20, 0x01	; 1
    3600:	50 40       	sbci	r21, 0x00	; 0
    3602:	d8 f7       	brcc	.-10     	; 0x35fa <memcpy+0x6>
    3604:	08 95       	ret

00003606 <memset>:
    3606:	dc 01       	movw	r26, r24
    3608:	01 c0       	rjmp	.+2      	; 0x360c <memset+0x6>
    360a:	6d 93       	st	X+, r22
    360c:	41 50       	subi	r20, 0x01	; 1
    360e:	50 40       	sbci	r21, 0x00	; 0
    3610:	e0 f7       	brcc	.-8      	; 0x360a <memset+0x4>
    3612:	08 95       	ret

00003614 <fgetc>:
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
    3618:	ec 01       	movw	r28, r24
    361a:	2b 81       	ldd	r18, Y+3	; 0x03
    361c:	20 ff       	sbrs	r18, 0
    361e:	33 c0       	rjmp	.+102    	; 0x3686 <fgetc+0x72>
    3620:	26 ff       	sbrs	r18, 6
    3622:	0a c0       	rjmp	.+20     	; 0x3638 <fgetc+0x24>
    3624:	2f 7b       	andi	r18, 0xBF	; 191
    3626:	2b 83       	std	Y+3, r18	; 0x03
    3628:	8e 81       	ldd	r24, Y+6	; 0x06
    362a:	9f 81       	ldd	r25, Y+7	; 0x07
    362c:	01 96       	adiw	r24, 0x01	; 1
    362e:	9f 83       	std	Y+7, r25	; 0x07
    3630:	8e 83       	std	Y+6, r24	; 0x06
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	29 c0       	rjmp	.+82     	; 0x368a <fgetc+0x76>
    3638:	22 ff       	sbrs	r18, 2
    363a:	0f c0       	rjmp	.+30     	; 0x365a <fgetc+0x46>
    363c:	e8 81       	ld	r30, Y
    363e:	f9 81       	ldd	r31, Y+1	; 0x01
    3640:	80 81       	ld	r24, Z
    3642:	08 2e       	mov	r0, r24
    3644:	00 0c       	add	r0, r0
    3646:	99 0b       	sbc	r25, r25
    3648:	00 97       	sbiw	r24, 0x00	; 0
    364a:	19 f4       	brne	.+6      	; 0x3652 <fgetc+0x3e>
    364c:	20 62       	ori	r18, 0x20	; 32
    364e:	2b 83       	std	Y+3, r18	; 0x03
    3650:	1a c0       	rjmp	.+52     	; 0x3686 <fgetc+0x72>
    3652:	31 96       	adiw	r30, 0x01	; 1
    3654:	f9 83       	std	Y+1, r31	; 0x01
    3656:	e8 83       	st	Y, r30
    3658:	0e c0       	rjmp	.+28     	; 0x3676 <fgetc+0x62>
    365a:	ea 85       	ldd	r30, Y+10	; 0x0a
    365c:	fb 85       	ldd	r31, Y+11	; 0x0b
    365e:	19 95       	eicall
    3660:	97 ff       	sbrs	r25, 7
    3662:	09 c0       	rjmp	.+18     	; 0x3676 <fgetc+0x62>
    3664:	2b 81       	ldd	r18, Y+3	; 0x03
    3666:	01 96       	adiw	r24, 0x01	; 1
    3668:	11 f0       	breq	.+4      	; 0x366e <fgetc+0x5a>
    366a:	80 e2       	ldi	r24, 0x20	; 32
    366c:	01 c0       	rjmp	.+2      	; 0x3670 <fgetc+0x5c>
    366e:	80 e1       	ldi	r24, 0x10	; 16
    3670:	82 2b       	or	r24, r18
    3672:	8b 83       	std	Y+3, r24	; 0x03
    3674:	08 c0       	rjmp	.+16     	; 0x3686 <fgetc+0x72>
    3676:	2e 81       	ldd	r18, Y+6	; 0x06
    3678:	3f 81       	ldd	r19, Y+7	; 0x07
    367a:	2f 5f       	subi	r18, 0xFF	; 255
    367c:	3f 4f       	sbci	r19, 0xFF	; 255
    367e:	3f 83       	std	Y+7, r19	; 0x07
    3680:	2e 83       	std	Y+6, r18	; 0x06
    3682:	99 27       	eor	r25, r25
    3684:	02 c0       	rjmp	.+4      	; 0x368a <fgetc+0x76>
    3686:	8f ef       	ldi	r24, 0xFF	; 255
    3688:	9f ef       	ldi	r25, 0xFF	; 255
    368a:	df 91       	pop	r29
    368c:	cf 91       	pop	r28
    368e:	08 95       	ret

00003690 <putchar>:
    3690:	60 91 1c 0d 	lds	r22, 0x0D1C	; 0x800d1c <__iob+0x2>
    3694:	70 91 1d 0d 	lds	r23, 0x0D1D	; 0x800d1d <__iob+0x3>
    3698:	00 c0       	rjmp	.+0      	; 0x369a <fputc>

0000369a <fputc>:
    369a:	0f 93       	push	r16
    369c:	1f 93       	push	r17
    369e:	cf 93       	push	r28
    36a0:	df 93       	push	r29
    36a2:	fb 01       	movw	r30, r22
    36a4:	23 81       	ldd	r18, Z+3	; 0x03
    36a6:	21 fd       	sbrc	r18, 1
    36a8:	03 c0       	rjmp	.+6      	; 0x36b0 <fputc+0x16>
    36aa:	8f ef       	ldi	r24, 0xFF	; 255
    36ac:	9f ef       	ldi	r25, 0xFF	; 255
    36ae:	2c c0       	rjmp	.+88     	; 0x3708 <fputc+0x6e>
    36b0:	22 ff       	sbrs	r18, 2
    36b2:	16 c0       	rjmp	.+44     	; 0x36e0 <fputc+0x46>
    36b4:	46 81       	ldd	r20, Z+6	; 0x06
    36b6:	57 81       	ldd	r21, Z+7	; 0x07
    36b8:	24 81       	ldd	r18, Z+4	; 0x04
    36ba:	35 81       	ldd	r19, Z+5	; 0x05
    36bc:	42 17       	cp	r20, r18
    36be:	53 07       	cpc	r21, r19
    36c0:	44 f4       	brge	.+16     	; 0x36d2 <fputc+0x38>
    36c2:	a0 81       	ld	r26, Z
    36c4:	b1 81       	ldd	r27, Z+1	; 0x01
    36c6:	9d 01       	movw	r18, r26
    36c8:	2f 5f       	subi	r18, 0xFF	; 255
    36ca:	3f 4f       	sbci	r19, 0xFF	; 255
    36cc:	31 83       	std	Z+1, r19	; 0x01
    36ce:	20 83       	st	Z, r18
    36d0:	8c 93       	st	X, r24
    36d2:	26 81       	ldd	r18, Z+6	; 0x06
    36d4:	37 81       	ldd	r19, Z+7	; 0x07
    36d6:	2f 5f       	subi	r18, 0xFF	; 255
    36d8:	3f 4f       	sbci	r19, 0xFF	; 255
    36da:	37 83       	std	Z+7, r19	; 0x07
    36dc:	26 83       	std	Z+6, r18	; 0x06
    36de:	14 c0       	rjmp	.+40     	; 0x3708 <fputc+0x6e>
    36e0:	8b 01       	movw	r16, r22
    36e2:	ec 01       	movw	r28, r24
    36e4:	fb 01       	movw	r30, r22
    36e6:	00 84       	ldd	r0, Z+8	; 0x08
    36e8:	f1 85       	ldd	r31, Z+9	; 0x09
    36ea:	e0 2d       	mov	r30, r0
    36ec:	19 95       	eicall
    36ee:	89 2b       	or	r24, r25
    36f0:	e1 f6       	brne	.-72     	; 0x36aa <fputc+0x10>
    36f2:	d8 01       	movw	r26, r16
    36f4:	16 96       	adiw	r26, 0x06	; 6
    36f6:	8d 91       	ld	r24, X+
    36f8:	9c 91       	ld	r25, X
    36fa:	17 97       	sbiw	r26, 0x07	; 7
    36fc:	01 96       	adiw	r24, 0x01	; 1
    36fe:	17 96       	adiw	r26, 0x07	; 7
    3700:	9c 93       	st	X, r25
    3702:	8e 93       	st	-X, r24
    3704:	16 97       	sbiw	r26, 0x06	; 6
    3706:	ce 01       	movw	r24, r28
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	08 95       	ret

00003712 <_exit>:
    3712:	f8 94       	cli

00003714 <__stop_program>:
    3714:	ff cf       	rjmp	.-2      	; 0x3714 <__stop_program>
